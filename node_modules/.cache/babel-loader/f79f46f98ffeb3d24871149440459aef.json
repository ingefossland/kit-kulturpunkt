{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { asNumber, guessType } from \"../../utils\";\nvar nums = new _Set([\"number\", \"integer\"]);\n/**\n * This is a silly limitation in the DOM where option change event values are\n * always retrieved as strings.\n */\n\nfunction processValue(schema, value) {\n  // \"enum\" is a reserved word, so only \"type\" and \"items\" can be destructured\n  var type = schema.type,\n      items = schema.items;\n\n  if (value === \"\") {\n    return undefined;\n  } else if (type === \"array\" && items && nums.has(items.type)) {\n    return value.map(asNumber);\n  } else if (type === \"boolean\") {\n    return value === \"true\";\n  } else if (type === \"number\") {\n    return asNumber(value);\n  } // If type is undefined, but an enum is present, try and infer the type from\n  // the enum values\n\n\n  if (schema[\"enum\"]) {\n    if (schema[\"enum\"].every(function (x) {\n      return guessType(x) === \"number\";\n    })) {\n      return asNumber(value);\n    } else if (schema[\"enum\"].every(function (x) {\n      return guessType(x) === \"boolean\";\n    })) {\n      return value === \"true\";\n    }\n  }\n\n  return value;\n}\n\nfunction getValue(event, multiple) {\n  if (multiple) {\n    return [].slice.call(event.target.options).filter(function (o) {\n      return o.selected;\n    }).map(function (o) {\n      return o.value;\n    });\n  } else {\n    return event.target.value;\n  }\n}\n\nfunction SelectWidget(props) {\n  var schema = props.schema,\n      id = props.id,\n      options = props.options,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      multiple = props.multiple,\n      autofocus = props.autofocus,\n      _onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled;\n  var emptyValue = multiple ? [] : \"\";\n  return React.createElement(\"select\", {\n    id: id,\n    multiple: multiple,\n    className: \"form-control\",\n    value: typeof value === \"undefined\" ? emptyValue : value,\n    required: required,\n    disabled: disabled || readonly,\n    autoFocus: autofocus,\n    onBlur: onBlur && function (event) {\n      var newValue = getValue(event, multiple);\n      onBlur(id, processValue(schema, newValue));\n    },\n    onFocus: onFocus && function (event) {\n      var newValue = getValue(event, multiple);\n      onFocus(id, processValue(schema, newValue));\n    },\n    onChange: function onChange(event) {\n      var newValue = getValue(event, multiple);\n\n      _onChange(processValue(schema, newValue));\n    }\n  }, !multiple && schema[\"default\"] === undefined && React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), enumOptions.map(function (_ref, i) {\n    var value = _ref.value,\n        label = _ref.label;\n    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n    return React.createElement(\"option\", {\n      key: i,\n      value: value,\n      disabled: disabled\n    }, label);\n  }));\n}\n\nSelectWidget.defaultProps = {\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  SelectWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.shape({\n      enumOptions: PropTypes.array\n    }).isRequired,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    multiple: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func\n  };\n}\n\nexport default SelectWidget;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@rjsf/core/lib/components/widgets/SelectWidget.js"],"names":["_Set","React","PropTypes","asNumber","guessType","nums","processValue","schema","value","type","items","undefined","has","map","every","x","getValue","event","multiple","slice","call","target","options","filter","o","selected","SelectWidget","props","id","required","disabled","readonly","autofocus","_onChange","onChange","onBlur","onFocus","placeholder","enumOptions","enumDisabled","emptyValue","createElement","className","autoFocus","newValue","_ref","i","label","indexOf","key","defaultProps","process","env","NODE_ENV","propTypes","object","isRequired","string","shape","array","any","bool","func"],"mappings":"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","sourcesContent":["import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { asNumber, guessType } from \"../../utils\";\nvar nums = new _Set([\"number\", \"integer\"]);\n/**\n * This is a silly limitation in the DOM where option change event values are\n * always retrieved as strings.\n */\n\nfunction processValue(schema, value) {\n  // \"enum\" is a reserved word, so only \"type\" and \"items\" can be destructured\n  var type = schema.type,\n      items = schema.items;\n\n  if (value === \"\") {\n    return undefined;\n  } else if (type === \"array\" && items && nums.has(items.type)) {\n    return value.map(asNumber);\n  } else if (type === \"boolean\") {\n    return value === \"true\";\n  } else if (type === \"number\") {\n    return asNumber(value);\n  } // If type is undefined, but an enum is present, try and infer the type from\n  // the enum values\n\n\n  if (schema[\"enum\"]) {\n    if (schema[\"enum\"].every(function (x) {\n      return guessType(x) === \"number\";\n    })) {\n      return asNumber(value);\n    } else if (schema[\"enum\"].every(function (x) {\n      return guessType(x) === \"boolean\";\n    })) {\n      return value === \"true\";\n    }\n  }\n\n  return value;\n}\n\nfunction getValue(event, multiple) {\n  if (multiple) {\n    return [].slice.call(event.target.options).filter(function (o) {\n      return o.selected;\n    }).map(function (o) {\n      return o.value;\n    });\n  } else {\n    return event.target.value;\n  }\n}\n\nfunction SelectWidget(props) {\n  var schema = props.schema,\n      id = props.id,\n      options = props.options,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      multiple = props.multiple,\n      autofocus = props.autofocus,\n      _onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled;\n  var emptyValue = multiple ? [] : \"\";\n  return React.createElement(\"select\", {\n    id: id,\n    multiple: multiple,\n    className: \"form-control\",\n    value: typeof value === \"undefined\" ? emptyValue : value,\n    required: required,\n    disabled: disabled || readonly,\n    autoFocus: autofocus,\n    onBlur: onBlur && function (event) {\n      var newValue = getValue(event, multiple);\n      onBlur(id, processValue(schema, newValue));\n    },\n    onFocus: onFocus && function (event) {\n      var newValue = getValue(event, multiple);\n      onFocus(id, processValue(schema, newValue));\n    },\n    onChange: function onChange(event) {\n      var newValue = getValue(event, multiple);\n\n      _onChange(processValue(schema, newValue));\n    }\n  }, !multiple && schema[\"default\"] === undefined && React.createElement(\"option\", {\n    value: \"\"\n  }, placeholder), enumOptions.map(function (_ref, i) {\n    var value = _ref.value,\n        label = _ref.label;\n    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n    return React.createElement(\"option\", {\n      key: i,\n      value: value,\n      disabled: disabled\n    }, label);\n  }));\n}\n\nSelectWidget.defaultProps = {\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  SelectWidget.propTypes = {\n    schema: PropTypes.object.isRequired,\n    id: PropTypes.string.isRequired,\n    options: PropTypes.shape({\n      enumOptions: PropTypes.array\n    }).isRequired,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    multiple: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func\n  };\n}\n\nexport default SelectWidget;"]},"metadata":{},"sourceType":"module"}