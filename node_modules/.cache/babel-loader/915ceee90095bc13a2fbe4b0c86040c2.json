{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/NavToolbar/NavToolbar.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from \"prop-types\";\nimport NavToolbarOptions from \"./NavToolbarOptions\";\nimport NavToolbarSettings from \"./NavToolbarSettings\";\nimport NavToolbarButton from \"./NavToolbarButton\";\nimport getToolbar from \"./getToolbar\";\nconst useStyles = makeStyles(theme => ({\n  toolbar: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexWrap: \"nowrap\"\n  }\n}));\n/** NavToolbar renders buttons and options based on capabilities. */\n\nconst NavToolbar = ({\n  className,\n  toolbar,\n  ...props\n}) => {\n  const classes = useStyles();\n\n  if (!toolbar) {\n    toolbar = getToolbar(props);\n  }\n\n  if (!toolbar.length) {\n    return false;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className || classes.toolbar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, toolbar && toolbar.map((button, index) => {\n    const {\n      value,\n      options\n    } = button;\n\n    if (value) {\n      return /*#__PURE__*/React.createElement(NavToolbarSettings, Object.assign({}, button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 28\n        }\n      }));\n    }\n\n    if (options) {\n      return /*#__PURE__*/React.createElement(NavToolbarOptions, Object.assign({}, button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 28\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(NavToolbarButton, Object.assign({}, button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 24\n      }\n    }));\n  }));\n};\n\nNavToolbar.propTypes = {\n  toolbar: PropTypes.array,\n  hideable: PropTypes.bool,\n  hidden: PropTypes.bool,\n  onHide: PropTypes.func,\n  onUnhide: PropTypes.func,\n  editable: PropTypes.bool,\n  editing: PropTypes.bool,\n  onEdit: PropTypes.func,\n  deletable: PropTypes.bool,\n  deleted: PropTypes.bool,\n  onDelete: PropTypes.func,\n  erasable: PropTypes.bool,\n  erased: PropTypes.bool,\n  onErase: PropTypes.func,\n  restorable: PropTypes.bool,\n  restored: PropTypes.bool,\n  onRestore: PropTypes.func,\n  removable: PropTypes.bool,\n  removed: PropTypes.bool,\n  onRemove: PropTypes.func\n};\nexport default NavToolbar;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/NavToolbar/NavToolbar.js"],"names":["React","makeStyles","PropTypes","NavToolbarOptions","NavToolbarSettings","NavToolbarButton","getToolbar","useStyles","theme","toolbar","display","alignItems","justifyContent","flexWrap","NavToolbar","className","props","classes","length","map","button","index","value","options","propTypes","array","hideable","bool","hidden","onHide","func","onUnhide","editable","editing","onEdit","deletable","deleted","onDelete","erasable","erased","onErase","restorable","restored","onRestore","removable","removed","onRemove"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from \"prop-types\"\n\nimport NavToolbarOptions from \"./NavToolbarOptions\"\nimport NavToolbarSettings from \"./NavToolbarSettings\"\nimport NavToolbarButton from \"./NavToolbarButton\"\n\nimport getToolbar from \"./getToolbar\"\n\nconst useStyles = makeStyles(theme => ({\n    toolbar: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        flexWrap: \"nowrap\"\n    }\n}));\n\n/** NavToolbar renders buttons and options based on capabilities. */\n\nconst NavToolbar = ({className, toolbar, ...props}) => {\n    const classes = useStyles()\n\n    if (!toolbar) {\n        toolbar = getToolbar(props)\n    }\n\n    if (!toolbar.length) {\n        return false\n    }\n\n    return (\n        <div className={className ||Â classes.toolbar}>\n            { toolbar && toolbar.map((button, index) => {\n\n                const { value, options } = button\n\n                if (value) {\n                    return <NavToolbarSettings {...button} />\n                }\n\n                if (options) {\n                    return <NavToolbarOptions {...button} />\n                }\n            \n                return <NavToolbarButton {...button} />\n                \n            })}\n        </div>\n    )\n\n}\n\nNavToolbar.propTypes = {\n    toolbar: PropTypes.array,\n    hideable: PropTypes.bool,\n    hidden: PropTypes.bool,\n    onHide: PropTypes.func,\n    onUnhide: PropTypes.func,\n    editable: PropTypes.bool,\n    editing: PropTypes.bool,\n    onEdit: PropTypes.func,\n    deletable: PropTypes.bool,\n    deleted: PropTypes.bool,\n    onDelete: PropTypes.func,\n    erasable: PropTypes.bool,\n    erased: PropTypes.bool,\n    onErase: PropTypes.func,\n    restorable: PropTypes.bool,\n    restored: PropTypes.bool,\n    onRestore: PropTypes.func,\n    removable: PropTypes.bool,\n    removed: PropTypes.bool,\n    onRemove: PropTypes.func,\n}\n\nexport default NavToolbar;\n"]},"metadata":{},"sourceType":"module"}