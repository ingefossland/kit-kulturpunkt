{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/RRulesField.js\";\nimport React, { useState, useEffect } from \"react\";\nimport model from \"./RRulesField.model\";\nimport { getRRuleFromFormData, getFormDataFromRRule } from \"./utils\";\nimport { utils } from \"@rjsf/core\";\nconst {\n  getUiOptions,\n  getDefaultFormState\n} = utils;\n\nconst RRulesField = props => {\n  const schema = { ...model.schema,\n    ...props.schema\n  };\n  const uiSchema = { ...model.uiSchema,\n    ...props.uiSchema\n  };\n\n  const getFormData = formData => {\n    if (props.schema.type === \"string\") {\n      return getFormDataFromRRule(formData);\n    } else {\n      return getDefaultFormState(schema, formData);\n    }\n  };\n\n  const [formData, setFormData] = useState(getFormData(props.formData)); // onChange\n\n  const _onChange = formData => {\n    setFormData(formData);\n\n    if (props.schema.type === \"string\") {\n      props.onChange(getRRuleFromFormData(formData));\n    } else {\n      props.onChange(formData);\n    }\n  }; // formData\n\n\n  const {\n    ObjectField\n  } = props.registry.fields;\n  return /*#__PURE__*/React.createElement(ObjectField, Object.assign({}, props, {\n    formData: formData,\n    schema: schema,\n    uiSchema: uiSchema,\n    onChange: _onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }));\n};\n\nRRulesField.defaultProps = {\n  formData: {}\n};\nexport default RRulesField;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/RRulesField.js"],"names":["React","useState","useEffect","model","getRRuleFromFormData","getFormDataFromRRule","utils","getUiOptions","getDefaultFormState","RRulesField","props","schema","uiSchema","getFormData","formData","type","setFormData","_onChange","onChange","ObjectField","registry","fields","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AAEA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,SAA3D;AAEA,SAASC,KAAT,QAAsB,YAAtB;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAAwCF,KAA9C;;AAEA,MAAMG,WAAW,GAAIC,KAAD,IAAW;AAE3B,QAAMC,MAAM,GAAG,EACX,GAAGR,KAAK,CAACQ,MADE;AAEX,OAAGD,KAAK,CAACC;AAFE,GAAf;AAKA,QAAMC,QAAQ,GAAG,EACb,GAAGT,KAAK,CAACS,QADI;AAEb,OAAGF,KAAK,CAACE;AAFI,GAAjB;;AAKA,QAAMC,WAAW,GAAIC,QAAD,IAAc;AAE9B,QAAIJ,KAAK,CAACC,MAAN,CAAaI,IAAb,KAAsB,QAA1B,EAAoC;AAChC,aAAOV,oBAAoB,CAACS,QAAD,CAA3B;AACH,KAFD,MAEO;AACH,aAAON,mBAAmB,CAACG,MAAD,EAASG,QAAT,CAA1B;AACH;AAEJ,GARD;;AAUA,QAAM,CAACA,QAAD,EAAWE,WAAX,IAA0Bf,QAAQ,CAACY,WAAW,CAACH,KAAK,CAACI,QAAP,CAAZ,CAAxC,CAtB2B,CAwB3B;;AAEA,QAAMG,SAAS,GAAIH,QAAD,IAAc;AAC5BE,IAAAA,WAAW,CAACF,QAAD,CAAX;;AAEA,QAAIJ,KAAK,CAACC,MAAN,CAAaI,IAAb,KAAsB,QAA1B,EAAoC;AAChCL,MAAAA,KAAK,CAACQ,QAAN,CAAed,oBAAoB,CAACU,QAAD,CAAnC;AACH,KAFD,MAEO;AACHJ,MAAAA,KAAK,CAACQ,QAAN,CAAeJ,QAAf;AACH;AAEJ,GATD,CA1B2B,CAqC3B;;;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAkBT,KAAK,CAACU,QAAN,CAAeC,MAAvC;AAEA,sBACI,oBAAC,WAAD,oBACQX,KADR;AAEI,IAAA,QAAQ,EAAEI,QAFd;AAGI,IAAA,MAAM,EAAEH,MAHZ;AAII,IAAA,QAAQ,EAAEC,QAJd;AAKI,IAAA,QAAQ,EAAEK,SALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AASH,CAlDD;;AAoDAR,WAAW,CAACa,YAAZ,GAA2B;AACvBR,EAAAA,QAAQ,EAAE;AADa,CAA3B;AAMA,eAAeL,WAAf","sourcesContent":["import React, {Â useState, useEffect } from \"react\"\nimport model from \"./RRulesField.model\"\n\nimport { getRRuleFromFormData, getFormDataFromRRule } from \"./utils\"\n\nimport { utils } from \"@rjsf/core\";\nconst { getUiOptions, getDefaultFormState } = utils\n\nconst RRulesField = (props) => {\n\n    const schema = {\n        ...model.schema,\n        ...props.schema\n    }\n\n    const uiSchema = {\n        ...model.uiSchema,\n        ...props.uiSchema\n    }\n\n    const getFormData = (formData) => {\n\n        if (props.schema.type === \"string\") {\n            return getFormDataFromRRule(formData)\n        } else {\n            return getDefaultFormState(schema, formData)\n        }\n        \n    }\n\n    const [formData, setFormData] = useState(getFormData(props.formData))\n\n    // onChange\n\n    const _onChange = (formData) => {\n        setFormData(formData)\n\n        if (props.schema.type === \"string\") {\n            props.onChange(getRRuleFromFormData(formData))\n        } else {\n            props.onChange(formData)\n        }\n\n    }\n\n    // formData\n\n    const { ObjectField } = props.registry.fields;\n\n    return (\n        <ObjectField \n            {...props}\n            formData={formData}\n            schema={schema}\n            uiSchema={uiSchema}\n            onChange={_onChange} />\n    )\n\n}\n\nRRulesField.defaultProps = {\n    formData: {\n        \n    }\n}\n\nexport default RRulesField"]},"metadata":{},"sourceType":"module"}