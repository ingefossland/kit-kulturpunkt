{"ast":null,"code":"import { API } from \"../settings\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { requestModel, receiveModel } from \"../modelsById\";\nconst editorSlide = createSlice({\n  name: 'editor',\n  initialState: {\n    isLoading: false,\n    isSaving: false\n  },\n  reducers: {\n    requestEdit(state, action) {\n      const {\n        uniqueId,\n        ...formData\n      } = action.payload;\n      return {\n        isLoading: true,\n        uniqueId: uniqueId\n      };\n    },\n\n    receiveEdit(state, action) {\n      const {\n        uniqueId,\n        ...formData\n      } = action.payload;\n\n      if (uniqueId) {\n        return {\n          isLoading: false,\n          uniqueId: uniqueId,\n          ...formData\n        };\n      } else {\n        return {\n          isLoading: false,\n          ...formData\n        };\n      }\n    },\n\n    requestSave(state, action) {\n      return { ...state,\n        isSaving: true\n      };\n    },\n\n    receiveSave(state, action) {\n      const {\n        uniqueId,\n        ...formData\n      } = action.payload;\n      return {\n        isSaving: false,\n        uniqueId: uniqueId,\n        ...formData\n      };\n    }\n\n  }\n});\n/** Edit model from uniqueId */\n\nexport const editModel = ({\n  modelName = \"documents\",\n  uniqueId,\n  ...formData\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n\n  if (uniqueId) {\n    dispatch(requestEdit({\n      uniqueId\n    }));\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      }\n    }).then(response => response.json(), error => console.log('An error occurred.', error)).then(formData => {\n      dispatch(receiveEdit(formData));\n      dispatch(receiveModel(formData));\n    });\n  } else if (formData) {\n    dispatch(receiveEdit(formData));\n  }\n};\n/** Save model from formData  */\n\nexport const saveModel = ({\n  modelName = \"documents\",\n  ...formData\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName;\n  dispatch(requestSave());\n  fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    },\n    body: JSON.stringify(formData)\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(formData => {\n    dispatch(receiveSave(formData));\n    dispatch(receiveModel(formData));\n  });\n};\nexport const {\n  requestEdit,\n  receiveEdit,\n  requestSave,\n  receiveSave\n} = editorSlide.actions;\nexport default editorSlide.reducer;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/redux/editor/editorSlice.js"],"names":["API","createSlice","requestModel","receiveModel","editorSlide","name","initialState","isLoading","isSaving","reducers","requestEdit","state","action","uniqueId","formData","payload","receiveEdit","requestSave","receiveSave","editModel","modelName","dispatch","url","fetch","method","headers","then","response","json","error","console","log","saveModel","body","JSON","stringify","actions","reducer"],"mappings":"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","sourcesContent":["import { API } from \"../settings\"\nimport { createSlice } from '@reduxjs/toolkit'\n\nimport { requestModel, receiveModel } from \"../modelsById\"\n\nconst editorSlide = createSlice({\n    name: 'editor',\n    initialState: {\n        isLoading: false,\n        isSaving: false\n    }, \n    reducers: {\n        requestEdit(state, action) {\n            const { uniqueId, ...formData } = action.payload\n\n            return {\n                isLoading: true,\n                uniqueId: uniqueId,\n            }\n\n        },\n        receiveEdit(state, action) {\n            const { uniqueId, ...formData } = action.payload\n\n            if (uniqueId) {\n                return {\n                    isLoading: false,\n                    uniqueId: uniqueId,\n                    ...formData\n                }\n            } else {\n                return {\n                    isLoading: false,\n                    ...formData\n                }\n            }\n\n        },\n        requestSave(state, action) {\n           return {\n                ...state,\n                isSaving: true,\n            }\n\n        },\n        receiveSave(state, action) {\n            const { uniqueId, ...formData } = action.payload\n\n            return {\n                isSaving: false,\n                uniqueId: uniqueId,\n                ...formData\n            }\n        }        \n    }\n})\n\n/** Edit model from uniqueId */\n\nexport const editModel = ({modelName = \"documents\", uniqueId, ...formData}) => dispatch => {\n\n    const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n\n    if (uniqueId) {\n        dispatch(requestEdit({uniqueId}))\n        \n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            }})\n            .then(\n                response => response.json(),\n                error => console.log('An error occurred.', error)\n            )\n            .then(formData => {\n                dispatch(receiveEdit(formData))\n                dispatch(receiveModel(formData))\n            })\n\n    } else if (formData) {\n        dispatch(receiveEdit(formData))\n    }\n\n}\n\n/** Save model from formData  */\n\nexport const saveModel = ({modelName = \"documents\", ...formData}) => dispatch => {\n    const url = API + '/admin/api/' + modelName;\n\n    dispatch(requestSave())\n\n    fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        body: JSON.stringify(formData)\n    })\n    .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n    )\n    .then(formData => {\n        dispatch(receiveSave(formData))\n        dispatch(receiveModel(formData))\n    })\n\n}\n\nexport const { requestEdit, receiveEdit, requestSave, receiveSave } = editorSlide.actions\nexport default editorSlide.reducer"]},"metadata":{},"sourceType":"module"}