{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/Dialog.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getApp } from '../redux/app';\nimport MediaDialog from \"./MediaDialog\";\nimport DocumentsDialog from \"./DocumentsDialog\";\nimport SearchDialog from \"./SearchDialog\";\nimport { utils } from '@kit-ui/schema';\nconst {\n  getUiOptions\n} = utils;\nconst templates = {\n  \"media\": MediaDialog,\n  \"documents\": DocumentsDialog,\n  \"search\": SearchDialog\n};\n\nconst EditorDialog = props => {\n  const dispatch = useDispatch();\n  console.log(\"DIALOG\", props);\n  const {\n    schema = {},\n    uiSchema = {},\n    onChange,\n    onClose\n  } = props;\n  const [formData, setFormData] = useState(props.formData);\n  useEffect(() => {\n    setFormData(props.formData);\n  }, [props.formData]);\n\n  const _onChange = formData => {\n    setFormData(formData);\n    onChange(formData);\n  };\n\n  const app = useSelector(state => state.app);\n  let itemSchema;\n\n  if (schema && schema.type === \"array\") {\n    itemSchema = schema.items;\n  } else if (schema) {\n    itemSchema = schema;\n  }\n\n  const getReferenceQuery = query => {\n    const documentSchema = itemSchema && itemSchema.properties && itemSchema.properties.reference;\n    const documentType = documentSchema && documentSchema.properties.documentType;\n    query.documentType = \"*\";\n\n    if (documentType && documentType.enum) {\n      query.documentType = documentType.enum;\n    }\n\n    if (documentType && documentType.default) {\n      query.documentType = documentType.default;\n    }\n\n    return { ...query,\n      models: \"documents\"\n    };\n  };\n\n  const getMediaQuery = query => {\n    const mediaSchema = itemSchema && itemSchema.properties && itemSchema.properties.media;\n    const mediaType = mediaSchema && mediaSchema.properties.mediaType; //        query.mediaType = \"*\"\n\n    if (mediaType && mediaType.enum) {\n      query.mediaType = mediaType.enum;\n    }\n\n    if (mediaType && mediaType.default) {\n      query.mediaType = mediaType.default;\n    }\n\n    return { ...query,\n      models: \"media\"\n    };\n  };\n\n  const getQuery = () => {\n    const uiOptions = uiSchema && getUiOptions(uiSchema);\n    const {\n      dialog\n    } = uiOptions;\n\n    if (dialog && dialog.query) {\n      return { ...dialog.query,\n        siteId: app.siteId,\n        collectionId: app.collectionId\n      };\n    }\n\n    if (itemSchema.properties && itemSchema.properties.referenceId) {\n      return getReferenceQuery({\n        siteId: app.siteId,\n        collectionId: app.collectionId\n      });\n    }\n\n    if (itemSchema.properties && itemSchema.properties.mediaId) {\n      return getMediaQuery({\n        siteId: app.siteId,\n        collectionId: app.collectionId\n      });\n    }\n\n    return {};\n  };\n\n  const query = getQuery();\n  const template = query.models;\n  const DialogTemplate = template && templates[template]; // || templates[\"search\"]\n\n  if (!DialogTemplate) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, \"Missing template for \", JSON.stringify(props), \".\", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"Close\"));\n  }\n\n  return /*#__PURE__*/React.createElement(DialogTemplate, {\n    query: query,\n    schema: schema,\n    formData: formData,\n    onChange: _onChange,\n    onClose: onClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default EditorDialog;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/Dialog.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getApp","MediaDialog","DocumentsDialog","SearchDialog","utils","getUiOptions","templates","EditorDialog","props","dispatch","console","log","schema","uiSchema","onChange","onClose","formData","setFormData","_onChange","app","state","itemSchema","type","items","getReferenceQuery","query","documentSchema","properties","reference","documentType","enum","default","models","getMediaQuery","mediaSchema","media","mediaType","getQuery","uiOptions","dialog","siteId","collectionId","referenceId","mediaId","template","DialogTemplate","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getApp } from '../redux/app';\n\nimport MediaDialog from \"./MediaDialog\"\nimport DocumentsDialog from \"./DocumentsDialog\"\nimport SearchDialog from \"./SearchDialog\"\n\nimport { utils } from '@kit-ui/schema';\nconst  { getUiOptions } = utils\n\nconst templates = {\n    \"media\": MediaDialog,\n    \"documents\": DocumentsDialog,\n    \"search\": SearchDialog\n}\n\nconst EditorDialog = (props) => {\n    const dispatch = useDispatch()\n\n    console.log(\"DIALOG\", props)\n\n    \n\n    const { schema = {}, uiSchema = {}, onChange, onClose } = props;\n\n    const [formData, setFormData] = useState(props.formData)\n\n    useEffect(() => {\n        setFormData(props.formData)\n    }, [props.formData])\n\n    const _onChange = (formData) => {\n        setFormData(formData)\n        onChange(formData);\n    }\n\n    const app = useSelector(state => state.app)\n\n    let itemSchema;\n\n    if (schema && schema.type === \"array\") {\n        itemSchema = schema.items\n    } else if (schema) {\n        itemSchema = schema\n    }\n\n    const getReferenceQuery = (query) => {\n        const documentSchema = itemSchema && itemSchema.properties && itemSchema.properties.reference\n        const documentType = documentSchema && documentSchema.properties.documentType\n    \n        query.documentType = \"*\"\n    \n        if (documentType && documentType.enum) {\n            query.documentType = documentType.enum\n        }\n    \n        if (documentType && documentType.default) {\n            query.documentType = documentType.default\n        }\n\n        return {\n            ...query,\n            models: \"documents\"\n        } \n        \n    }\n\n    const getMediaQuery = (query) => {\n        const mediaSchema = itemSchema && itemSchema.properties && itemSchema.properties.media\n        const mediaType = mediaSchema && mediaSchema.properties.mediaType\n    \n//        query.mediaType = \"*\"\n\n        if (mediaType && mediaType.enum) {\n            query.mediaType = mediaType.enum\n        }\n    \n        if (mediaType && mediaType.default) {\n            query.mediaType = mediaType.default\n        }\n\n        return {\n            ...query,\n            models: \"media\"\n        }\n        \n    }\n\n    const getQuery = () => {\n\n        const uiOptions = uiSchema && getUiOptions(uiSchema)\n\n        const { dialog } = uiOptions\n\n        if (dialog && dialog.query) {\n            return {\n                ...dialog.query,\n                siteId: app.siteId,\n                collectionId: app.collectionId\n            }\n        }\n\n\n        if (itemSchema.properties && itemSchema.properties.referenceId) {\n            return getReferenceQuery({\n                siteId: app.siteId,\n                collectionId: app.collectionId\n            })\n        }\n\n        if (itemSchema.properties && itemSchema.properties.mediaId) {\n            return getMediaQuery({\n                siteId: app.siteId,\n                collectionId: app.collectionId\n            })\n        }\n\n        return {\n        }\n\n    }\n\n    const query = getQuery()\n    const template = query.models;\n\n    const DialogTemplate = template && templates[template]; // || templates[\"search\"]\n\n    if (!DialogTemplate) {\n        return (\n            <div>\n                Missing template for {JSON.stringify(props)}.\n                <button onClick={onClose}>Close</button>\n            </div>\n        )\n    }\n\n    return (\n        <DialogTemplate query={query} schema={schema} formData={formData} onChange={_onChange} onClose={onClose} /> \n    )\n\n}\n\nexport default EditorDialog"]},"metadata":{},"sourceType":"module"}