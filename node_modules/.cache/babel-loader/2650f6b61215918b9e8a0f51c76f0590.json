{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/MeasureField/MeasureField.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { getDefaultFormState } from \"../../utils\";\nimport model from \"./MeasureField.model\";\nimport { getMeasureString, getMeasureArray } from \"./utils\";\n\nconst MasureField = ({\n  onChange,\n  ...props\n}) => {\n  const [text, setText] = useState(null);\n  const [list, setList] = useState(props.formData || []);\n  useEffect(() => {\n    if (props.schema.type === \"array\") {\n      setList(props.formData || []);\n      setText(getMeasureString(props.formData || []));\n    }\n\n    if (props.schema.type === \"string\") {\n      setText(props.formData);\n      setList(getMeasureArray(props.formData));\n    }\n  }, []);\n  useEffect(() => {\n    if (props.schema.type === \"array\") {\n      onChange && onChange(list);\n    } else if (props.schema.type === \"string\") {\n      onChange && onChange(text);\n    }\n  }, [list.length]);\n\n  const _onChange = formData => {\n    if (formData.text && formData.text !== text) {\n      setText(formData.text);\n      setList(getMeasureArray(formData.text));\n    }\n\n    if (formData.list && formData.list !== list) {\n      setList(formData.list);\n      setText(getMeasureString(formData.list));\n    }\n  };\n\n  const schema = { ...model.schema\n  };\n  const uiSchema = { ...model.uiSchema\n  };\n  const formData = {\n    text: text,\n    list: list\n  };\n  const {\n    ObjectField\n  } = props.registry.fields;\n  return /*#__PURE__*/React.createElement(ObjectField, Object.assign({}, props, {\n    schema: schema,\n    uiSchema: uiSchema,\n    formData: formData,\n    onChange: _onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }));\n};\n\nMasureField.defaultProps = {\n  formData: {}\n};\nexport default MasureField;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/MeasureField/MeasureField.js"],"names":["React","useState","useEffect","getDefaultFormState","model","getMeasureString","getMeasureArray","MasureField","onChange","props","text","setText","list","setList","formData","schema","type","length","_onChange","uiSchema","ObjectField","registry","fields","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { getDefaultFormState } from \"../../utils\"\nimport model from \"./MeasureField.model\"\n\nimport { getMeasureString, getMeasureArray } from \"./utils\"\n\nconst MasureField = ({onChange, ...props}) => {\n    const [text, setText] = useState(null)\n    const [list, setList] = useState(props.formData || [])\n\n    useEffect(() => {\n\n        if (props.schema.type === \"array\") {\n            setList(props.formData || [])\n            setText(getMeasureString(props.formData || []))\n        }\n\n        if (props.schema.type === \"string\") {\n            setText(props.formData)\n            setList(getMeasureArray(props.formData))\n        }\n\n    }, [])\n\n    useEffect(() => {\n        if (props.schema.type === \"array\") {\n            onChange && onChange(list)\n        } else if (props.schema.type === \"string\") {\n            onChange && onChange(text)\n        }\n\n    }, [list.length])\n\n    const _onChange = (formData) => {\n\n        if (formData.text && formData.text !== text) {\n            setText(formData.text)\n            setList(getMeasureArray(formData.text))\n        }\n\n        if (formData.list && formData.list !== list) {\n            setList(formData.list)\n            setText(getMeasureString(formData.list))\n        }\n\n    }\n\n    const schema = {\n        ...model.schema\n    }\n\n    const uiSchema = {\n        ...model.uiSchema\n    }\n\n    const formData = {\n        text: text,\n        list: list\n    }\n\n    const { ObjectField } = props.registry.fields;\n\n    return (\n        <ObjectField {...props} schema={schema} uiSchema={uiSchema} formData={formData} onChange={_onChange} />\n    )\n\n}\n\nMasureField.defaultProps = {\n    formData: {}\n}\n\nexport default MasureField"]},"metadata":{},"sourceType":"module"}