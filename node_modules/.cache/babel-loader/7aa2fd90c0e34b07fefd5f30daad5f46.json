{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/EventField.js\";\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { getRRuleFromFormData, getFormDataFromRRule, getRRuleText } from \"./utils\";\nimport model from \"./EventField.model\";\nimport { utils } from \"@rjsf/core\";\nconst {\n  getUiOptions,\n  getDefaultFormState\n} = utils;\nconst byWeekday = [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"];\n\nconst EventField = props => {\n  const {\n    formData\n  } = props;\n  const schema = { ...model.schema,\n    ...props.schema\n  };\n  const uiSchema = { ...model.uiSchema,\n    ...props.uiSchema\n  }; // set initial dtStart + rrule + rrules\n\n  const [rrule, setRRule] = useState(formData.rrule);\n  const [rruleText, setRRuleText] = useState(rrule);\n  const [rrules, setRRules] = useState(formData.rrules); // onChange\n\n  const _onChange = formData => {\n    let {\n      allDay,\n      date,\n      startTime = \"00:00\",\n      endTime = \"00:00\",\n      dtStart,\n      dtEnd\n    } = formData;\n\n    if (date) {\n      dtStart = date + \" \" + startTime;\n      dtEnd = date + \" \" + endTime;\n    }\n\n    const formatDate = date => {\n      return date && allDay && moment(date).format('YYYY-MM-DD') || date && moment(date).format('YYYY-MM-DDTHH:mm:ss') || undefined;\n    };\n\n    if (!dtEnd && dtStart || moment(dtEnd).isBefore(moment(dtStart))) {\n      dtEnd = dtStart;\n    }\n\n    const time = allDay && \"Hele dagen\" || startTime !== endTime && startTime + \"â€“\" + endTime || startTime;\n    formData = { ...formData,\n      time: time,\n      dtStart: formatDate(dtStart),\n      dtEnd: formatDate(dtEnd)\n    };\n    props.onChange(formData);\n  }; // rrules from rrule\n\n\n  useEffect(() => {\n    let rrules;\n\n    if (formData.rrule && formData.rrule !== \"custom\") {\n      rrules = getFormDataFromRRule(formData.rrule);\n    } else if (!formData.rrule) {\n      rrules = getDefaultFormState({\n        schema: schema.properties.rrules\n      });\n    }\n\n    rrules && setRRules(rrules);\n    setRRule(formData.rrule);\n  }, [formData.rrule]); // rrule from rrules\n\n  useEffect(() => {\n    let rrule;\n\n    if (formData.rrule === \"custom\") {\n      rrule = getRRuleFromFormData(formData.rrules);\n    }\n\n    rrule && setRRule(rrule);\n    rrule && setRRuleText(getRRuleText(rrule));\n    setRRules(formData.rrules);\n  }, [formData.rrules]); // get dtStart rules\n\n  const [dtEnum, setDtEnum] = useState([]);\n  const [dtEnumNames, setDtEnumNames] = useState([]);\n  useEffect(() => {\n    const isoWeekday = moment(formData.dtStart).isoWeekday();\n    const isoMonth = moment(formData.dtStart).month() + 1;\n    const dayOfMonth = moment(formData.dtStart).format('D');\n    const weekly = \"FREQ=WEEKLY;BYDAY=\" + byWeekday[isoWeekday - 1];\n    const monthly = \"FREQ=MONTHLY;BYMONTHDAY=\" + dayOfMonth;\n    const yearly = \"FREQ=YEARLY;BYMONTH=\" + isoMonth + \";BYMONTHDAY=\" + dayOfMonth;\n    setDtEnum([weekly, monthly, yearly]);\n  }, [formData.dtStart]); // get rrules enum\n\n  const getRRuleSchema = () => {\n    const rruleSchema = schema.properties.rrule;\n    const defaultRRuleEnum = rruleSchema && rruleSchema.enum;\n    const defaultRRuleEnumNames = rruleSchema && rruleSchema.enumNames;\n    let rruleEnum = [],\n        customEnumName,\n        falseEnumName;\n    defaultRRuleEnum.map((rrule, index) => {\n      if (rrule === \"custom\") {\n        customEnumName = defaultRRuleEnumNames[index];\n      } else if (rrule) {\n        rruleEnum.push(rrule);\n      } else {\n        rruleEnum.push(rrule);\n        falseEnumName = defaultRRuleEnumNames[index] || rrule;\n      }\n    });\n    rruleEnum = rruleEnum.concat(dtEnum);\n\n    if (defaultRRuleEnum.includes(\"custom\")) {\n      rruleEnum.push(\"custom\");\n    }\n\n    if (rrule && rrule !== \"custom\" && !rruleEnum.includes(rrule)) {\n      customEnumName = getRRuleText(rrule);\n    }\n\n    const rruleEnumNames = rruleEnum.map((rrule, index) => {\n      if (rrule === \"custom\") {\n        return customEnumName;\n      } else if (rrule) {\n        return getRRuleText(rrule);\n      } else {\n        return falseEnumName;\n      }\n    });\n    return { ...rruleSchema,\n      enum: rruleEnum,\n      enumNames: rruleEnumNames\n    };\n  }; // schema, formData, etc\n\n\n  const newSchema = { ...schema,\n    properties: { ...schema.properties,\n      rrule: getRRuleSchema()\n    }\n  };\n  const newFormData = { ...formData,\n    //        rrule: rrule,\n    rrules: rrules\n  }; // formData\n\n  const {\n    ObjectField\n  } = props.registry.fields;\n  return /*#__PURE__*/React.createElement(ObjectField, Object.assign({}, props, {\n    schema: newSchema,\n    uiSchema: uiSchema,\n    formData: newFormData,\n    onChange: _onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }));\n};\n\nEventField.defaultProps = {\n  formData: {}\n};\nexport default EventField;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/EventField.js"],"names":["React","useState","useEffect","moment","getRRuleFromFormData","getFormDataFromRRule","getRRuleText","model","utils","getUiOptions","getDefaultFormState","byWeekday","EventField","props","formData","schema","uiSchema","rrule","setRRule","rruleText","setRRuleText","rrules","setRRules","_onChange","allDay","date","startTime","endTime","dtStart","dtEnd","formatDate","format","undefined","isBefore","time","onChange","properties","dtEnum","setDtEnum","dtEnumNames","setDtEnumNames","isoWeekday","isoMonth","month","dayOfMonth","weekly","monthly","yearly","getRRuleSchema","rruleSchema","defaultRRuleEnum","enum","defaultRRuleEnumNames","enumNames","rruleEnum","customEnumName","falseEnumName","map","index","push","concat","includes","rruleEnumNames","newSchema","newFormData","ObjectField","registry","fields","defaultProps"],"mappings":"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","sourcesContent":["import React, {Â useState, useEffect } from \"react\"\nimport moment from \"moment\"\nimport { getRRuleFromFormData, getFormDataFromRRule, getRRuleText } from \"./utils\"\n\nimport model from \"./EventField.model\"\n\nimport { utils } from \"@rjsf/core\";\nconst { getUiOptions, getDefaultFormState } = utils\n\nconst byWeekday = [\"MO\",\"TU\",\"WE\",\"TH\",\"FR\",\"SA\",\"SU\"]\n\nconst EventField = (props) => {\n\n    const { formData } = props\n\n    const schema = {\n        ...model.schema,\n        ...props.schema\n    }\n\n    const uiSchema = {\n        ...model.uiSchema,\n        ...props.uiSchema\n    }\n\n    // set initial dtStart + rrule + rrules\n\n    const [rrule, setRRule] = useState(formData.rrule)\n    const [rruleText, setRRuleText] = useState(rrule)\n    const [rrules, setRRules] = useState(formData.rrules)\n\n    // onChange\n\n    const _onChange = (formData) => {\n        let { allDay, date, startTime = \"00:00\", endTime = \"00:00\", dtStart, dtEnd } = formData\n\n        if (date) {\n            dtStart = date + \" \" + startTime\n            dtEnd = date + \" \" + endTime\n        }\n\n        const formatDate = (date) => {\n            return date && allDay && moment(date).format('YYYY-MM-DD') ||Â date && moment(date).format('YYYY-MM-DDTHH:mm:ss') ||Â undefined\n        }\n\n        if (!dtEnd && dtStart ||Â moment(dtEnd).isBefore(moment(dtStart))) {\n            dtEnd = dtStart\n        }\n\n        const time = allDay && \"Hele dagen\" ||Â startTime !== endTime && startTime + \"â€“\" + endTime ||Â startTime\n\n        formData = {\n            ...formData,\n            time: time,\n            dtStart: formatDate(dtStart),\n            dtEnd: formatDate(dtEnd),\n        }\n\n        props.onChange(formData)\n        \n    }\n\n    // rrules from rrule\n\n    useEffect(() => {\n\n        let rrules;\n\n        if (formData.rrule && formData.rrule !== \"custom\") {\n            rrules = getFormDataFromRRule(formData.rrule)\n        } else if (!formData.rrule) {\n            rrules = getDefaultFormState({schema: schema.properties.rrules})\n        }\n\n        rrules && setRRules(rrules)\n        setRRule(formData.rrule)\n\n    }, [formData.rrule])\n    \n    // rrule from rrules\n\n    useEffect(() => {\n\n        let rrule;\n\n        if (formData.rrule === \"custom\") {\n            rrule = getRRuleFromFormData(formData.rrules)\n        }\n\n        rrule && setRRule(rrule)\n        rrule && setRRuleText(getRRuleText(rrule))\n\n        setRRules(formData.rrules)\n\n    }, [formData.rrules])    \n\n\n    // get dtStart rules\n\n    const [dtEnum, setDtEnum] = useState([])\n    const [dtEnumNames, setDtEnumNames] = useState([])\n    \n    useEffect(() => {\n        const isoWeekday = moment(formData.dtStart).isoWeekday()\n        const isoMonth = moment(formData.dtStart).month() + 1\n        const dayOfMonth = moment(formData.dtStart).format('D')\n\n        const weekly = \"FREQ=WEEKLY;BYDAY=\"+byWeekday[isoWeekday-1]\n        const monthly = \"FREQ=MONTHLY;BYMONTHDAY=\"+dayOfMonth\n        const yearly = \"FREQ=YEARLY;BYMONTH=\"+isoMonth+\";BYMONTHDAY=\"+dayOfMonth\n\n        setDtEnum([\n            weekly,\n            monthly,\n            yearly\n        ])\n        \n    }, [formData.dtStart])\n\n    // get rrules enum\n\n    const getRRuleSchema = () => {\n\n        const rruleSchema = schema.properties.rrule\n\n        const defaultRRuleEnum = rruleSchema && rruleSchema.enum\n        const defaultRRuleEnumNames = rruleSchema && rruleSchema.enumNames\n\n\n        let rruleEnum = [], customEnumName, falseEnumName\n\n        defaultRRuleEnum.map((rrule, index) => {\n\n            if (rrule === \"custom\") {\n                customEnumName = defaultRRuleEnumNames[index]\n            } else if (rrule) {\n                rruleEnum.push(rrule)\n            } else {\n                rruleEnum.push(rrule)\n                falseEnumName = defaultRRuleEnumNames[index] ||Â rrule\n            }\n        })\n\n        rruleEnum = rruleEnum.concat(dtEnum)\n\n        if (defaultRRuleEnum.includes(\"custom\")) {\n            rruleEnum.push(\"custom\")\n        }\n\n        if (rrule && rrule !== \"custom\" && !rruleEnum.includes(rrule)) {\n            customEnumName = getRRuleText(rrule)\n        }\n        \n        const rruleEnumNames = rruleEnum.map((rrule, index) => {\n\n            if (rrule === \"custom\") {\n                return customEnumName\n            } else if (rrule) {\n                return getRRuleText(rrule)\n            } else {\n                return falseEnumName\n            }\n\n\n        })\n\n        return {\n            ...rruleSchema,\n            enum: rruleEnum,\n            enumNames: rruleEnumNames\n        }\n\n    }\n\n    // schema, formData, etc\n\n    const newSchema = {\n        ...schema,\n        properties: {\n            ...schema.properties,\n            rrule: getRRuleSchema()\n        }\n    }\n\n    const newFormData = {\n        ...formData,\n//        rrule: rrule,\n        rrules: rrules\n    }\n\n    // formData\n\n    const { ObjectField } = props.registry.fields;\n\n    return (\n        <ObjectField\n            {...props}\n            schema={newSchema}\n            uiSchema={uiSchema}\n            formData={newFormData}\n            onChange={_onChange}\n            />\n    )\n\n}\n\nEventField.defaultProps = {\n    formData: {\n        \n    }\n}\n\nexport default EventField"]},"metadata":{},"sourceType":"module"}