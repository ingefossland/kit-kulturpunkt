{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FrameParser = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../common/Util\");\n\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\n\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'iso-8859-1';\n\nclass FrameParser {\n  /**\n   * Create id3v2 frame parser\n   * @param major - Major version, e.g. (4) for  id3v2.4\n   * @param warningCollector - Used to collect decode issue\n   */\n  constructor(major, warningCollector) {\n    this.major = major;\n    this.warningCollector = warningCollector;\n  }\n\n  readData(b, type, includeCovers) {\n    if (b.length === 0) {\n      this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n      return;\n    }\n\n    const {\n      encoding,\n      bom\n    } = ID3v2Token_1.TextEncodingToken.get(b, 0);\n    const length = b.length;\n    let offset = 0;\n    let output = []; // ToDo\n\n    const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n    let fzero;\n    const out = {};\n    debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n\n    switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n      case 'T*': // 4.2.1. Text information frames - details\n\n      case 'IPLS': // v2.3: Involved people list\n\n      case 'MVIN':\n      case 'MVNM':\n      case 'PCS':\n      case 'PCST':\n        const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\n\n        switch (type) {\n          case 'TMCL': // Musician credits list\n\n          case 'TIPL': // Involved people list\n\n          case 'IPLS':\n            // Involved people list\n            output = this.splitValue(type, text);\n            output = FrameParser.functionList(output);\n            break;\n\n          case 'TRK':\n          case 'TRCK':\n          case 'TPOS':\n            output = text;\n            break;\n\n          case 'TCOM':\n          case 'TCON':\n          case 'TEXT':\n          case 'TOLY':\n          case 'TOPE':\n          case 'TPE1':\n          case 'TSRC':\n            // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n            output = this.splitValue(type, text);\n            break;\n\n          case 'PCS':\n          case 'PCST':\n            // TODO: Why `default` not results `1` but `''`?\n            output = this.major >= 4 ? this.splitValue(type, text) : [text];\n            output = Array.isArray(output) && output[0] === '' ? 1 : 0;\n            break;\n\n          default:\n            output = this.major >= 4 ? this.splitValue(type, text) : [text];\n        }\n\n        break;\n\n      case 'TXXX':\n        output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\n        output = {\n          description: output.id,\n          text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n        };\n        break;\n\n      case 'PIC':\n      case 'APIC':\n        if (includeCovers) {\n          const pic = {};\n          offset += 1;\n\n          switch (this.major) {\n            case 2:\n              pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\n              offset += 3;\n              break;\n\n            case 3:\n            case 4:\n              fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n              pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n              offset = fzero + 1;\n              break;\n\n            default:\n              throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n          }\n\n          pic.format = FrameParser.fixPictureMimeType(pic.format);\n          pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\n          offset += 1;\n          fzero = Util_1.default.findZero(b, offset, length, encoding);\n          pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n          offset = fzero + nullTerminatorLength;\n          pic.data = Buffer.from(b.slice(offset, length));\n          output = pic;\n        }\n\n        break;\n\n      case 'CNT':\n      case 'PCNT':\n        output = Token.UINT32_BE.get(b, 0);\n        break;\n\n      case 'SYLT':\n        // skip text encoding (1 byte),\n        //      language (3 bytes),\n        //      time stamp format (1 byte),\n        //      content tagTypes (1 byte),\n        //      content descriptor (1 byte)\n        offset += 7;\n        output = [];\n\n        while (offset < length) {\n          const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\n          offset += 5; // push offset forward one +  4 byte timestamp\n\n          output.push(Util_1.default.decodeString(txt, encoding));\n        }\n\n        break;\n\n      case 'ULT':\n      case 'USLT':\n      case 'COM':\n      case 'COMM':\n        offset += 1;\n        out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\n        offset += 3;\n        fzero = Util_1.default.findZero(b, offset, length, encoding);\n        out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n        offset = fzero + nullTerminatorLength;\n        out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\n        output = [out];\n        break;\n\n      case 'UFID':\n        output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n        output = {\n          owner_identifier: output.id,\n          identifier: output.data\n        };\n        break;\n\n      case 'PRIV':\n        // private frame\n        output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n        output = {\n          owner_identifier: output.id,\n          data: output.data\n        };\n        break;\n\n      case 'POPM':\n        // Popularimeter\n        fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n        const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n        offset = fzero + 1;\n        const dataLen = length - offset;\n        output = {\n          email,\n          rating: b.readUInt8(offset),\n          counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\n        };\n        break;\n\n      case 'GEOB':\n        {\n          // General encapsulated object\n          fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n          const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\n          offset = fzero + 1;\n          fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n          const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          offset = fzero + 1;\n          fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n          const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n          output = {\n            type: mimeType,\n            filename,\n            description,\n            data: b.slice(offset + 1, length)\n          };\n          break;\n        }\n      // W-Frames:\n\n      case 'WCOM':\n      case 'WCOP':\n      case 'WOAF':\n      case 'WOAR':\n      case 'WOAS':\n      case 'WORS':\n      case 'WPAY':\n      case 'WPUB':\n        // Decode URL\n        output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n        break;\n\n      case 'WXXX':\n        {\n          // Decode URL\n          fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n          const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\n          offset = fzero + (encoding === 'utf16' ? 2 : 1);\n          output = {\n            description,\n            url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc)\n          };\n          break;\n        }\n\n      case 'WFD':\n      case 'WFED':\n        output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\n        break;\n\n      case 'MCDI':\n        {\n          // Music CD identifier\n          output = b.slice(0, length);\n          break;\n        }\n\n      default:\n        debug('Warning: unsupported id3v2-tag-type: ' + type);\n        break;\n    }\n\n    return output;\n  }\n\n  static fixPictureMimeType(pictureType) {\n    pictureType = pictureType.toLocaleLowerCase();\n\n    switch (pictureType) {\n      case 'jpg':\n        return 'image/jpeg';\n\n      case 'png':\n        return 'image/png';\n    }\n\n    return pictureType;\n  }\n  /**\n   * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n   * @param entries\n   */\n\n\n  static functionList(entries) {\n    const res = {};\n\n    for (let i = 0; i + 1 < entries.length; i += 2) {\n      const names = entries[i + 1].split(',');\n      res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n    }\n\n    return res;\n  }\n  /**\n   * id3v2.4 defines that multiple T* values are separated by 0x00\n   * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n   * @param tag - Tag name\n   * @param text - Concatenated tag value\n   * @returns Split tag value\n   */\n\n\n  splitValue(tag, text) {\n    let values;\n\n    if (this.major < 4) {\n      values = text.split(/\\x00/g);\n\n      if (values.length > 1) {\n        this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n      } else {\n        values = text.split(/\\//g);\n      }\n    } else {\n      values = text.split(/\\x00/g);\n    }\n\n    return FrameParser.trimArray(values);\n  }\n\n  static trimArray(values) {\n    return values.map(value => value.replace(/\\x00+$/, '').trim());\n  }\n\n  static readIdentifierAndData(b, offset, length, encoding) {\n    const fzero = Util_1.default.findZero(b, offset, length, encoding);\n    const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n    offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n    return {\n      id,\n      data: b.slice(offset, length)\n    };\n  }\n\n  static getNullTerminatorLength(enc) {\n    return enc === 'utf16' ? 2 : 1;\n  }\n\n}\n\nexports.FrameParser = FrameParser;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/id3v2/FrameParser.js"],"names":["Object","defineProperty","exports","value","FrameParser","initDebug","require","Token","Util_1","ID3v2Token_1","debug","defaultEnc","constructor","major","warningCollector","readData","b","type","includeCovers","length","addWarning","encoding","bom","TextEncodingToken","get","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","out","text","default","decodeString","slice","replace","splitValue","functionList","Array","isArray","readIdentifierAndData","description","id","data","pic","format","findZero","Error","fixPictureMimeType","AttachedPictureType","Buffer","from","UINT32_BE","txt","push","language","owner_identifier","identifier","email","dataLen","rating","readUInt8","counter","readUInt32BE","undefined","mimeType","filename","url","pictureType","toLocaleLowerCase","entries","res","i","names","split","hasOwnProperty","concat","tag","values","trimArray","map","trim","enc"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FrameParser = void 0;\nconst initDebug = require(\"debug\");\nconst Token = require(\"token-types\");\nconst Util_1 = require(\"../common/Util\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'iso-8859-1';\nclass FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(b, type, includeCovers) {\n        if (b.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = ID3v2Token_1.TextEncodingToken.get(b, 0);\n        const length = b.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        const out = {};\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST':\n                const text = Util_1.default.decodeString(b.slice(1), encoding).replace(/\\x00+$/, '');\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = this.splitValue(type, text);\n                        output = FrameParser.functionList(output);\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TCON':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            case 'TXXX':\n                output = FrameParser.readIdentifierAndData(b, offset + 1, length, encoding);\n                output = {\n                    description: output.id,\n                    text: this.splitValue(type, Util_1.default.decodeString(output.data, encoding).replace(/\\x00+$/, ''))\n                };\n                break;\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = Util_1.default.decodeString(b.slice(offset, offset + 3), 'iso-8859-1');\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n                            pic.format = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw new Error('Warning: unexpected major versionIndex: ' + this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = ID3v2Token_1.AttachedPictureType[b[offset]];\n                    offset += 1;\n                    fzero = Util_1.default.findZero(b, offset, length, encoding);\n                    pic.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = Buffer.from(b.slice(offset, length));\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = Token.UINT32_BE.get(b, 0);\n                break;\n            case 'SYLT':\n                // skip text encoding (1 byte),\n                //      language (3 bytes),\n                //      time stamp format (1 byte),\n                //      content tagTypes (1 byte),\n                //      content descriptor (1 byte)\n                offset += 7;\n                output = [];\n                while (offset < length) {\n                    const txt = b.slice(offset, offset = Util_1.default.findZero(b, offset, length, encoding));\n                    offset += 5; // push offset forward one +  4 byte timestamp\n                    output.push(Util_1.default.decodeString(txt, encoding));\n                }\n                break;\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM':\n                offset += 1;\n                out.language = Util_1.default.decodeString(b.slice(offset, offset + 3), defaultEnc);\n                offset += 3;\n                fzero = Util_1.default.findZero(b, offset, length, encoding);\n                out.description = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n                offset = fzero + nullTerminatorLength;\n                out.text = Util_1.default.decodeString(b.slice(offset, length), encoding).replace(/\\x00+$/, '');\n                output = [out];\n                break;\n            case 'UFID':\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, identifier: output.data };\n                break;\n            case 'PRIV': // private frame\n                output = FrameParser.readIdentifierAndData(b, offset, length, defaultEnc);\n                output = { owner_identifier: output.id, data: output.data };\n                break;\n            case 'POPM': // Popularimeter\n                fzero = Util_1.default.findZero(b, offset, length, defaultEnc);\n                const email = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const dataLen = length - offset;\n                output = {\n                    email,\n                    rating: b.readUInt8(offset),\n                    counter: dataLen >= 5 ? b.readUInt32BE(offset + 1) : undefined\n                };\n                break;\n            case 'GEOB': { // General encapsulated object\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n                const mimeType = Util_1.default.decodeString(b.slice(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n                const filename = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = Util_1.default.findZero(b, offset, length - offset, encoding);\n                const description = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                output = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: b.slice(offset + 1, length)\n                };\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                output = Util_1.default.decodeString(b.slice(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = Util_1.default.findZero(b, offset + 1, length, encoding);\n                const description = Util_1.default.decodeString(b.slice(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf16' ? 2 : 1);\n                output = { description, url: Util_1.default.decodeString(b.slice(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = Util_1.default.decodeString(b.slice(offset + 1, Util_1.default.findZero(b, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = b.slice(0, length);\n                break;\n            }\n            default:\n                debug('Warning: unsupported id3v2-tag-type: ' + type);\n                break;\n        }\n        return output;\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res.hasOwnProperty(entries[i]) ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(b, offset, length, encoding) {\n        const fzero = Util_1.default.findZero(b, offset, length, encoding);\n        const id = Util_1.default.decodeString(b.slice(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: b.slice(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf16' ? 2 : 1;\n    }\n}\nexports.FrameParser = FrameParser;\n//# sourceMappingURL=FrameParser.js.map"]},"metadata":{},"sourceType":"script"}