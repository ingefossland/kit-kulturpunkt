{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { getUiOptions, retrieveSchema, getDefaultFormState, toIdSchema } from './';\nimport _ from \"lodash\";\nexport function getUiFieldset(props) {\n  var idSchema = props.idSchema,\n      idPrefix = props.idPrefix,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      formData = props.formData,\n      formContext = props.formContext;\n  var rootSchema = props.registry.rootSchema;\n  var currentId = formContext && formContext.currentId;\n  var uiOptions = getUiOptions(uiSchema);\n  var fieldset = uiOptions.fieldset;\n\n  if (!fieldset) {\n    return false;\n  }\n\n  var uiFieldset = [];\n\n  var getFieldByName = function getFieldByName(name) {\n    var fieldSchema = schema && schema.properties && schema.properties[name] && retrieveSchema(schema.properties[name], props.registry.definitions, formData && formData[name]);\n    var fieldFormData = fieldSchema && formData && formData[name] && getDefaultFormState(fieldSchema, formData && formData[name]);\n    var fieldUiSchema = uiSchema && uiSchema[name] || {};\n    var fieldUiOptions = fieldUiSchema && getUiOptions(fieldUiSchema);\n    var fieldIdPrefix = idSchema.$id + \"_\" + name;\n    var fieldSelected = currentId && currentId.startsWith(fieldIdPrefix);\n\n    if (fieldSchema) {\n      var fieldIdSchema = toIdSchema(fieldSchema, fieldIdPrefix, rootSchema, fieldFormData, idPrefix);\n      return _extends({}, props, {\n        idPrefix: fieldIdPrefix,\n        idSchema: fieldIdSchema,\n        name: name,\n        schema: fieldSchema,\n        uiSchema: _extends({}, fieldUiSchema, {\n          \"ui:selected\": fieldSelected\n        }),\n        uiOptions: fieldUiOptions,\n        formData: fieldFormData,\n        onChange: function onChange(value) {\n          var _extends2;\n\n          return props.onChange(_extends({}, formData, (_extends2 = {}, _extends2[name] = value, _extends2)));\n        }\n      });\n    }\n\n    if (fieldUiSchema && fieldUiOptions.fieldset) {\n      var _fieldIdSchema = toIdSchema(schema, fieldIdPrefix, rootSchema, formData, idPrefix);\n\n      return _extends({}, props, {\n        idPrefix: fieldIdPrefix,\n        idSchema: _fieldIdSchema,\n        name: name,\n        schema: schema,\n        uiSchema: _extends({}, fieldUiSchema, {\n          \"ui:selected\": fieldSelected\n        }),\n        uiOptions: fieldUiOptions,\n        formData: formData\n      });\n    }\n  };\n\n  var selected;\n  fieldset.map(function (name, index) {\n    var field = getFieldByName(name);\n\n    if (field) {\n      uiFieldset.push(field);\n\n      if (field.uiSchema[\"ui:selected\"]) {\n        selected = true;\n      }\n    }\n  });\n\n  if (uiFieldset[0] && !selected) {\n    uiFieldset[0].uiSchema = _extends({}, uiFieldset[0].uiSchema, {\n      \"ui:selected\": true\n    });\n  }\n\n  return uiFieldset;\n}\nexport default getUiFieldset;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@kit-ui/schema/es/utils/getUiFieldset.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","getUiOptions","retrieveSchema","getDefaultFormState","toIdSchema","_","getUiFieldset","props","idSchema","idPrefix","schema","uiSchema","formData","formContext","rootSchema","registry","currentId","uiOptions","fieldset","uiFieldset","getFieldByName","name","fieldSchema","properties","definitions","fieldFormData","fieldUiSchema","fieldUiOptions","fieldIdPrefix","$id","fieldSelected","startsWith","fieldIdSchema","onChange","value","_extends2","_fieldIdSchema","selected","map","index","field","push"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { getUiOptions, retrieveSchema, getDefaultFormState, toIdSchema } from './';\nimport _ from \"lodash\";\nexport function getUiFieldset(props) {\n  var idSchema = props.idSchema,\n      idPrefix = props.idPrefix,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      formData = props.formData,\n      formContext = props.formContext;\n  var rootSchema = props.registry.rootSchema;\n  var currentId = formContext && formContext.currentId;\n  var uiOptions = getUiOptions(uiSchema);\n  var fieldset = uiOptions.fieldset;\n\n  if (!fieldset) {\n    return false;\n  }\n\n  var uiFieldset = [];\n\n  var getFieldByName = function getFieldByName(name) {\n    var fieldSchema = schema && schema.properties && schema.properties[name] && retrieveSchema(schema.properties[name], props.registry.definitions, formData && formData[name]);\n    var fieldFormData = fieldSchema && formData && formData[name] && getDefaultFormState(fieldSchema, formData && formData[name]);\n    var fieldUiSchema = uiSchema && uiSchema[name] || {};\n    var fieldUiOptions = fieldUiSchema && getUiOptions(fieldUiSchema);\n    var fieldIdPrefix = idSchema.$id + \"_\" + name;\n    var fieldSelected = currentId && currentId.startsWith(fieldIdPrefix);\n\n    if (fieldSchema) {\n      var fieldIdSchema = toIdSchema(fieldSchema, fieldIdPrefix, rootSchema, fieldFormData, idPrefix);\n      return _extends({}, props, {\n        idPrefix: fieldIdPrefix,\n        idSchema: fieldIdSchema,\n        name: name,\n        schema: fieldSchema,\n        uiSchema: _extends({}, fieldUiSchema, {\n          \"ui:selected\": fieldSelected\n        }),\n        uiOptions: fieldUiOptions,\n        formData: fieldFormData,\n        onChange: function onChange(value) {\n          var _extends2;\n\n          return props.onChange(_extends({}, formData, (_extends2 = {}, _extends2[name] = value, _extends2)));\n        }\n      });\n    }\n\n    if (fieldUiSchema && fieldUiOptions.fieldset) {\n      var _fieldIdSchema = toIdSchema(schema, fieldIdPrefix, rootSchema, formData, idPrefix);\n\n      return _extends({}, props, {\n        idPrefix: fieldIdPrefix,\n        idSchema: _fieldIdSchema,\n        name: name,\n        schema: schema,\n        uiSchema: _extends({}, fieldUiSchema, {\n          \"ui:selected\": fieldSelected\n        }),\n        uiOptions: fieldUiOptions,\n        formData: formData\n      });\n    }\n  };\n\n  var selected;\n  fieldset.map(function (name, index) {\n    var field = getFieldByName(name);\n\n    if (field) {\n      uiFieldset.push(field);\n\n      if (field.uiSchema[\"ui:selected\"]) {\n        selected = true;\n      }\n    }\n  });\n\n  if (uiFieldset[0] && !selected) {\n    uiFieldset[0].uiSchema = _extends({}, uiFieldset[0].uiSchema, {\n      \"ui:selected\": true\n    });\n  }\n\n  return uiFieldset;\n}\nexport default getUiFieldset;"]},"metadata":{},"sourceType":"module"}