{"ast":null,"code":"import { API } from \"../settings\";\nimport { createSlice } from '@reduxjs/toolkit';\nconst modelsByIdSlice = createSlice({\n  name: 'modelsById',\n  initialState: {},\n  reducers: {\n    requestModel(state, action) {\n      const {\n        uniqueId\n      } = action.payload;\n      return { ...state,\n        [uniqueId]: {\n          isLoading: true\n        }\n      };\n    },\n\n    receiveModel(state, action) {\n      const {\n        uniqueId\n      } = action.payload;\n      return { ...state,\n        [uniqueId]: {\n          isLoading: false,\n          ...action.payload\n        }\n      };\n    },\n\n    receiveStatus(state, action) {\n      const {\n        uniqueId,\n        status\n      } = action.payload;\n      return { ...state,\n        [uniqueId]: { ...state[uniqueId],\n          status: status\n        }\n      };\n    },\n\n    toggleSelected(state, action) {\n      const {\n        uniqueId\n      } = action.payload;\n      const selected = state[uniqueId] && state[uniqueId].selected;\n      return { ...state,\n        [uniqueId]: { ...state[uniqueId],\n          selected: !selected\n        }\n      };\n    },\n\n    requestSave(state, action) {\n      const {\n        uniqueId\n      } = action.payload;\n      return { ...state,\n        [uniqueId]: { ...state[uniqueId],\n          isSaving: true\n        }\n      };\n    },\n\n    receiveSave(state, action) {\n      const {\n        uniqueId\n      } = action.payload;\n      return { ...state,\n        [uniqueId]: {\n          isSaving: false,\n          ...action.payload\n        }\n      };\n    }\n\n  }\n});\n/** Get model from uniqueId */\n\nexport const getModel = ({\n  modelName = \"documents\",\n  uniqueId\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n  dispatch(requestModel({\n    uniqueId\n  }));\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(formData => {\n    dispatch(receiveModel(formData));\n  });\n};\n/** Load model from uniqueId */\n\nexport const loadModel = ({\n  modelName = \"documents\",\n  uniqueId\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n  dispatch(requestModel({\n    uniqueId\n  }));\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(formData => {\n    dispatch(receiveModel(formData));\n  });\n};\n/** Save model from formData  */\n\nexport const saveModel = ({\n  modelName = \"documents\",\n  ...formData\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName;\n  formData && formData.uniqueId && dispatch(requestSave({\n    uniqueId: formData.uniqueId\n  }));\n  fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    },\n    body: JSON.stringify(formData)\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(formData => {\n    dispatch(receiveSave(formData));\n  });\n};\n/** Delete */\n\nexport const deleteModel = ({\n  modelName,\n  uniqueId\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n  fetch(url, {\n    method: \"DELETE\"\n  }).then(error => console.log('An error occurred.', error)).then(data => dispatch(loadModel({\n    modelName,\n    uniqueId\n  })));\n};\n/** Restore */\n\nexport const restoreModel = ({\n  modelName,\n  uniqueId\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/restore/' + uniqueId;\n  fetch(url, {\n    method: \"POST\"\n  }).then(error => console.log('An error occurred.', error)).then(data => dispatch(loadModel({\n    modelName,\n    uniqueId\n  })));\n};\n/** Erase */\n\nexport const eraseModel = ({\n  modelName,\n  uniqueId\n}) => dispatch => {\n  const url = API + '/admin/api/' + modelName + '/' + uniqueId + \"?erase=true\";\n  fetch(url, {\n    method: \"DELETE\"\n  }).then(error => console.log('An error occurred.', error)).then(data => dispatch(receiveStatus({\n    modelName,\n    uniqueId,\n    status: \"erased\"\n  })));\n};\n/** Select */\n\nexport const selectModel = ({\n  modelName,\n  uniqueId\n}) => dispatch => {\n  dispatch(toggleSelected({\n    modelName,\n    uniqueId\n  }));\n};\n/** Document source */\n\nexport const getDocumentSource = (model, callback = undefined) => dispatch => {\n  const {\n    collectionId,\n    sourceId\n  } = model;\n  let url = API + '/admin/api/documents/search?collectionId=' + collectionId + \"&sourceId=\" + sourceId;\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => {\n    if (data.models && data.models[0]) {\n      dispatch(receiveModel(data.models[0]));\n      callback && callback(data.models[0]);\n    } else {\n      dispatch(addDocumentSource(model, callback));\n    }\n  });\n};\nexport const addDocumentSource = (model, callback = undefined) => dispatch => {\n  const url = API + '/admin/api/documents';\n  model = { ...model,\n    source: model.source.toLowerCase(),\n    schemaId: 1\n  };\n  delete model.uniqueId;\n  const payload = JSON.stringify(model);\n  console.log(payload);\n  return function (dispatch) {\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: payload\n    }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => {\n      dispatch(receiveModel(data));\n      callback && callback(data);\n    });\n  };\n};\n/** Media source */\n\nexport const getMediaSource = (model, callback = undefined) => dispatch => {\n  const {\n    collectionId,\n    sourceId\n  } = model;\n  let url = API + '/admin/api/media/search?collectionId=' + collectionId + \"&sourceId=\" + sourceId;\n  fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => {\n    if (data.models && data.models[0]) {\n      dispatch(receiveModel(data.models[0]));\n      callback && callback(data.models[0]);\n    } else {\n      dispatch(addMediaSource(model, callback));\n    }\n  });\n};\nexport const addMediaSource = (model, callback = undefined) => dispatch => {\n  const url = API + '/admin/api/media';\n  model = { ...model,\n    source: model.source.toLowerCase(),\n    schemaId: 1\n  };\n  delete model.uniqueId;\n  const payload = JSON.stringify(model);\n  console.log(payload);\n  return function (dispatch) {\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: payload\n    }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => {\n      dispatch(receiveModel(data));\n      callback && callback(data);\n    });\n  };\n};\nexport const {\n  requestModel,\n  receiveModel,\n  receiveStatus,\n  toggleSelected,\n  requestSave,\n  receiveSave\n} = modelsByIdSlice.actions;\nexport default modelsByIdSlice.reducer;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/redux/modelsById/modelsByIdSlice.js"],"names":["API","createSlice","modelsByIdSlice","name","initialState","reducers","requestModel","state","action","uniqueId","payload","isLoading","receiveModel","receiveStatus","status","toggleSelected","selected","requestSave","isSaving","receiveSave","getModel","modelName","dispatch","url","fetch","method","headers","then","response","json","error","console","log","formData","loadModel","saveModel","body","JSON","stringify","deleteModel","data","restoreModel","eraseModel","selectModel","getDocumentSource","model","callback","undefined","collectionId","sourceId","models","addDocumentSource","source","toLowerCase","schemaId","getMediaSource","addMediaSource","actions","reducer"],"mappings":"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","sourcesContent":["import { API } from \"../settings\"\nimport { createSlice } from '@reduxjs/toolkit'\n\nconst modelsByIdSlice = createSlice({\n    name: 'modelsById',\n    initialState: {\n    }, \n    reducers: {\n        requestModel(state, action) {\n            const { uniqueId } = action.payload\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    isLoading: true,\n                }\n            }\n\n        },\n        receiveModel(state, action) {\n            const { uniqueId } = action.payload\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    isLoading: false,\n                    ...action.payload\n                }\n            }\n\n        },\n        receiveStatus(state, action) {\n            const { uniqueId, status } = action.payload\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    ...state[uniqueId],\n                    status: status\n                }\n            }\n\n        },\n        toggleSelected(state, action) {\n            const { uniqueId } = action.payload\n\n            const selected = state[uniqueId] && state[uniqueId].selected\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    ...state[uniqueId],\n                    selected: !selected\n                }\n            }\n\n        },\n        requestSave(state, action) {\n            const { uniqueId } = action.payload\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    ...state[uniqueId],\n                    isSaving: true\n                }\n\n            }\n\n        },\n        receiveSave(state, action) {\n            const { uniqueId } = action.payload\n\n            return {\n                ...state,\n                [uniqueId]: {\n                    isSaving: false,\n                    ...action.payload\n                }\n            }\n        }        \n    }\n})\n\n/** Get model from uniqueId */\n\nexport const getModel = ({modelName = \"documents\", uniqueId}) => dispatch => {\n\n    const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n\n    dispatch(requestModel({uniqueId}))\n\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\",\n        }})\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(formData => {\n            dispatch(receiveModel(formData))\n        })\n\n}\n/** Load model from uniqueId */\n\nexport const loadModel = ({modelName = \"documents\", uniqueId}) => dispatch => {\n\n    const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n\n    dispatch(requestModel({uniqueId}))\n\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\",\n        }})\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(formData => {\n            dispatch(receiveModel(formData))\n        })\n\n}\n\n/** Save model from formData  */\n\nexport const saveModel = ({modelName = \"documents\", ...formData}) => dispatch => {\n    const url = API + '/admin/api/' + modelName;\n\n    formData && formData.uniqueId && dispatch(requestSave({uniqueId: formData.uniqueId}))\n\n    fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        body: JSON.stringify(formData)\n    })\n    .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n    )\n    .then(formData => {\n        dispatch(receiveSave(formData))\n    })\n\n}\n\n/** Delete */\n\nexport const deleteModel = ({modelName, uniqueId}) => dispatch => {\n    const url = API + '/admin/api/' + modelName + '/' + uniqueId;\n  \n    fetch(url, {\n        method: \"DELETE\",\n    })\n    .then(\n        error => console.log('An error occurred.', error)\n    )\n    .then(data =>\n        dispatch(loadModel({modelName, uniqueId}))\n    )\n\n}\n\n/** Restore */\n\nexport const restoreModel = ({modelName, uniqueId}) => dispatch => {\n    const url = API + '/admin/api/' + modelName + '/restore/' + uniqueId;\n  \n    fetch(url, {\n        method: \"POST\",\n    })\n    .then(\n        error => console.log('An error occurred.', error)\n    )\n    .then(data =>\n        dispatch(loadModel({modelName, uniqueId}))\n    )\n\n}\n\n/** Erase */\n\nexport const eraseModel = ({modelName, uniqueId}) => dispatch => {\n    const url = API + '/admin/api/' + modelName + '/' + uniqueId + \"?erase=true\";\n  \n    fetch(url, {\n        method: \"DELETE\",\n    })\n    .then(\n        error => console.log('An error occurred.', error)\n    )\n    .then(data =>\n        dispatch(receiveStatus({modelName, uniqueId, status: \"erased\"}))\n    )\n\n}\n\n/** Select */\n\nexport const selectModel = ({modelName, uniqueId}) => dispatch => {\n    dispatch(toggleSelected({modelName, uniqueId}))\n}\n\n/** Document source */\n\nexport const getDocumentSource = (model, callback = undefined) => dispatch => {\n    const { collectionId, sourceId } = model;    \n\n    let url = API + '/admin/api/documents/search?collectionId=' + collectionId + \"&sourceId=\" +sourceId;\n\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n    })\n    .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n    )\n    .then(data => {\n\n        if (data.models && data.models[0]) {\n            dispatch(receiveModel(data.models[0]))\n            callback && callback(data.models[0])\n        } else {\n            dispatch(addDocumentSource(model, callback))\n        }\n\n    })\n\n}\n\nexport const addDocumentSource = (model, callback = undefined) => dispatch => {\n    const url = API + '/admin/api/documents'\n\n    model = {\n        ...model,\n        source: model.source.toLowerCase(),\n        schemaId: 1\n    }\n\n    delete model.uniqueId\n    \n    const payload = JSON.stringify(model);\n\n    console.log(payload);\n\n    return function (dispatch) {\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            },\n            body: payload\n        })\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(data => {\n            dispatch(receiveModel(data))\n            callback && callback(data)\n        })\n    }\n\n}\n\n/** Media source */\n\nexport const getMediaSource = (model, callback = undefined) => dispatch => {\n    const { collectionId, sourceId } = model;    \n\n    let url = API + '/admin/api/media/search?collectionId=' + collectionId + \"&sourceId=\" +sourceId;\n\n    fetch(url, {\n        method: \"GET\",\n        headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n    })\n    .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n    )\n    .then(data => {\n\n        if (data.models && data.models[0]) {\n            dispatch(receiveModel(data.models[0]))\n            callback && callback(data.models[0])\n        } else {\n            dispatch(addMediaSource(model, callback))\n        }\n\n    })\n\n}\n\nexport const addMediaSource = (model, callback = undefined) => dispatch => {\n    const url = API + '/admin/api/media'\n\n    model = {\n        ...model,\n        source: model.source.toLowerCase(),\n        schemaId: 1\n    }\n\n    delete model.uniqueId\n    \n    const payload = JSON.stringify(model);\n\n    console.log(payload);\n\n    return function (dispatch) {\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json; charset=utf-8\",\n            },\n            body: payload\n        })\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(data => {\n            dispatch(receiveModel(data))\n            callback && callback(data)\n        })\n    }\n\n}\n\nexport const { requestModel, receiveModel, receiveStatus, toggleSelected, requestSave, receiveSave } = modelsByIdSlice.actions\nexport default modelsByIdSlice.reducer"]},"metadata":{},"sourceType":"module"}