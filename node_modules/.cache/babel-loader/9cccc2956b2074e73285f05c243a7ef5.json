{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WavPackParser = void 0;\n\nconst Token = require(\"token-types\");\n\nconst assert = require(\"assert\");\n\nconst APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\n\nconst FourCC_1 = require(\"../common/FourCC\");\n\nconst BasicParser_1 = require(\"../common/BasicParser\");\n\nconst WavPackToken_1 = require(\"./WavPackToken\");\n\nconst initDebug = require(\"debug\");\n\nconst debug = initDebug('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\n\nclass WavPackParser extends BasicParser_1.BasicParser {\n  async parse() {\n    this.audioDataSize = 0; // First parse all WavPack blocks\n\n    await this.parseWavPackBlocks(); // try to parse APEv2 header\n\n    return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n  }\n\n  async parseWavPackBlocks() {\n    do {\n      const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n      if (blockId !== 'wvpk') break;\n      const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n      assert.strictEqual(header.BlockID, 'wvpk', 'WavPack Block-ID');\n      debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n\n      if (header.blockIndex === 0 && !this.metadata.format.container) {\n        this.metadata.setFormat('container', 'WavPack');\n        this.metadata.setFormat('lossless', !header.flags.isHybrid); // tagTypes: this.type,\n\n        this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n\n        if (!header.flags.isDSD) {\n          // In case isDSD, these values will ne set in ID_DSD_BLOCK\n          this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n          this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n        }\n\n        this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n        this.metadata.setFormat('numberOfSamples', header.totalSamples);\n        this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n      }\n\n      const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n\n      if (header.blockIndex === 0) {\n        // Meta-data block\n        await this.parseMetadataSubBlock(header, ignoreBytes);\n      } else {\n        await this.tokenizer.ignore(ignoreBytes);\n      }\n\n      if (header.blockSamples > 0) {\n        this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n      }\n    } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n\n    this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n  }\n  /**\n   * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n   * @param remainingLength\n   */\n\n\n  async parseMetadataSubBlock(header, remainingLength) {\n    while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n      const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n      const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n      const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n      await this.tokenizer.readBuffer(data);\n      debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n\n      switch (id.functionId) {\n        case 0x0:\n          // ID_DUMMY: could be used to pad WavPack blocks\n          break;\n\n        case 0xe:\n          // ID_DSD_BLOCK\n          debug('ID_DSD_BLOCK'); // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n\n          const mp = 1 << data.readUInt8(0);\n          const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n\n          assert.ok(header.flags.isDSD, 'Only expect DSD block if DSD-flag is set');\n          this.metadata.setFormat('sampleRate', samplingRate);\n          this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n          break;\n\n        case 0x24:\n          // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n          debug('ID_ALT_TRAILER: trailer for non-wav files');\n          break;\n\n        case 0x26:\n          // ID_MD5_CHECKSUM\n          this.metadata.setFormat('audioMD5', data);\n          break;\n\n        case 0x2f:\n          // ID_BLOCK_CHECKSUM\n          debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n          break;\n\n        default:\n          debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n          break;\n      }\n\n      remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n      debug(`remainingLength=${remainingLength}`);\n      if (id.isOddSize) this.tokenizer.ignore(1);\n    }\n\n    assert.strictEqual(remainingLength, 0, 'metadata-sub-block should fit it remaining length');\n  }\n\n}\n\nexports.WavPackParser = WavPackParser;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/wavpack/WavPackParser.js"],"names":["Object","defineProperty","exports","value","WavPackParser","Token","require","assert","APEv2Parser_1","FourCC_1","BasicParser_1","WavPackToken_1","initDebug","debug","BasicParser","parse","audioDataSize","parseWavPackBlocks","APEv2Parser","tryParseApeHeader","metadata","tokenizer","options","blockId","peekToken","FourCcToken","header","readToken","WavPack","BlockHeaderToken","strictEqual","BlockID","blockIndex","len","format","container","setFormat","flags","isHybrid","bitsPerSample","isDSD","samplingRate","totalSamples","isMono","ignoreBytes","blockSize","parseMetadataSubBlock","ignore","blockSamples","fileInfo","size","position","duration","remainingLength","MetadataIdToken","id","dataSizeInWords","readNumber","largeBlock","UINT24_LE","UINT8","data","Buffer","alloc","isOddSize","readBuffer","functionId","toString","length","mp","readUInt8","ok"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WavPackParser = void 0;\nconst Token = require(\"token-types\");\nconst assert = require(\"assert\");\nconst APEv2Parser_1 = require(\"../apev2/APEv2Parser\");\nconst FourCC_1 = require(\"../common/FourCC\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst WavPackToken_1 = require(\"./WavPackToken\");\nconst initDebug = require(\"debug\");\nconst debug = initDebug('music-metadata:parser:WavPack');\n/**\n * WavPack Parser\n */\nclass WavPackParser extends BasicParser_1.BasicParser {\n    async parse() {\n        this.audioDataSize = 0;\n        // First parse all WavPack blocks\n        await this.parseWavPackBlocks();\n        // try to parse APEv2 header\n        return APEv2Parser_1.APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\n    }\n    async parseWavPackBlocks() {\n        do {\n            const blockId = await this.tokenizer.peekToken(FourCC_1.FourCcToken);\n            if (blockId !== 'wvpk')\n                break;\n            const header = await this.tokenizer.readToken(WavPackToken_1.WavPack.BlockHeaderToken);\n            assert.strictEqual(header.BlockID, 'wvpk', 'WavPack Block-ID');\n            debug(`WavPack header blockIndex=${header.blockIndex}, len=${WavPackToken_1.WavPack.BlockHeaderToken.len}`);\n            if (header.blockIndex === 0 && !this.metadata.format.container) {\n                this.metadata.setFormat('container', 'WavPack');\n                this.metadata.setFormat('lossless', !header.flags.isHybrid);\n                // tagTypes: this.type,\n                this.metadata.setFormat('bitsPerSample', header.flags.bitsPerSample);\n                if (!header.flags.isDSD) {\n                    // In case isDSD, these values will ne set in ID_DSD_BLOCK\n                    this.metadata.setFormat('sampleRate', header.flags.samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / header.flags.samplingRate);\n                }\n                this.metadata.setFormat('numberOfChannels', header.flags.isMono ? 1 : 2);\n                this.metadata.setFormat('numberOfSamples', header.totalSamples);\n                this.metadata.setFormat('codec', header.flags.isDSD ? 'DSD' : 'PCM');\n            }\n            const ignoreBytes = header.blockSize - (WavPackToken_1.WavPack.BlockHeaderToken.len - 8);\n            if (header.blockIndex === 0) {\n                // Meta-data block\n                await this.parseMetadataSubBlock(header, ignoreBytes);\n            }\n            else {\n                await this.tokenizer.ignore(ignoreBytes);\n            }\n            if (header.blockSamples > 0) {\n                this.audioDataSize += header.blockSize; // Count audio data for bit-rate calculation\n            }\n        } while (!this.tokenizer.fileInfo.size || this.tokenizer.fileInfo.size - this.tokenizer.position >= WavPackToken_1.WavPack.BlockHeaderToken.len);\n        this.metadata.setFormat('bitrate', this.audioDataSize * 8 / this.metadata.format.duration);\n    }\n    /**\n     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks\n     * @param remainingLength\n     */\n    async parseMetadataSubBlock(header, remainingLength) {\n        while (remainingLength > WavPackToken_1.WavPack.MetadataIdToken.len) {\n            const id = await this.tokenizer.readToken(WavPackToken_1.WavPack.MetadataIdToken);\n            const dataSizeInWords = await this.tokenizer.readNumber(id.largeBlock ? Token.UINT24_LE : Token.UINT8);\n            const data = Buffer.alloc(dataSizeInWords * 2 - (id.isOddSize ? 1 : 0));\n            await this.tokenizer.readBuffer(data);\n            debug(`Metadata Sub-Blocks functionId=0x${id.functionId.toString(16)}, id.largeBlock=${id.largeBlock},data-size=${data.length}`);\n            switch (id.functionId) {\n                case 0x0: // ID_DUMMY: could be used to pad WavPack blocks\n                    break;\n                case 0xe: // ID_DSD_BLOCK\n                    debug('ID_DSD_BLOCK');\n                    // https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    const mp = 1 << data.readUInt8(0);\n                    const samplingRate = header.flags.samplingRate * mp * 8; // ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813\n                    assert.ok(header.flags.isDSD, 'Only expect DSD block if DSD-flag is set');\n                    this.metadata.setFormat('sampleRate', samplingRate);\n                    this.metadata.setFormat('duration', header.totalSamples / samplingRate);\n                    break;\n                case 0x24: // ID_ALT_TRAILER: maybe used to embed original ID3 tag header\n                    debug('ID_ALT_TRAILER: trailer for non-wav files');\n                    break;\n                case 0x26: // ID_MD5_CHECKSUM\n                    this.metadata.setFormat('audioMD5', data);\n                    break;\n                case 0x2f: // ID_BLOCK_CHECKSUM\n                    debug(`ID_BLOCK_CHECKSUM: checksum=${data.toString('hex')}`);\n                    break;\n                default:\n                    debug(`Ignore unsupported meta-sub-block-id functionId=0x${id.functionId.toString(16)}`);\n                    break;\n            }\n            remainingLength -= WavPackToken_1.WavPack.MetadataIdToken.len + (id.largeBlock ? Token.UINT24_LE.len : Token.UINT8.len) + dataSizeInWords * 2;\n            debug(`remainingLength=${remainingLength}`);\n            if (id.isOddSize)\n                this.tokenizer.ignore(1);\n        }\n        assert.strictEqual(remainingLength, 0, 'metadata-sub-block should fit it remaining length');\n    }\n}\nexports.WavPackParser = WavPackParser;\n//# sourceMappingURL=WavPackParser.js.map"]},"metadata":{},"sourceType":"script"}