{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/MediaDialog.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport DialogBase from \"./DialogBase\";\nimport DialogFooter from \"./DialogFooter\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport FavouriteIcon from '@material-ui/icons/Favorite';\nimport UploadIcon from '@material-ui/icons/CloudUpload';\nimport UploadDoneIcon from '@material-ui/icons/CloudDone';\nimport Badge from '@material-ui/core/Badge';\nimport SearchDialog from \"./SearchDialog\";\nimport FavoritesDialog from './FavouritesDialog';\nimport UploadDialog from \"./UploadDialog\";\n\nconst MediaDialog = ({\n  query,\n  favourites,\n  uploadById,\n  ...props\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation(['dialog']);\n  const [template, setTemplate] = useState(\"search\"); // get mediaTypes\n\n  let mediaTypes = [];\n\n  if (Array.isArray(query.mediaType)) {\n    mediaTypes = query.mediaType;\n  } else if (query.mediaType) {\n    mediaTypes = [query.mediaType];\n  } else if (query.models === \"media\") {\n    mediaTypes = ['image*', 'video*', 'audio*'];\n  } // get upload\n\n\n  let upload = {\n    id: \"/dialog/upload\",\n    accept: []\n  };\n  mediaTypes && mediaTypes.map(mediaType => {\n    if (mediaType.includes('image')) {\n      upload.accept.push('image/*');\n    }\n\n    if (mediaType.includes(\"video\")) {\n      upload.accept.push('video/*');\n    }\n\n    if (mediaType.includes(\"audio\")) {\n      upload.accept.push('audio/*');\n    }\n  });\n  const mediaFavourites = favourites && favourites[\"media\"] && favourites[\"media\"].length;\n  const mediaUploads = uploadById && uploadById[upload.id] && uploadById[upload.id].models;\n\n  const FavouriteBadge = () => {\n    return /*#__PURE__*/React.createElement(Badge, {\n      badgeContent: 2,\n      variant: \"dot\",\n      invisible: !mediaFavourites && true,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FavouriteIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const UploadBadge = () => {\n    return /*#__PURE__*/React.createElement(Badge, {\n      badgeContent: 2,\n      variant: \"dot\",\n      invisible: !mediaUploads && true,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, mediaUploads && /*#__PURE__*/React.createElement(UploadDoneIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 35\n      }\n    }) || /*#__PURE__*/React.createElement(UploadIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 57\n      }\n    }));\n  };\n\n  const menu = [{\n    label: t(\"Search\"),\n    icon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 19\n      }\n    }),\n    onClick: () => setTemplate('search')\n  }, {\n    label: t(\"Favorites\"),\n    icon: /*#__PURE__*/React.createElement(FavouriteBadge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 19\n      }\n    }),\n    onClick: () => setTemplate('favourites')\n  }, {\n    label: t(\"Upload\"),\n    icon: /*#__PURE__*/React.createElement(UploadBadge, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 19\n      }\n    }),\n    onClick: () => setTemplate('upload')\n  }];\n  return /*#__PURE__*/React.createElement(DialogBase, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogFooter, {\n    menu: menu,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), template === \"search\" && /*#__PURE__*/React.createElement(SearchDialog, Object.assign({\n    query: query\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 40\n    }\n  })), template === \"favourites\" && /*#__PURE__*/React.createElement(FavoritesDialog, Object.assign({\n    query: query,\n    favourites: favourites\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 44\n    }\n  })), template === \"upload\" && /*#__PURE__*/React.createElement(UploadDialog, Object.assign({\n    upload: upload,\n    query: query\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 40\n    }\n  })));\n};\n\nMediaDialog.defaultProps = {\n  query: {\n    models: \"media\",\n    mediaType: \"*\"\n  }\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nconst mapStateToProps = state => {\n  return {\n    favourites: state.favourites,\n    uploadById: state.uploadById\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MediaDialog);","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/MediaDialog.js"],"names":["React","useState","useEffect","useTranslation","connect","bindActionCreators","DialogBase","DialogFooter","SearchIcon","FavouriteIcon","UploadIcon","UploadDoneIcon","Badge","SearchDialog","FavoritesDialog","UploadDialog","MediaDialog","query","favourites","uploadById","props","t","i18n","template","setTemplate","mediaTypes","Array","isArray","mediaType","models","upload","id","accept","map","includes","push","mediaFavourites","length","mediaUploads","FavouriteBadge","UploadBadge","menu","label","icon","onClick","defaultProps","mapDispatchToProps","dispatch","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport DialogBase from \"./DialogBase\"\nimport DialogFooter from \"./DialogFooter\"\n\nimport SearchIcon from '@material-ui/icons/Search';\nimport FavouriteIcon from '@material-ui/icons/Favorite';\nimport UploadIcon from '@material-ui/icons/CloudUpload';\nimport UploadDoneIcon from '@material-ui/icons/CloudDone';\n\nimport Badge from '@material-ui/core/Badge';\n\n\nimport SearchDialog from \"./SearchDialog\"\nimport FavoritesDialog from './FavouritesDialog';\nimport UploadDialog from \"./UploadDialog\"\n\nconst MediaDialog = ({query, favourites, uploadById, ...props}) => {\n    const { t, i18n } = useTranslation(['dialog']);\n\n    const [template, setTemplate] = useState(\"search\")\n\n    // get mediaTypes\n\n    let mediaTypes = []\n\n    if (Array.isArray(query.mediaType)) {\n        mediaTypes = query.mediaType\n    } else if (query.mediaType) {\n        mediaTypes = [query.mediaType]\n    } else if (query.models === \"media\") {\n        mediaTypes = ['image*','video*','audio*']\n    }\n\n    // get upload\n\n    let upload = {\n        id: \"/dialog/upload\",\n        accept: []\n    }\n\n    mediaTypes && mediaTypes.map(mediaType => {\n\n        if (mediaType.includes('image')) {\n            upload.accept.push('image/*')\n        }\n    \n        if (mediaType.includes(\"video\")) {\n            upload.accept.push('video/*')\n        }\n    \n        if (mediaType.includes(\"audio\")) {\n            upload.accept.push('audio/*')\n        }\n    \n    })    \n\n    const mediaFavourites = favourites && favourites[\"media\"] && favourites[\"media\"].length\n    const mediaUploads = uploadById && uploadById[upload.id] && uploadById[upload.id].models\n\n    const FavouriteBadge = () => {\n        return (\n            <Badge badgeContent={2} variant=\"dot\" invisible={!mediaFavourites && true} color=\"primary\">\n                <FavouriteIcon />\n            </Badge>\n        )\n    }\n\n    const UploadBadge = () => {\n        return (\n            <Badge badgeContent={2} variant=\"dot\" invisible={!mediaUploads && true} color=\"primary\">\n                { mediaUploads && <UploadDoneIcon /> || <UploadIcon /> }\n            </Badge>\n        )\n    }\n\n    const menu = [\n        {\n            label: t(\"Search\"),\n            icon: <SearchIcon />,\n            onClick: () => setTemplate('search')\n        },\n        {\n            label: t(\"Favorites\"),\n            icon: <FavouriteBadge />,\n            onClick: () => setTemplate('favourites')\n        },\n        {\n            label: t(\"Upload\"),\n            icon: <UploadBadge />,\n            onClick: () => setTemplate('upload')\n        }\n    ]\n\n    return (\n        <DialogBase>\n            <DialogFooter menu={menu} />\n            { template === \"search\" && <SearchDialog query={query} {...props} /> }\n            { template === \"favourites\" && <FavoritesDialog query={query} favourites={favourites} {...props} /> }\n            { template === \"upload\" && <UploadDialog upload={upload} query={query} {...props} /> }\n        </DialogBase>\n    )\n\n}\n\nMediaDialog.defaultProps = {\n    query: {\n        models: \"media\",\n        mediaType: \"*\"\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators({\n    }, \ndispatch);\n\nconst mapStateToProps = (state) => {\n\treturn {\n        favourites: state.favourites,\n        uploadById: state.uploadById\n\t};\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MediaDialog);"]},"metadata":{},"sourceType":"module"}