{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst assert = require(\"assert\");\n\nconst ieee754 = require(\"ieee754\"); // Primitive types\n\n/**\n * 8-bit unsigned integer\n */\n\n\nexports.UINT8 = {\n  len: 1,\n\n  get(buf, off) {\n    return buf.readUInt8(off);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUInt8(v, off);\n  }\n\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT16_LE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readUInt16LE(off);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUInt16LE(v, off);\n  }\n\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT16_BE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readUInt16BE(off);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUInt16BE(v, off);\n  }\n\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT24_LE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readUIntLE(off, 3);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffffff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUIntLE(v, off, 3);\n  }\n\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT24_BE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readUIntBE(off, 3);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffffff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUIntBE(v, off, 3);\n  }\n\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT32_LE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readUInt32LE(off);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffffffff);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeUInt32LE(v, o);\n  }\n\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT32_BE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readUInt32BE(off);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= 0 && v <= 0xffffffff);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeUInt32BE(v, off);\n  }\n\n};\n/**\n * 8-bit signed integer\n */\n\nexports.INT8 = {\n  len: 1,\n\n  get(buf, off) {\n    return buf.readInt8(off);\n  },\n\n  put(buf, off, v) {\n    assert.equal(typeof off, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -128 && v <= 127);\n    assert.ok(off >= 0);\n    assert.ok(this.len <= buf.length);\n    return buf.writeInt8(v, off);\n  }\n\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\n\nexports.INT16_BE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readInt16BE(off);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -32768 && v <= 32767);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeInt16BE(v, o);\n  }\n\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\n\nexports.INT16_LE = {\n  len: 2,\n\n  get(buf, off) {\n    return buf.readInt16LE(off);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -32768 && v <= 32767);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeInt16LE(v, o);\n  }\n\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\n\nexports.INT24_LE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readIntLE(off, 3);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -0x800000 && v <= 0x7fffff);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeIntLE(v, o, 3);\n  }\n\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\n\nexports.INT24_BE = {\n  len: 3,\n\n  get(buf, off) {\n    return buf.readIntBE(off, 3);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -0x800000 && v <= 0x7fffff);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeIntBE(v, o, 3);\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_BE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readInt32BE(off);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -2147483648 && v <= 2147483647);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeInt32BE(v, o);\n  }\n\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\n\nexports.INT32_LE = {\n  len: 4,\n\n  get(buf, off) {\n    return buf.readInt32LE(off);\n  },\n\n  put(b, o, v) {\n    assert.equal(typeof o, 'number');\n    assert.equal(typeof v, 'number');\n    assert.ok(v >= -2147483648 && v <= 2147483647);\n    assert.ok(o >= 0);\n    assert.ok(this.len <= b.length);\n    return b.writeInt32LE(v, o);\n  }\n\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\n\nexports.UINT64_LE = {\n  len: 8,\n\n  get(buf, off) {\n    return readUIntLE(buf, off, this.len);\n  },\n\n  put(b, o, v) {\n    return writeUIntLE(b, v, o, this.len);\n  }\n\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\n\nexports.INT64_LE = {\n  len: 8,\n\n  get(buf, off) {\n    return readIntLE(buf, off, this.len);\n  },\n\n  put(b, off, v) {\n    return writeIntLE(b, v, off, this.len);\n  }\n\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\n\nexports.UINT64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return readUIntBE(b, off, this.len);\n  },\n\n  put(b, o, v) {\n    return writeUIntBE(b, v, o, this.len);\n  }\n\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\n\nexports.INT64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return readIntBE(b, off, this.len);\n  },\n\n  put(b, off, v) {\n    return writeIntBE(b, v, off, this.len);\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\n\nexports.Float16_BE = {\n  len: 2,\n\n  get(b, off) {\n    return ieee754.read(b, off, false, 10, this.len);\n  },\n\n  put(b, off, v) {\n    return ieee754.write(b, v, off, false, 10, this.len);\n  }\n\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\n\nexports.Float16_LE = {\n  len: 2,\n\n  get(b, off) {\n    return ieee754.read(b, off, true, 10, this.len);\n  },\n\n  put(b, off, v) {\n    return ieee754.write(b, v, off, true, 10, this.len);\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\n\nexports.Float32_BE = {\n  len: 4,\n\n  get(b, off) {\n    return b.readFloatBE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeFloatBE(v, off);\n  }\n\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\n\nexports.Float32_LE = {\n  len: 4,\n\n  get(b, off) {\n    return b.readFloatLE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeFloatLE(v, off);\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\n\nexports.Float64_BE = {\n  len: 8,\n\n  get(b, off) {\n    return b.readDoubleBE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeDoubleBE(v, off);\n  }\n\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\n\nexports.Float64_LE = {\n  len: 8,\n\n  get(b, off) {\n    return b.readDoubleLE(off);\n  },\n\n  put(b, off, v) {\n    return b.writeDoubleLE(v, off);\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\n\nexports.Float80_BE = {\n  len: 10,\n\n  get(b, off) {\n    return ieee754.read(b, off, false, 63, this.len);\n  },\n\n  put(b, off, v) {\n    return ieee754.write(b, v, off, false, 63, this.len);\n  }\n\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\n\nexports.Float80_LE = {\n  len: 10,\n\n  get(b, off) {\n    return ieee754.read(b, off, true, 63, this.len);\n  },\n\n  put(b, off, v) {\n    return ieee754.write(b, v, off, true, 63, this.len);\n  }\n\n};\n/**\n * Ignore a given number of bytes\n */\n\nclass IgnoreType {\n  /**\n   * @param len number of bytes to ignore\n   */\n  constructor(len) {\n    this.len = len;\n  } // ToDo: don't read, but skip data\n\n\n  get(buf, off) {}\n\n}\n\nexports.IgnoreType = IgnoreType;\n\nclass BufferType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  get(buf, off) {\n    return buf.slice(off, off + this.len);\n  }\n\n}\n\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\n\nclass StringType {\n  constructor(len, encoding) {\n    this.len = len;\n    this.encoding = encoding;\n  }\n\n  get(buf, off) {\n    return buf.toString(this.encoding, off, off + this.len);\n  }\n\n}\n\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\n\nclass AnsiStringType {\n  constructor(len) {\n    this.len = len;\n  }\n\n  static decode(buffer, off, until) {\n    let str = '';\n\n    for (let i = off; i < until; ++i) {\n      str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n    }\n\n    return str;\n  }\n\n  static inRange(a, min, max) {\n    return min <= a && a <= max;\n  }\n\n  static codePointToString(cp) {\n    if (cp <= 0xFFFF) {\n      return String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n\n  static singleByteDecoder(bite) {\n    if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n      return bite;\n    }\n\n    const codePoint = AnsiStringType.windows1252[bite - 0x80];\n\n    if (codePoint === null) {\n      throw Error('invaliding encoding');\n    }\n\n    return codePoint;\n  }\n\n  get(buf, off = 0) {\n    return AnsiStringType.decode(buf, off, off + this.len);\n  }\n\n}\n\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255];\n/**\n * Best effort approach to read up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readUIntLE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset];\n  let mul = 1;\n  let i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += buf[offset + i] * mul;\n  }\n\n  return val;\n}\n/**\n * Best effort approach to write up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction writeUIntLE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let mul = 1;\n  let i = 0;\n  buf[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    buf[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n/**\n * Best effort approach to read 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction readIntLE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset];\n  let mul = 1;\n  let i = 0;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += buf[offset + i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n}\n/**\n * Best effort approach to write 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\n\nfunction writeIntLE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  let i = 0;\n  let mul = 1;\n  let sub = 0;\n  buf[offset] = value & 0xFF;\n\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && buf[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n\n    buf[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeIntLE = writeIntLE;\n/**\n * Best effort approach to read up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readUIntBE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let val = buf[offset + --byteLength];\n  let mul = 1;\n\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += buf[offset + --byteLength] * mul;\n  }\n\n  return val;\n}\n\nexports.readUIntBE = readUIntBE;\n/**\n * Best effort approach to write up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction writeUIntBE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let i = byteLength - 1;\n  let mul = 1;\n  buf[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    buf[offset + i] = value / mul & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeUIntBE = writeUIntBE;\n/**\n * Best effort approach to read 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction readIntBE(buf, offset, byteLength) {\n  offset = offset >>> 0;\n  byteLength = byteLength >>> 0;\n  let i = byteLength;\n  let mul = 1;\n  let val = buf[offset + --i];\n\n  while (i > 0 && (mul *= 0x100)) {\n    val += buf[offset + --i] * mul;\n  }\n\n  mul *= 0x80;\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n  return val;\n}\n\nexports.readIntBE = readIntBE;\n/**\n * Best effort approach to write 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\n\nfunction writeIntBE(buf, value, offset, byteLength) {\n  value = +value;\n  offset = offset >>> 0;\n  let i = byteLength - 1;\n  let mul = 1;\n  let sub = 0;\n  buf[offset + i] = value & 0xFF;\n\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && buf[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n\n    buf[offset + i] = (value / mul >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength;\n}\n\nexports.writeIntBE = writeIntBE;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/token-types/lib/index.js"],"names":["Object","defineProperty","exports","value","assert","require","ieee754","UINT8","len","get","buf","off","readUInt8","put","v","equal","ok","length","writeUInt8","UINT16_LE","readUInt16LE","writeUInt16LE","UINT16_BE","readUInt16BE","writeUInt16BE","UINT24_LE","readUIntLE","writeUIntLE","UINT24_BE","readUIntBE","writeUIntBE","UINT32_LE","readUInt32LE","b","o","writeUInt32LE","UINT32_BE","readUInt32BE","writeUInt32BE","INT8","readInt8","writeInt8","INT16_BE","readInt16BE","writeInt16BE","INT16_LE","readInt16LE","writeInt16LE","INT24_LE","readIntLE","writeIntLE","INT24_BE","readIntBE","writeIntBE","INT32_BE","readInt32BE","writeInt32BE","INT32_LE","readInt32LE","writeInt32LE","UINT64_LE","INT64_LE","UINT64_BE","INT64_BE","Float16_BE","read","write","Float16_LE","Float32_BE","readFloatBE","writeFloatBE","Float32_LE","readFloatLE","writeFloatLE","Float64_BE","readDoubleBE","writeDoubleBE","Float64_LE","readDoubleLE","writeDoubleLE","Float80_BE","Float80_LE","IgnoreType","constructor","BufferType","slice","StringType","encoding","toString","AnsiStringType","decode","buffer","until","str","i","codePointToString","singleByteDecoder","inRange","a","min","max","cp","String","fromCharCode","bite","codePoint","windows1252","Error","offset","byteLength","val","mul","Math","pow","sub"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst assert = require(\"assert\");\nconst ieee754 = require(\"ieee754\");\n// Primitive types\n/**\n * 8-bit unsigned integer\n */\nexports.UINT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readUInt8(off);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUInt8(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Little Endian byte order\n */\nexports.UINT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16LE(off);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUInt16LE(v, off);\n    }\n};\n/**\n * 16-bit unsigned integer, Big Endian byte order\n */\nexports.UINT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readUInt16BE(off);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUInt16BE(v, off);\n    }\n};\n/**\n * 24-bit unsigned integer, Little Endian byte order\n */\nexports.UINT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntLE(off, 3);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffffff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUIntLE(v, off, 3);\n    }\n};\n/**\n * 24-bit unsigned integer, Big Endian byte order\n */\nexports.UINT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readUIntBE(off, 3);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffffff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUIntBE(v, off, 3);\n    }\n};\n/**\n * 32-bit unsigned integer, Little Endian byte order\n */\nexports.UINT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32LE(off);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffffffff);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeUInt32LE(v, o);\n    }\n};\n/**\n * 32-bit unsigned integer, Big Endian byte order\n */\nexports.UINT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readUInt32BE(off);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= 0 && v <= 0xffffffff);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeUInt32BE(v, off);\n    }\n};\n/**\n * 8-bit signed integer\n */\nexports.INT8 = {\n    len: 1,\n    get(buf, off) {\n        return buf.readInt8(off);\n    },\n    put(buf, off, v) {\n        assert.equal(typeof off, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -128 && v <= 127);\n        assert.ok(off >= 0);\n        assert.ok(this.len <= buf.length);\n        return buf.writeInt8(v, off);\n    }\n};\n/**\n * 16-bit signed integer, Big Endian byte order\n */\nexports.INT16_BE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16BE(off);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -32768 && v <= 32767);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeInt16BE(v, o);\n    }\n};\n/**\n * 16-bit signed integer, Little Endian byte order\n */\nexports.INT16_LE = {\n    len: 2,\n    get(buf, off) {\n        return buf.readInt16LE(off);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -32768 && v <= 32767);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeInt16LE(v, o);\n    }\n};\n/**\n * 24-bit signed integer, Little Endian byte order\n */\nexports.INT24_LE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntLE(off, 3);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -0x800000 && v <= 0x7fffff);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeIntLE(v, o, 3);\n    }\n};\n/**\n * 24-bit signed integer, Big Endian byte order\n */\nexports.INT24_BE = {\n    len: 3,\n    get(buf, off) {\n        return buf.readIntBE(off, 3);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -0x800000 && v <= 0x7fffff);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeIntBE(v, o, 3);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_BE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32BE(off);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -2147483648 && v <= 2147483647);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeInt32BE(v, o);\n    }\n};\n/**\n * 32-bit signed integer, Big Endian byte order\n */\nexports.INT32_LE = {\n    len: 4,\n    get(buf, off) {\n        return buf.readInt32LE(off);\n    },\n    put(b, o, v) {\n        assert.equal(typeof o, 'number');\n        assert.equal(typeof v, 'number');\n        assert.ok(v >= -2147483648 && v <= 2147483647);\n        assert.ok(o >= 0);\n        assert.ok(this.len <= b.length);\n        return b.writeInt32LE(v, o);\n    }\n};\n/**\n * 64-bit unsigned integer, Little Endian byte order\n */\nexports.UINT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readUIntLE(buf, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntLE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Little Endian byte order\n */\nexports.INT64_LE = {\n    len: 8,\n    get(buf, off) {\n        return readIntLE(buf, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntLE(b, v, off, this.len);\n    }\n};\n/**\n * 64-bit unsigned integer, Big Endian byte order\n */\nexports.UINT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readUIntBE(b, off, this.len);\n    },\n    put(b, o, v) {\n        return writeUIntBE(b, v, o, this.len);\n    }\n};\n/**\n * 64-bit signed integer, Big Endian byte order\n */\nexports.INT64_BE = {\n    len: 8,\n    get(b, off) {\n        return readIntBE(b, off, this.len);\n    },\n    put(b, off, v) {\n        return writeIntBE(b, v, off, this.len);\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, big endian\n */\nexports.Float16_BE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, false, 10, this.len);\n    },\n    put(b, off, v) {\n        return ieee754.write(b, v, off, false, 10, this.len);\n    }\n};\n/**\n * IEEE 754 16-bit (half precision) float, little endian\n */\nexports.Float16_LE = {\n    len: 2,\n    get(b, off) {\n        return ieee754.read(b, off, true, 10, this.len);\n    },\n    put(b, off, v) {\n        return ieee754.write(b, v, off, true, 10, this.len);\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, big endian\n */\nexports.Float32_BE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatBE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatBE(v, off);\n    }\n};\n/**\n * IEEE 754 32-bit (single precision) float, little endian\n */\nexports.Float32_LE = {\n    len: 4,\n    get(b, off) {\n        return b.readFloatLE(off);\n    },\n    put(b, off, v) {\n        return b.writeFloatLE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, big endian\n */\nexports.Float64_BE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleBE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleBE(v, off);\n    }\n};\n/**\n * IEEE 754 64-bit (double precision) float, little endian\n */\nexports.Float64_LE = {\n    len: 8,\n    get(b, off) {\n        return b.readDoubleLE(off);\n    },\n    put(b, off, v) {\n        return b.writeDoubleLE(v, off);\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, big endian\n */\nexports.Float80_BE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, false, 63, this.len);\n    },\n    put(b, off, v) {\n        return ieee754.write(b, v, off, false, 63, this.len);\n    }\n};\n/**\n * IEEE 754 80-bit (extended precision) float, little endian\n */\nexports.Float80_LE = {\n    len: 10,\n    get(b, off) {\n        return ieee754.read(b, off, true, 63, this.len);\n    },\n    put(b, off, v) {\n        return ieee754.write(b, v, off, true, 63, this.len);\n    }\n};\n/**\n * Ignore a given number of bytes\n */\nclass IgnoreType {\n    /**\n     * @param len number of bytes to ignore\n     */\n    constructor(len) {\n        this.len = len;\n    }\n    // ToDo: don't read, but skip data\n    get(buf, off) {\n    }\n}\nexports.IgnoreType = IgnoreType;\nclass BufferType {\n    constructor(len) {\n        this.len = len;\n    }\n    get(buf, off) {\n        return buf.slice(off, off + this.len);\n    }\n}\nexports.BufferType = BufferType;\n/**\n * Consume a fixed number of bytes from the stream and return a string with a specified encoding.\n */\nclass StringType {\n    constructor(len, encoding) {\n        this.len = len;\n        this.encoding = encoding;\n    }\n    get(buf, off) {\n        return buf.toString(this.encoding, off, off + this.len);\n    }\n}\nexports.StringType = StringType;\n/**\n * ANSI Latin 1 String\n * Using windows-1252 / ISO 8859-1 decoding\n */\nclass AnsiStringType {\n    constructor(len) {\n        this.len = len;\n    }\n    static decode(buffer, off, until) {\n        let str = '';\n        for (let i = off; i < until; ++i) {\n            str += AnsiStringType.codePointToString(AnsiStringType.singleByteDecoder(buffer[i]));\n        }\n        return str;\n    }\n    static inRange(a, min, max) {\n        return min <= a && a <= max;\n    }\n    static codePointToString(cp) {\n        if (cp <= 0xFFFF) {\n            return String.fromCharCode(cp);\n        }\n        else {\n            cp -= 0x10000;\n            return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n        }\n    }\n    static singleByteDecoder(bite) {\n        if (AnsiStringType.inRange(bite, 0x00, 0x7F)) {\n            return bite;\n        }\n        const codePoint = AnsiStringType.windows1252[bite - 0x80];\n        if (codePoint === null) {\n            throw Error('invaliding encoding');\n        }\n        return codePoint;\n    }\n    get(buf, off = 0) {\n        return AnsiStringType.decode(buf, off, off + this.len);\n    }\n}\nexports.AnsiStringType = AnsiStringType;\nAnsiStringType.windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n/**\n * Best effort approach to read up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    return val;\n}\n/**\n * Best effort approach to write up to 64 bit unsigned integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let mul = 1;\n    let i = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\n/**\n * Best effort approach to read 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntLE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset];\n    let mul = 1;\n    let i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += buf[offset + i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\n/**\n * Best effort approach to write 64 but signed integer, little endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntLE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = 0;\n    let mul = 1;\n    let sub = 0;\n    buf[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i - 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntLE = writeIntLE;\n/**\n * Best effort approach to read up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readUIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let val = buf[offset + --byteLength];\n    let mul = 1;\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += buf[offset + --byteLength] * mul;\n    }\n    return val;\n}\nexports.readUIntBE = readUIntBE;\n/**\n * Best effort approach to write up to 64 bit unsigned integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeUIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        buf[offset + i] = (value / mul) & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeUIntBE = writeUIntBE;\n/**\n * Best effort approach to read 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction readIntBE(buf, offset, byteLength) {\n    offset = offset >>> 0;\n    byteLength = byteLength >>> 0;\n    let i = byteLength;\n    let mul = 1;\n    let val = buf[offset + --i];\n    while (i > 0 && (mul *= 0x100)) {\n        val += buf[offset + --i] * mul;\n    }\n    mul *= 0x80;\n    if (val >= mul)\n        val -= Math.pow(2, 8 * byteLength);\n    return val;\n}\nexports.readIntBE = readIntBE;\n/**\n * Best effort approach to write 64 but signed integer, big endian.\n * Note that JavasScript is limited to 2^53 - 1 bit.\n */\nfunction writeIntBE(buf, value, offset, byteLength) {\n    value = +value;\n    offset = offset >>> 0;\n    let i = byteLength - 1;\n    let mul = 1;\n    let sub = 0;\n    buf[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && buf[offset + i + 1] !== 0) {\n            sub = 1;\n        }\n        buf[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n    return offset + byteLength;\n}\nexports.writeIntBE = writeIntBE;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}