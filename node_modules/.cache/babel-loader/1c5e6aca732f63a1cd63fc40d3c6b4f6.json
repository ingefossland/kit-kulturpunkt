{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonTagMapper = void 0;\n\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\n\nclass CommonTagMapper {\n  constructor(tagTypes, tagMap) {\n    this.tagTypes = tagTypes;\n    this.tagMap = tagMap;\n  }\n\n  static parseGenre(origVal) {\n    // match everything inside parentheses\n    const split = origVal.trim().split(/\\((.*?)\\)/g).filter(val => {\n      return val !== '';\n    });\n    const array = [];\n\n    for (let cur of split) {\n      if (/^\\d+$/.test(cur) && !isNaN(parseInt(cur, 10))) {\n        cur = ID3v1Parser_1.Genres[cur];\n      }\n\n      array.push(cur);\n    }\n\n    return array.filter(val => {\n      return val !== undefined;\n    }).join('/');\n  }\n\n  static toIntOrNull(str) {\n    const cleaned = parseInt(str, 10);\n    return isNaN(cleaned) ? null : cleaned;\n  } // TODO: a string of 1of1 would fail to be converted\n  // converts 1/10 to no : 1, of : 10\n  // or 1 to no : 1, of : 0\n\n\n  static normalizeTrack(origVal) {\n    const split = origVal.toString().split('/');\n    return {\n      no: parseInt(split[0], 10) || null,\n      of: parseInt(split[1], 10) || null\n    };\n  }\n  /**\n   * Process and set common tags\n   * write common tags to\n   * @param tag Native tag\n   * @param warnings Register warnings\n   * @return common name\n   */\n\n\n  mapGenericTag(tag, warnings) {\n    tag = {\n      id: tag.id,\n      value: tag.value\n    }; // clone object\n\n    this.postMap(tag, warnings); // Convert native tag event to generic 'alias' tag\n\n    const id = this.getCommonName(tag.id);\n    return id ? {\n      id,\n      value: tag.value\n    } : null;\n  }\n  /**\n   * Convert native tag key to common tag key\n   * @tag  Native header tag\n   * @return common tag name (alias)\n   */\n\n\n  getCommonName(tag) {\n    return this.tagMap[tag];\n  }\n  /**\n   * Handle post mapping exceptions / correction\n   * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\n   * @param {warnings} Used to register warnings\n   */\n\n\n  postMap(tag, warnings) {\n    return;\n  }\n\n}\n\nexports.CommonTagMapper = CommonTagMapper;\nCommonTagMapper.maxRatingScore = 1;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/common/GenericTagMapper.js"],"names":["Object","defineProperty","exports","value","CommonTagMapper","ID3v1Parser_1","require","constructor","tagTypes","tagMap","parseGenre","origVal","split","trim","filter","val","array","cur","test","isNaN","parseInt","Genres","push","undefined","join","toIntOrNull","str","cleaned","normalizeTrack","toString","no","of","mapGenericTag","tag","warnings","id","postMap","getCommonName","maxRatingScore"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CommonTagMapper = void 0;\nconst ID3v1Parser_1 = require(\"../id3v1/ID3v1Parser\");\nclass CommonTagMapper {\n    constructor(tagTypes, tagMap) {\n        this.tagTypes = tagTypes;\n        this.tagMap = tagMap;\n    }\n    static parseGenre(origVal) {\n        // match everything inside parentheses\n        const split = origVal.trim().split(/\\((.*?)\\)/g).filter(val => {\n            return val !== '';\n        });\n        const array = [];\n        for (let cur of split) {\n            if (/^\\d+$/.test(cur) && !isNaN(parseInt(cur, 10))) {\n                cur = ID3v1Parser_1.Genres[cur];\n            }\n            array.push(cur);\n        }\n        return array\n            .filter(val => {\n            return val !== undefined;\n        }).join('/');\n    }\n    static toIntOrNull(str) {\n        const cleaned = parseInt(str, 10);\n        return isNaN(cleaned) ? null : cleaned;\n    }\n    // TODO: a string of 1of1 would fail to be converted\n    // converts 1/10 to no : 1, of : 10\n    // or 1 to no : 1, of : 0\n    static normalizeTrack(origVal) {\n        const split = origVal.toString().split('/');\n        return {\n            no: parseInt(split[0], 10) || null,\n            of: parseInt(split[1], 10) || null\n        };\n    }\n    /**\n     * Process and set common tags\n     * write common tags to\n     * @param tag Native tag\n     * @param warnings Register warnings\n     * @return common name\n     */\n    mapGenericTag(tag, warnings) {\n        tag = { id: tag.id, value: tag.value }; // clone object\n        this.postMap(tag, warnings);\n        // Convert native tag event to generic 'alias' tag\n        const id = this.getCommonName(tag.id);\n        return id ? { id, value: tag.value } : null;\n    }\n    /**\n     * Convert native tag key to common tag key\n     * @tag  Native header tag\n     * @return common tag name (alias)\n     */\n    getCommonName(tag) {\n        return this.tagMap[tag];\n    }\n    /**\n     * Handle post mapping exceptions / correction\n     * @param {string} tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\n     * @param {warnings} Used to register warnings\n     */\n    postMap(tag, warnings) {\n        return;\n    }\n}\nexports.CommonTagMapper = CommonTagMapper;\nCommonTagMapper.maxRatingScore = 1;\n//# sourceMappingURL=GenericTagMapper.js.map"]},"metadata":{},"sourceType":"script"}