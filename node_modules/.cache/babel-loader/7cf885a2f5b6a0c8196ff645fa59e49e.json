{"ast":null,"code":"import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction BaseInput(props) {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    console.log(\"No id for\", props);\n    throw new Error(\"no id for props \".concat(_JSON$stringify(props)));\n  }\n\n  var value = props.value,\n      readonly = props.readonly,\n      disabled = props.disabled,\n      autofocus = props.autofocus,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      options = props.options,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      formContext = props.formContext,\n      registry = props.registry,\n      rawErrors = props.rawErrors,\n      inputProps = _objectWithoutProperties(props, [\"value\", \"readonly\", \"disabled\", \"autofocus\", \"onBlur\", \"onFocus\", \"options\", \"schema\", \"uiSchema\", \"formContext\", \"registry\", \"rawErrors\"]); // If options.inputType is set use that as the input type\n\n\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!inputProps.type) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\"; // Setting step to 'any' fixes a bug in Safari where decimals are not\n      // allowed in number inputs\n\n      inputProps.step = \"any\";\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\"; // Since this is integer, you always want to step up or down in multiples\n      // of 1\n\n      inputProps.step = \"1\";\n    } else {\n      inputProps.type = \"text\";\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  } // If multipleOf is defined, use this as the step value. This mainly improves\n  // the experience for keyboard users (who can use the up/down KB arrows).\n\n\n  if (schema.multipleOf) {\n    inputProps.step = schema.multipleOf;\n  }\n\n  if (typeof schema.minimum !== \"undefined\") {\n    inputProps.min = schema.minimum;\n  }\n\n  if (typeof schema.maximum !== \"undefined\") {\n    inputProps.max = schema.maximum;\n  }\n\n  var _onChange = function _onChange(_ref) {\n    var value = _ref.target.value;\n    return props.onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  return [React.createElement(\"input\", _extends({\n    key: inputProps.id,\n    className: \"form-control\",\n    readOnly: readonly,\n    disabled: disabled,\n    autoFocus: autofocus,\n    value: value == null ? \"\" : value\n  }, inputProps, {\n    list: schema.examples ? \"examples_\".concat(inputProps.id) : null,\n    onChange: _onChange,\n    onBlur: onBlur && function (event) {\n      return onBlur(inputProps.id, event.target.value);\n    },\n    onFocus: onFocus && function (event) {\n      return onFocus(inputProps.id, event.target.value);\n    }\n  })), schema.examples ? React.createElement(\"datalist\", {\n    id: \"examples_\".concat(inputProps.id)\n  }, _toConsumableArray(new _Set(schema.examples.concat(schema[\"default\"] ? [schema[\"default\"]] : []))).map(function (example) {\n    return React.createElement(\"option\", {\n      key: example,\n      value: example\n    });\n  })) : null];\n}\n\nBaseInput.defaultProps = {\n  required: false,\n  disabled: false,\n  readonly: false,\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  BaseInput.propTypes = {\n    id: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func\n  };\n}\n\nexport default BaseInput;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@rjsf/core/lib/components/widgets/BaseInput.js"],"names":["_Set","_toConsumableArray","_extends","_objectWithoutProperties","_JSON$stringify","React","PropTypes","BaseInput","props","id","console","log","Error","concat","value","readonly","disabled","autofocus","onBlur","onFocus","options","schema","uiSchema","formContext","registry","rawErrors","inputProps","inputType","type","step","autocomplete","autoComplete","multipleOf","minimum","min","maximum","max","_onChange","_ref","target","onChange","emptyValue","createElement","key","className","readOnly","autoFocus","list","examples","event","map","example","defaultProps","required","process","env","NODE_ENV","propTypes","string","isRequired","placeholder","any","bool","func"],"mappings":"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","sourcesContent":["import _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction BaseInput(props) {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    console.log(\"No id for\", props);\n    throw new Error(\"no id for props \".concat(_JSON$stringify(props)));\n  }\n\n  var value = props.value,\n      readonly = props.readonly,\n      disabled = props.disabled,\n      autofocus = props.autofocus,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      options = props.options,\n      schema = props.schema,\n      uiSchema = props.uiSchema,\n      formContext = props.formContext,\n      registry = props.registry,\n      rawErrors = props.rawErrors,\n      inputProps = _objectWithoutProperties(props, [\"value\", \"readonly\", \"disabled\", \"autofocus\", \"onBlur\", \"onFocus\", \"options\", \"schema\", \"uiSchema\", \"formContext\", \"registry\", \"rawErrors\"]); // If options.inputType is set use that as the input type\n\n\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!inputProps.type) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\"; // Setting step to 'any' fixes a bug in Safari where decimals are not\n      // allowed in number inputs\n\n      inputProps.step = \"any\";\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\"; // Since this is integer, you always want to step up or down in multiples\n      // of 1\n\n      inputProps.step = \"1\";\n    } else {\n      inputProps.type = \"text\";\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  } // If multipleOf is defined, use this as the step value. This mainly improves\n  // the experience for keyboard users (who can use the up/down KB arrows).\n\n\n  if (schema.multipleOf) {\n    inputProps.step = schema.multipleOf;\n  }\n\n  if (typeof schema.minimum !== \"undefined\") {\n    inputProps.min = schema.minimum;\n  }\n\n  if (typeof schema.maximum !== \"undefined\") {\n    inputProps.max = schema.maximum;\n  }\n\n  var _onChange = function _onChange(_ref) {\n    var value = _ref.target.value;\n    return props.onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  return [React.createElement(\"input\", _extends({\n    key: inputProps.id,\n    className: \"form-control\",\n    readOnly: readonly,\n    disabled: disabled,\n    autoFocus: autofocus,\n    value: value == null ? \"\" : value\n  }, inputProps, {\n    list: schema.examples ? \"examples_\".concat(inputProps.id) : null,\n    onChange: _onChange,\n    onBlur: onBlur && function (event) {\n      return onBlur(inputProps.id, event.target.value);\n    },\n    onFocus: onFocus && function (event) {\n      return onFocus(inputProps.id, event.target.value);\n    }\n  })), schema.examples ? React.createElement(\"datalist\", {\n    id: \"examples_\".concat(inputProps.id)\n  }, _toConsumableArray(new _Set(schema.examples.concat(schema[\"default\"] ? [schema[\"default\"]] : []))).map(function (example) {\n    return React.createElement(\"option\", {\n      key: example,\n      value: example\n    });\n  })) : null];\n}\n\nBaseInput.defaultProps = {\n  required: false,\n  disabled: false,\n  readonly: false,\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  BaseInput.propTypes = {\n    id: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    value: PropTypes.any,\n    required: PropTypes.bool,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    autofocus: PropTypes.bool,\n    onChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onFocus: PropTypes.func\n  };\n}\n\nexport default BaseInput;"]},"metadata":{},"sourceType":"module"}