{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TheoraParser = void 0;\n\nconst initDebug = require(\"debug\");\n\nconst Theora_1 = require(\"./Theora\");\n\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n *   https://theora.org/doc/Theora.pdf\n */\n\nclass TheoraParser {\n  constructor(metadata, options, tokenizer) {\n    this.metadata = metadata;\n    this.tokenizer = tokenizer;\n  }\n  /**\n   * Vorbis 1 parser\n   * @param header Ogg Page Header\n   * @param pageData Page data\n   */\n\n\n  parsePage(header, pageData) {\n    if (header.headerType.firstPage) {\n      this.parseFirstPage(header, pageData);\n    }\n  }\n\n  flush() {\n    debug('flush');\n  }\n\n  calculateDuration(header) {\n    debug('duration calculation not implemented');\n  }\n  /**\n   * Parse first Theora Ogg page. the initial identification header packet\n   * @param {IPageHeader} header\n   * @param {Buffer} pageData\n   */\n\n\n  parseFirstPage(header, pageData) {\n    debug('First Ogg/Theora page');\n    this.metadata.setFormat('codec', 'Theora');\n    const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);\n    this.metadata.setFormat('bitrate', idHeader.nombr);\n  }\n\n}\n\nexports.TheoraParser = TheoraParser;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/ogg/theora/TheoraParser.js"],"names":["Object","defineProperty","exports","value","TheoraParser","initDebug","require","Theora_1","debug","constructor","metadata","options","tokenizer","parsePage","header","pageData","headerType","firstPage","parseFirstPage","flush","calculateDuration","setFormat","idHeader","IdentificationHeader","get","nombr"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,YAAR,GAAuB,KAAK,CAA5B;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,KAAK,GAAGH,SAAS,CAAC,kCAAD,CAAvB;AACA;AACA;AACA;AACA;;AACA,MAAMD,YAAN,CAAmB;AACfK,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoBC,SAApB,EAA+B;AACtC,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKE,SAAL,GAAiBA,SAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,MAAD,EAASC,QAAT,EAAmB;AACxB,QAAID,MAAM,CAACE,UAAP,CAAkBC,SAAtB,EAAiC;AAC7B,WAAKC,cAAL,CAAoBJ,MAApB,EAA4BC,QAA5B;AACH;AACJ;;AACDI,EAAAA,KAAK,GAAG;AACJX,IAAAA,KAAK,CAAC,OAAD,CAAL;AACH;;AACDY,EAAAA,iBAAiB,CAACN,MAAD,EAAS;AACtBN,IAAAA,KAAK,CAAC,sCAAD,CAAL;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIU,EAAAA,cAAc,CAACJ,MAAD,EAASC,QAAT,EAAmB;AAC7BP,IAAAA,KAAK,CAAC,uBAAD,CAAL;AACA,SAAKE,QAAL,CAAcW,SAAd,CAAwB,OAAxB,EAAiC,QAAjC;AACA,UAAMC,QAAQ,GAAGf,QAAQ,CAACgB,oBAAT,CAA8BC,GAA9B,CAAkCT,QAAlC,EAA4C,CAA5C,CAAjB;AACA,SAAKL,QAAL,CAAcW,SAAd,CAAwB,SAAxB,EAAmCC,QAAQ,CAACG,KAA5C;AACH;;AA/Bc;;AAiCnBvB,OAAO,CAACE,YAAR,GAAuBA,YAAvB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TheoraParser = void 0;\nconst initDebug = require(\"debug\");\nconst Theora_1 = require(\"./Theora\");\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n *   https://theora.org/doc/Theora.pdf\n */\nclass TheoraParser {\n    constructor(metadata, options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n    }\n    flush() {\n        debug('flush');\n    }\n    calculateDuration(header) {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = Theora_1.IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n    }\n}\nexports.TheoraParser = TheoraParser;\n//# sourceMappingURL=TheoraParser.js.map"]},"metadata":{},"sourceType":"script"}