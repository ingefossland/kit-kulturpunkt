{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/SearchResultsDefault.js\";\nimport React, { useState, useEffect } from 'react';\nimport { getDefaultFormState } from '@kit-ui/schema/lib';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useTranslation } from 'react-i18next';\nimport ResultsList from \"./ResultsList\";\nimport ResultsGallery from \"./ResultsGallery\";\nimport ResultsUploads from \"./ResultsUploads\";\nconst templates = {\n  \"list\": ResultsList,\n  \"gallery\": ResultsGallery,\n  \"uploads\": ResultsUploads\n};\n\nconst SearchResultsDefault = ({\n  schema,\n  formData,\n  onChange,\n  query = {},\n  results = {},\n  layout = \"list\",\n  ...props\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation(['dialog']); // schema\n\n  let itemSchema;\n\n  if (schema.type === \"array\") {\n    itemSchema = schema.items;\n  } else {\n    itemSchema = schema;\n  } // set selected\n\n\n  const [modelsSelected, setModelsSelected] = useState([]);\n\n  const getSelected = formData => {\n    let items = [];\n\n    if (schema.type === \"array\") {\n      items = formData;\n    } else {\n      items = [formData];\n    }\n\n    const selected = items.map(({\n      uniqueId\n    }) => {\n      return uniqueId;\n    });\n    setModelsSelected(selected);\n  };\n\n  useEffect(() => {\n    getSelected(formData);\n  }, [formData]); // change\n\n  const handleChange = formData => {\n    const newFormData = getDefaultFormState(schema, formData);\n    onChange(newFormData);\n    getSelected(newFormData);\n  }; // add\n\n\n  const addModel = model => {\n    const item = getDefaultFormState(itemSchema, {\n      uniqueId: model.uniqueId,\n      model: model\n    });\n    let newFormData;\n\n    if (schema.type === \"array\") {\n      newFormData = [].concat(formData, item);\n    } else {\n      newFormData = item;\n    }\n\n    handleChange(newFormData);\n  };\n\n  const handleAdd = model => {\n    addModel(model);\n  }; // remove\n\n\n  const removeItem = ({\n    uniqueId\n  }) => {\n    return formData.filter(item => item.uniqueId !== uniqueId);\n  };\n\n  const handleRemove = model => {\n    const uniqueId = model && model.uniqueId;\n    console.log('remove', model);\n    let newFormData;\n\n    if (schema.type === \"array\") {\n      newFormData = removeItem({\n        uniqueId\n      });\n    } else {\n      newFormData = getDefaultFormState(itemSchema, {\n        uniqueId: undefined\n      });\n    }\n\n    handleChange(newFormData);\n  }; // get template\n\n\n  const ResultsTemplate = templates && templates[layout];\n\n  if (!ResultsTemplate) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"No template for \", layout);\n  }\n\n  return /*#__PURE__*/React.createElement(ResultsTemplate, Object.assign({}, props, {\n    results: { ...results,\n      selected: modelsSelected\n    },\n    query: query,\n    onAdd: handleAdd,\n    onRemove: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nconst mapStateToProps = state => {\n  return {\n    searchById: state.searchById,\n    uploadById: state.uploadById\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResultsDefault);","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/SearchResultsDefault.js"],"names":["React","useState","useEffect","getDefaultFormState","connect","bindActionCreators","useTranslation","ResultsList","ResultsGallery","ResultsUploads","templates","SearchResultsDefault","schema","formData","onChange","query","results","layout","props","t","i18n","itemSchema","type","items","modelsSelected","setModelsSelected","getSelected","selected","map","uniqueId","handleChange","newFormData","addModel","model","item","concat","handleAdd","removeItem","filter","handleRemove","console","log","undefined","ResultsTemplate","mapDispatchToProps","dispatch","mapStateToProps","state","searchById","uploadById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,SAAS,GAAG;AACd,UAAQH,WADM;AAEd,aAAWC,cAFG;AAGd,aAAWC;AAHG,CAAlB;;AAMA,MAAME,oBAAoB,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA,KAAK,GAAG,EAArC;AAAyCC,EAAAA,OAAO,GAAG,EAAnD;AAAuDC,EAAAA,MAAM,GAAG,MAAhE;AAAwE,KAAGC;AAA3E,CAAD,KAAuF;AAChH,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAcd,cAAc,CAAC,CAAC,QAAD,CAAD,CAAlC,CADgH,CAGhH;;AAEA,MAAIe,UAAJ;;AAEA,MAAIT,MAAM,CAACU,IAAP,KAAgB,OAApB,EAA6B;AACzBD,IAAAA,UAAU,GAAGT,MAAM,CAACW,KAApB;AACH,GAFD,MAEO;AACHF,IAAAA,UAAU,GAAGT,MAAb;AACH,GAX+G,CAahH;;;AAEA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCxB,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMyB,WAAW,GAAIb,QAAD,IAAc;AAC9B,QAAIU,KAAK,GAAG,EAAZ;;AAEA,QAAIX,MAAM,CAACU,IAAP,KAAgB,OAApB,EAA6B;AACzBC,MAAAA,KAAK,GAAGV,QAAR;AACH,KAFD,MAEO;AACHU,MAAAA,KAAK,GAAG,CAACV,QAAD,CAAR;AACH;;AAED,UAAMc,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAU,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAgB;AACvC,aAAOA,QAAP;AACH,KAFgB,CAAjB;AAIAJ,IAAAA,iBAAiB,CAACE,QAAD,CAAjB;AACH,GAdD;;AAgBAzB,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,WAAW,CAACb,QAAD,CAAX;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAjCgH,CAqChH;;AAEA,QAAMiB,YAAY,GAAIjB,QAAD,IAAc;AAC/B,UAAMkB,WAAW,GAAG5B,mBAAmB,CAACS,MAAD,EAASC,QAAT,CAAvC;AACAC,IAAAA,QAAQ,CAACiB,WAAD,CAAR;AACAL,IAAAA,WAAW,CAACK,WAAD,CAAX;AACH,GAJD,CAvCgH,CA6ChH;;;AAEA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,UAAMC,IAAI,GAAG/B,mBAAmB,CAACkB,UAAD,EAAa;AACzCQ,MAAAA,QAAQ,EAAEI,KAAK,CAACJ,QADyB;AAEzCI,MAAAA,KAAK,EAAEA;AAFkC,KAAb,CAAhC;AAKA,QAAIF,WAAJ;;AAEA,QAAInB,MAAM,CAACU,IAAP,KAAgB,OAApB,EAA6B;AACzBS,MAAAA,WAAW,GAAG,GAAGI,MAAH,CAAUtB,QAAV,EAAoBqB,IAApB,CAAd;AACH,KAFD,MAEO;AACHH,MAAAA,WAAW,GAAGG,IAAd;AACH;;AAEDJ,IAAAA,YAAY,CAACC,WAAD,CAAZ;AAEH,GAjBD;;AAmBA,QAAMK,SAAS,GAAIH,KAAD,IAAW;AACzBD,IAAAA,QAAQ,CAACC,KAAD,CAAR;AACH,GAFD,CAlEgH,CAsEhH;;;AAEA,QAAMI,UAAU,GAAG,CAAC;AAACR,IAAAA;AAAD,GAAD,KAAgB;AAC/B,WAAOhB,QAAQ,CAACyB,MAAT,CAAgBJ,IAAI,IAAIA,IAAI,CAACL,QAAL,KAAkBA,QAA1C,CAAP;AACH,GAFD;;AAIA,QAAMU,YAAY,GAAIN,KAAD,IAAW;AAC5B,UAAMJ,QAAQ,GAAGI,KAAK,IAAIA,KAAK,CAACJ,QAAhC;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,KAAtB;AAEA,QAAIF,WAAJ;;AAEA,QAAInB,MAAM,CAACU,IAAP,KAAgB,OAApB,EAA6B;AACzBS,MAAAA,WAAW,GAAGM,UAAU,CAAC;AAACR,QAAAA;AAAD,OAAD,CAAxB;AACH,KAFD,MAEO;AACHE,MAAAA,WAAW,GAAG5B,mBAAmB,CAACkB,UAAD,EAAa;AAC1CQ,QAAAA,QAAQ,EAAEa;AADgC,OAAb,CAAjC;AAGH;;AAEDZ,IAAAA,YAAY,CAACC,WAAD,CAAZ;AAEH,GAjBD,CA5EgH,CA+FhH;;;AAEA,QAAMY,eAAe,GAAGjC,SAAS,IAAIA,SAAS,CAACO,MAAD,CAA9C;;AAEA,MAAI,CAAC0B,eAAL,EAAsB;AAClB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoB1B,MAApB,CADJ;AAGH;;AAED,sBACI,oBAAC,eAAD,oBACQC,KADR;AAEI,IAAA,OAAO,EAAE,EACL,GAAGF,OADE;AAELW,MAAAA,QAAQ,EAAEH;AAFL,KAFb;AAMI,IAAA,KAAK,EAAET,KANX;AAOI,IAAA,KAAK,EAAEqB,SAPX;AAQI,IAAA,QAAQ,EAAEG,YARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAaH,CAtHD;;AAwHA,MAAMK,kBAAkB,GAAIC,QAAD,IACvBxC,kBAAkB,CAAC,EAAD,EAEtBwC,QAFsB,CADtB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAC,IAAAA,UAAU,EAAED,KAAK,CAACC,UADlB;AAEAC,IAAAA,UAAU,EAAEF,KAAK,CAACE;AAFlB,GAAP;AAIA,CALD;;AAOA,eAAe7C,OAAO,CAClB0C,eADkB,EAElBF,kBAFkB,CAAP,CAGbjC,oBAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getDefaultFormState } from '@kit-ui/schema/lib';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { useTranslation } from 'react-i18next';\n\nimport ResultsList from \"./ResultsList\"\nimport ResultsGallery from \"./ResultsGallery\"\nimport ResultsUploads from \"./ResultsUploads\"\n\nconst templates = {\n    \"list\": ResultsList,\n    \"gallery\": ResultsGallery,\n    \"uploads\": ResultsUploads\n}\n\nconst SearchResultsDefault = ({schema, formData, onChange, query = {}, results = {}, layout = \"list\", ...props}) => {\n    const { t, i18n } = useTranslation(['dialog']);\n\n    // schema\n\n    let itemSchema;\n\n    if (schema.type === \"array\") {\n        itemSchema = schema.items\n    } else {\n        itemSchema = schema\n    }\n\n    // set selected\n\n    const [modelsSelected, setModelsSelected] = useState([])\n\n    const getSelected = (formData) => {\n        let items = []\n\n        if (schema.type === \"array\") {\n            items = formData\n        } else {\n            items = [formData]\n        }\n\n        const selected = items.map(({uniqueId}) => { \n            return uniqueId\n        })\n\n        setModelsSelected(selected)\n    }\n\n    useEffect(() => {\n        getSelected(formData)\n    }, [formData])\n\n    // change\n\n    const handleChange = (formData) => {\n        const newFormData = getDefaultFormState(schema, formData)\n        onChange(newFormData);\n        getSelected(newFormData);\n    }\n\n    // add\n\n    const addModel = (model) => {\n\n        const item = getDefaultFormState(itemSchema, {\n            uniqueId: model.uniqueId,\n            model: model\n        })\n\n        let newFormData;\n\n        if (schema.type === \"array\") {\n            newFormData = [].concat(formData, item);\n        } else {\n            newFormData = item\n        }\n\n        handleChange(newFormData);\n\n    }\n\n    const handleAdd = (model) => {\n        addModel(model)\n    }\n\n    // remove\n\n    const removeItem = ({uniqueId}) => {\n        return formData.filter(item => item.uniqueId !== uniqueId)\n    }\n    \n    const handleRemove = (model) => {\n        const uniqueId = model && model.uniqueId\n\n        console.log('remove', model)\n\n        let newFormData;\n\n        if (schema.type === \"array\") {\n            newFormData = removeItem({uniqueId})\n        } else {\n            newFormData = getDefaultFormState(itemSchema, {\n                uniqueId: undefined,\n            })\n        }\n\n        handleChange(newFormData);\n\n    }\n\n    // get template\n\n    const ResultsTemplate = templates && templates[layout]\n\n    if (!ResultsTemplate) {\n        return (\n            <p>No template for {layout}</p>\n        )\n    }\n\n    return (\n        <ResultsTemplate \n            {...props}\n            results={{\n                ...results,\n                selected: modelsSelected\n            }}\n            query={query}\n            onAdd={handleAdd}\n            onRemove={handleRemove} />\n    )\n\n    \n}\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators({\n    }, \ndispatch);\n\nconst mapStateToProps = (state) => {\n\treturn {\n        searchById: state.searchById,\n        uploadById: state.uploadById\n\t};\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(SearchResultsDefault);"]},"metadata":{},"sourceType":"module"}