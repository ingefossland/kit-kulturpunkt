{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RandomBufferReader = void 0;\n/**\n * Provides abstract Node Buffer access via the IRandomRead interface\n */\n\nclass RandomBufferReader {\n  constructor(buf) {\n    this.buf = buf;\n    this.fileSize = buf.length;\n  }\n  /**\n   * Read from a given position of an abstracted file or buffer.\n   * @param buffer {Buffer} is the buffer that the data will be written to.\n   * @param offset {number} is the offset in the buffer to start writing at.\n   * @param length {number}is an integer specifying the number of bytes to read.\n   * @param position {number} is an argument specifying where to begin reading from in the file.\n   * @return {Promise<number>} bytes read\n   */\n\n\n  async randomRead(buffer, offset, length, position) {\n    return this.buf.copy(buffer, offset, position, position + length);\n  }\n\n}\n\nexports.RandomBufferReader = RandomBufferReader;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/common/RandomBufferReader.js"],"names":["Object","defineProperty","exports","value","RandomBufferReader","constructor","buf","fileSize","length","randomRead","buffer","offset","position","copy"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;AACA;AACA;AACA;;AACA,MAAMA,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgBD,GAAG,CAACE,MAApB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,QAAMC,UAAN,CAAiBC,MAAjB,EAAyBC,MAAzB,EAAiCH,MAAjC,EAAyCI,QAAzC,EAAmD;AAC/C,WAAO,KAAKN,GAAL,CAASO,IAAT,CAAcH,MAAd,EAAsBC,MAAtB,EAA8BC,QAA9B,EAAwCA,QAAQ,GAAGJ,MAAnD,CAAP;AACH;;AAfoB;;AAiBzBN,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RandomBufferReader = void 0;\n/**\n * Provides abstract Node Buffer access via the IRandomRead interface\n */\nclass RandomBufferReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.fileSize = buf.length;\n    }\n    /**\n     * Read from a given position of an abstracted file or buffer.\n     * @param buffer {Buffer} is the buffer that the data will be written to.\n     * @param offset {number} is the offset in the buffer to start writing at.\n     * @param length {number}is an integer specifying the number of bytes to read.\n     * @param position {number} is an argument specifying where to begin reading from in the file.\n     * @return {Promise<number>} bytes read\n     */\n    async randomRead(buffer, offset, length, position) {\n        return this.buf.copy(buffer, offset, position, position + length);\n    }\n}\nexports.RandomBufferReader = RandomBufferReader;\n//# sourceMappingURL=RandomBufferReader.js.map"]},"metadata":{},"sourceType":"script"}