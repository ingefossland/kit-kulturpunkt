{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/SectionTypeSettings/SectionTypeSettings.js\";\nimport React, { forwardRef, useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport { Dropdown } from \"@kit-ui/core\";\nimport Button from '@material-ui/core/ButtonBase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SectionTypeOptions from \"./SectionTypeOptions\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    padding: theme.spacing(1.5),\n    fontFamily: \"Akkurat, sans-serif\",\n    fontSize: 12,\n    fontWeight: \"bold\",\n    lineHeight: 1\n  }\n}));\n\nconst SectionTypeSettings = ({\n  value,\n  options,\n  onChange\n}) => {\n  const {\n    variant,\n    enumOptions,\n    enumDisabled\n  } = options;\n\n  if (!value) {\n    value = enumOptions[0].value;\n  }\n\n  let label;\n  enumOptions.map(option => {\n    if (option.value === value) {\n      label = option.label;\n    }\n  });\n  const [expanded, setExpanded] = useState(false);\n  const anchorRef = useRef(null);\n\n  const _onChange = value => {\n    onChange && onChange(value);\n    setExpanded(false);\n  };\n\n  const _onToggle = event => {\n    setExpanded(prevExpanded => !prevExpanded);\n  };\n\n  const _onCollapse = event => {\n    setExpanded(false);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: classes.button,\n    onClick: _onToggle,\n    ref: anchorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, label || value), /*#__PURE__*/React.createElement(Dropdown, {\n    expanded: expanded,\n    anchorEl: anchorRef.current,\n    onClickAway: _onCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SectionTypeOptions, {\n    options: enumOptions,\n    onChange: _onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })));\n};\n\nSectionTypeSettings.defaultProps = {};\nSectionTypeSettings.propTypes = {};\nSectionTypeSettings.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"SectionTypeSettings\"\n};\nexport default SectionTypeSettings;\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/SectionTypeSettings/SectionTypeSettings.js\"] = {\n    name: \"SectionTypeSettings\",\n    docgenInfo: SectionTypeSettings.__docgenInfo,\n    path: \"src/components/SectionTypeSettings/SectionTypeSettings.js\"\n  };\n}","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/SectionTypeSettings/SectionTypeSettings.js"],"names":["React","forwardRef","useState","useEffect","useRef","PropTypes","Dropdown","Button","makeStyles","SectionTypeOptions","useStyles","theme","button","padding","spacing","fontFamily","fontSize","fontWeight","lineHeight","SectionTypeSettings","value","options","onChange","variant","enumOptions","enumDisabled","label","map","option","expanded","setExpanded","anchorRef","_onChange","_onToggle","event","prevExpanded","_onCollapse","classes","current","defaultProps","propTypes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,OAAOC,MAAP,MAAmB,8BAAnB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACnCC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAEF,KAAK,CAACG,OAAN,CAAc,GAAd,CADL;AAEJC,IAAAA,UAAU,EAAE,qBAFR;AAGJC,IAAAA,QAAQ,EAAE,EAHN;AAIJC,IAAAA,UAAU,EAAE,MAJR;AAKJC,IAAAA,UAAU,EAAE;AALR;AAD2B,CAAL,CAAN,CAA5B;;AAWA,MAAMC,mBAAmB,GAAG,CAAC;AACzBC,EAAAA,KADyB;AAEzBC,EAAAA,OAFyB;AAGzBC,EAAAA;AAHyB,CAAD,KAItB;AAEF,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,WAFE;AAGFC,IAAAA;AAHE,MAIFJ,OAJJ;;AAMA,MAAI,CAACD,KAAL,EAAY;AACRA,IAAAA,KAAK,GAAGI,WAAW,CAAC,CAAD,CAAX,CAAeJ,KAAvB;AACH;;AAED,MAAIM,KAAJ;AAEAF,EAAAA,WAAW,CAACG,GAAZ,CAAiBC,MAAM,IAAI;AACvB,QAAIA,MAAM,CAACR,KAAP,KAAiBA,KAArB,EAA4B;AACxBM,MAAAA,KAAK,GAAGE,MAAM,CAACF,KAAf;AACH;AACJ,GAJD;AAMA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM6B,SAAS,GAAG3B,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAM4B,SAAS,GAAIZ,KAAD,IAAW;AACzBE,IAAAA,QAAQ,IAAIA,QAAQ,CAACF,KAAD,CAApB;AACAU,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAHD;;AAKA,QAAMG,SAAS,GAAIC,KAAD,IAAW;AACzBJ,IAAAA,WAAW,CAACK,YAAY,IAAI,CAACA,YAAlB,CAAX;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAIF,KAAD,IAAW;AAC3BJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFD;;AAIA,QAAMO,OAAO,GAAG3B,SAAS,EAAzB;AAEA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAE2B,OAAO,CAACzB,MAA3B;AAAmC,IAAA,OAAO,EAAEqB,SAA5C;AAAuD,IAAA,GAAG,EAAEF,SAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwEL,KAAK,IAAIN,KAAjF,CADJ,eAEI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAES,QAApB;AAA8B,IAAA,QAAQ,EAAEE,SAAS,CAACO,OAAlD;AAA2D,IAAA,WAAW,EAAEF,WAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,kBAAD;AAAoB,IAAA,OAAO,EAAEZ,WAA7B;AAA0C,IAAA,QAAQ,EAAEQ,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CADJ;AASH,CAnDD;;AAqDAb,mBAAmB,CAACoB,YAApB,GAAmC,EAAnC;AAGApB,mBAAmB,CAACqB,SAApB,GAAgC,EAAhC;;;;;;AAGA,eAAerB,mBAAf","sourcesContent":["import React, { forwardRef, useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\"\nimport { Dropdown } from \"@kit-ui/core\"\n\nimport Button from '@material-ui/core/ButtonBase';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport SectionTypeOptions from \"./SectionTypeOptions\"\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        padding: theme.spacing(1.5),\n        fontFamily: \"Akkurat, sans-serif\",\n        fontSize: 12,\n        fontWeight: \"bold\",\n        lineHeight: 1,\n    }\n}));\n\n\nconst SectionTypeSettings = ({\n    value, \n    options,\n    onChange\n}) => {\n\n    const {\n        variant,\n        enumOptions,\n        enumDisabled\n    } = options;\n\n    if (!value) {\n        value = enumOptions[0].value\n    }\n\n    let label\n\n    enumOptions.map((option => {\n        if (option.value === value) {\n            label = option.label\n        }\n    }))\n    \n    const [expanded, setExpanded] = useState(false);\n    const anchorRef = useRef(null)\n\n    const _onChange = (value) => {\n        onChange && onChange(value)\n        setExpanded(false)\n    }\n\n    const _onToggle = (event) => {\n        setExpanded(prevExpanded => !prevExpanded);\n    }\n\n    const _onCollapse = (event) => {\n        setExpanded(false);\n    };\n\n    const classes = useStyles()\n\n    return (\n        <React.Fragment>\n            <Button className={classes.button} onClick={_onToggle} ref={anchorRef}>{label ||Â value}</Button>\n            <Dropdown expanded={expanded} anchorEl={anchorRef.current} onClickAway={_onCollapse}>\n                <SectionTypeOptions options={enumOptions} onChange={_onChange} />\n            </Dropdown>\n        </React.Fragment>\n    )\n\n}\n\nSectionTypeSettings.defaultProps = {\n}\n\nSectionTypeSettings.propTypes = {\n}\n\nexport default SectionTypeSettings;"]},"metadata":{},"sourceType":"module"}