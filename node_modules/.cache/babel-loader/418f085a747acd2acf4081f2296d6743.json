{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Admin/DocumentEditor.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAppLayout } from '../redux/app';\nimport { editModel, saveModel } from '../redux/editor';\nimport qs from 'query-string';\nimport Editor from \"../Editor/Editor\";\nimport EditorLoader from \"../Editor/EditorLoader\";\nimport schemasByName from \"../schemas/schemasByName\";\nimport { utils } from '@kit-ui/schema';\nconst {\n  getUiPreview,\n  getDefaultFormState\n} = utils;\n\nconst DocumentEditor = props => {\n  const {\n    uniqueId,\n    documentType\n  } = props.match.params;\n  const dispatch = useDispatch(); // new or create doc\n\n  const app = useSelector(state => state.app);\n  useEffect(() => {\n    const {\n      pathname,\n      search\n    } = props.location;\n    const sq = search && qs.parse(search) || {};\n    documentType && dispatch(editModel({\n      collectionId: app.collectionId,\n      schemaId: 1,\n      locale: \"no\",\n      documentType: documentType,\n      content: sq.content && JSON.parse(sq.content) || {}\n    }));\n  }, [documentType]);\n  useEffect(() => {\n    uniqueId && dispatch(editModel({\n      uniqueId: uniqueId\n    }));\n  }, [uniqueId]); // uniqueId has changed, update location\n\n  const _onHistory = uniqueId => {\n    const {\n      path,\n      params\n    } = props.match;\n    const {\n      hash,\n      search\n    } = props.location;\n    let location = path;\n\n    if (hash) {\n      location = location + hash;\n    }\n\n    for (let key in params) {\n      let value;\n\n      if (key === \"uniqueId\") {\n        value = uniqueId;\n      } else if (key === \"documentType\") {\n        value = uniqueId;\n      } else {\n        value = params[key];\n      }\n\n      if (value) {\n        location = location.replace(':' + key + \"*\", value);\n        location = location.replace(':' + key, value);\n      } else {\n        location = location.replace(':' + key + \"*\", '');\n        location = location.replace(':' + key, '');\n      }\n\n      location = location.replace(\"//\", \"/\");\n    }\n\n    location = location.replace(\"new\", \"edit\");\n    props.history.replace(location);\n  };\n\n  const editor = useSelector(state => state.editor); // set formContext\n\n  const _onBack = () => {\n    props.history.goBack();\n  };\n\n  const _onSelect = ({\n    url\n  }) => {\n    url && props.history.push(url);\n  };\n\n  const _onEditReference = ({\n    id,\n    formData: {\n      referenceId,\n      reference: {\n        documentType\n      }\n    }\n  }) => {\n    const referenceUrl = app.root + \"/\" + referenceId + \"/edit/#\" + id;\n    props.history.push({\n      pathname: referenceUrl,\n      search: \"?backUrl=\" + props.location.pathname + \"&backId=\" + id\n    });\n  };\n\n  const formContext = {\n    isLoading: editor && editor.isLoading,\n    isSaving: editor && editor.isSaving,\n    id: editor && editor.id,\n    uniqueId: editor && editor.uniqueId,\n    collectionId: editor && editor.collectionId,\n    parents: app && app.parents,\n    languages: app && app.languages,\n    onBack: _onBack,\n    onSelect: _onSelect,\n    onEditReference: _onEditReference\n  }; // get schemas based on documentType\n\n  const modelType = uniqueId && editor && editor.documentType || documentType;\n  const documentModel = modelType && \"documents/\" + modelType;\n  const model = schemasByName && schemasByName[documentModel];\n  const schema = model && model.schema;\n  const uiSchema = model && model.uiSchema; // submit\n\n  const collectionId = useSelector(state => state.app.collectionId);\n\n  const _onSubmit = ({\n    formData\n  }) => {\n    const uiPreview = getUiPreview({\n      schema,\n      uiSchema,\n      formData\n    });\n    formData = { ...formData,\n      ...uiPreview,\n      collectionId: collectionId,\n      schemaId: 1,\n      locale: \"no\"\n    };\n    dispatch(saveModel(formData));\n\n    if (documentType && !uniqueId && formData.uniqueId) {\n      _onHistory(formData.uniqueId);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(EditorLoader, {\n    formData: formData,\n    schema: schema,\n    uiSchema: uiSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editor, Object.assign({}, props, {\n    schema: schema,\n    uiSchema: uiSchema,\n    formData: editor.formData,\n    formContext: formContext,\n    preview: model && model.preview,\n    onSubmit: _onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })));\n};\n\nDocumentEditor.defaultProps = {};\nexport default DocumentEditor;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Admin/DocumentEditor.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getAppLayout","editModel","saveModel","qs","Editor","EditorLoader","schemasByName","utils","getUiPreview","getDefaultFormState","DocumentEditor","props","uniqueId","documentType","match","params","dispatch","app","state","pathname","search","location","sq","parse","collectionId","schemaId","locale","content","JSON","_onHistory","path","hash","key","value","replace","history","editor","_onBack","goBack","_onSelect","url","push","_onEditReference","id","formData","referenceId","reference","referenceUrl","root","formContext","isLoading","isSaving","parents","languages","onBack","onSelect","onEditReference","modelType","documentModel","model","schema","uiSchema","_onSubmit","uiPreview","preview","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,iBAArC;AACA,OAAOC,EAAP,MAAe,cAAf;AAEA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AAEA,OAAOC,aAAP,MAA0B,0BAA1B;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,IAAwCF,KAA9C;;AAEA,MAAMG,cAAc,GAAIC,KAAD,IAAW;AAC9B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BF,KAAK,CAACG,KAAN,CAAYC,MAA/C;AAEA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B,CAH8B,CAK9B;;AAEA,QAAMkB,GAAG,GAAGnB,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACD,GAAhB,CAAvB;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEuB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAuBT,KAAK,CAACU,QAAnC;AACA,UAAMC,EAAE,GAAGF,MAAM,IAAIjB,EAAE,CAACoB,KAAH,CAASH,MAAT,CAAV,IAA8B,EAAzC;AAEAP,IAAAA,YAAY,IAAIG,QAAQ,CAACf,SAAS,CAAC;AAC/BuB,MAAAA,YAAY,EAAEP,GAAG,CAACO,YADa;AAE/BC,MAAAA,QAAQ,EAAE,CAFqB;AAG/BC,MAAAA,MAAM,EAAE,IAHuB;AAI/Bb,MAAAA,YAAY,EAAEA,YAJiB;AAK/Bc,MAAAA,OAAO,EAAEL,EAAE,CAACK,OAAH,IAAcC,IAAI,CAACL,KAAL,CAAWD,EAAE,CAACK,OAAd,CAAd,IAAwC;AALlB,KAAD,CAAV,CAAxB;AAOH,GAXQ,EAWN,CAACd,YAAD,CAXM,CAAT;AAaAjB,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,QAAQ,IAAII,QAAQ,CAACf,SAAS,CAAC;AAACW,MAAAA,QAAQ,EAAEA;AAAX,KAAD,CAAV,CAApB;AACH,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAtB8B,CA0B9B;;AAEA,QAAMiB,UAAU,GAAIjB,QAAD,IAAc;AAE7B,UAAM;AAAEkB,MAAAA,IAAF;AAAQf,MAAAA;AAAR,QAAmBJ,KAAK,CAACG,KAA/B;AACA,UAAM;AAAEiB,MAAAA,IAAF;AAAQX,MAAAA;AAAR,QAAmBT,KAAK,CAACU,QAA/B;AAEA,QAAIA,QAAQ,GAAGS,IAAf;;AAEA,QAAIC,IAAJ,EAAU;AACNV,MAAAA,QAAQ,GAAGA,QAAQ,GAAGU,IAAtB;AACH;;AAED,SAAK,IAAIC,GAAT,IAAgBjB,MAAhB,EAAwB;AAEpB,UAAIkB,KAAJ;;AAEA,UAAID,GAAG,KAAK,UAAZ,EAAwB;AACpBC,QAAAA,KAAK,GAAGrB,QAAR;AACH,OAFD,MAEO,IAAIoB,GAAG,KAAK,cAAZ,EAA4B;AAC/BC,QAAAA,KAAK,GAAGrB,QAAR;AACH,OAFM,MAEA;AACHqB,QAAAA,KAAK,GAAGlB,MAAM,CAACiB,GAAD,CAAd;AACH;;AAED,UAAIC,KAAJ,EAAW;AACPZ,QAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,MAAIF,GAAJ,GAAQ,GAAzB,EAA8BC,KAA9B,CAAX;AACAZ,QAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,MAAIF,GAArB,EAA0BC,KAA1B,CAAX;AACH,OAHD,MAGO;AACHZ,QAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,MAAIF,GAAJ,GAAQ,GAAzB,EAA8B,EAA9B,CAAX;AACAX,QAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,MAAIF,GAArB,EAA0B,EAA1B,CAAX;AACH;;AAEDX,MAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,IAAjB,EAAuB,GAAvB,CAAX;AAEH;;AAEDb,IAAAA,QAAQ,GAAGA,QAAQ,CAACa,OAAT,CAAiB,KAAjB,EAAwB,MAAxB,CAAX;AACAvB,IAAAA,KAAK,CAACwB,OAAN,CAAcD,OAAd,CAAsBb,QAAtB;AAEH,GAtCD;;AAwCA,QAAMe,MAAM,GAAGtC,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACkB,MAAhB,CAA1B,CApE8B,CAsE9B;;AAEA,QAAMC,OAAO,GAAG,MAAM;AAClB1B,IAAAA,KAAK,CAACwB,OAAN,CAAcG,MAAd;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAW;AACzBA,IAAAA,GAAG,IAAI7B,KAAK,CAACwB,OAAN,CAAcM,IAAd,CAAmBD,GAAnB,CAAP;AACH,GAFD;;AAIA,QAAME,gBAAgB,GAAG,CAAC;AAACC,IAAAA,EAAD;AAAKC,IAAAA,QAAQ,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,SAAS,EAAE;AAAEjC,QAAAA;AAAF;AAA1B;AAAf,GAAD,KAAkE;AAEvF,UAAMkC,YAAY,GAAG9B,GAAG,CAAC+B,IAAJ,GAAW,GAAX,GAAiBH,WAAjB,GAA+B,SAA/B,GAA2CF,EAAhE;AAEAhC,IAAAA,KAAK,CAACwB,OAAN,CAAcM,IAAd,CAAmB;AACftB,MAAAA,QAAQ,EAAE4B,YADK;AAEf3B,MAAAA,MAAM,EAAE,cAAcT,KAAK,CAACU,QAAN,CAAeF,QAA7B,GAAwC,UAAxC,GAAqDwB;AAF9C,KAAnB;AAMH,GAVD;;AAYA,QAAMM,WAAW,GAAG;AAChBC,IAAAA,SAAS,EAAEd,MAAM,IAAIA,MAAM,CAACc,SADZ;AAEhBC,IAAAA,QAAQ,EAAEf,MAAM,IAAIA,MAAM,CAACe,QAFX;AAGhBR,IAAAA,EAAE,EAAEP,MAAM,IAAIA,MAAM,CAACO,EAHL;AAIhB/B,IAAAA,QAAQ,EAAEwB,MAAM,IAAIA,MAAM,CAACxB,QAJX;AAKhBY,IAAAA,YAAY,EAAEY,MAAM,IAAIA,MAAM,CAACZ,YALf;AAMhB4B,IAAAA,OAAO,EAAEnC,GAAG,IAAIA,GAAG,CAACmC,OANJ;AAOhBC,IAAAA,SAAS,EAAEpC,GAAG,IAAIA,GAAG,CAACoC,SAPN;AAQhBC,IAAAA,MAAM,EAAEjB,OARQ;AAShBkB,IAAAA,QAAQ,EAAEhB,SATM;AAUhBiB,IAAAA,eAAe,EAAEd;AAVD,GAApB,CA5F8B,CAyG9B;;AAEA,QAAMe,SAAS,GAAG7C,QAAQ,IAAIwB,MAAZ,IAAsBA,MAAM,CAACvB,YAA7B,IAA6CA,YAA/D;AACA,QAAM6C,aAAa,GAAGD,SAAS,IAAI,eAAaA,SAAhD;AACA,QAAME,KAAK,GAAGrD,aAAa,IAAIA,aAAa,CAACoD,aAAD,CAA5C;AAEA,QAAME,MAAM,GAAGD,KAAK,IAAIA,KAAK,CAACC,MAA9B;AACA,QAAMC,QAAQ,GAAGF,KAAK,IAAIA,KAAK,CAACE,QAAhC,CAhH8B,CAkH9B;;AAEA,QAAMrC,YAAY,GAAG1B,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACD,GAAN,CAAUO,YAApB,CAAhC;;AAEA,QAAMsC,SAAS,GAAG,CAAC;AAAClB,IAAAA;AAAD,GAAD,KAAgB;AAE9B,UAAMmB,SAAS,GAAGvD,YAAY,CAAC;AAACoD,MAAAA,MAAD;AAASC,MAAAA,QAAT;AAAmBjB,MAAAA;AAAnB,KAAD,CAA9B;AAEAA,IAAAA,QAAQ,GAAG,EACP,GAAGA,QADI;AAEP,SAAGmB,SAFI;AAGPvC,MAAAA,YAAY,EAAEA,YAHP;AAIPC,MAAAA,QAAQ,EAAE,CAJH;AAKPC,MAAAA,MAAM,EAAE;AALD,KAAX;AAQAV,IAAAA,QAAQ,CAACd,SAAS,CAAC0C,QAAD,CAAV,CAAR;;AAEA,QAAI/B,YAAY,IAAI,CAACD,QAAjB,IAA6BgC,QAAQ,CAAChC,QAA1C,EAAoD;AAChDiB,MAAAA,UAAU,CAACe,QAAQ,CAAChC,QAAV,CAAV;AACH;AAEJ,GAlBD;;AAqBA,sBACI,oBAAC,YAAD;AAAc,IAAA,QAAQ,EAAEgC,QAAxB;AAAkC,IAAA,MAAM,EAAEgB,MAA1C;AAAkD,IAAA,QAAQ,EAAEC,QAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD,oBAAYlD,KAAZ;AACI,IAAA,MAAM,EAAEiD,MADZ;AAEI,IAAA,QAAQ,EAAEC,QAFd;AAGI,IAAA,QAAQ,EAAEzB,MAAM,CAACQ,QAHrB;AAII,IAAA,WAAW,EAAEK,WAJjB;AAKI,IAAA,OAAO,EAAEU,KAAK,IAAIA,KAAK,CAACK,OAL5B;AAMI,IAAA,QAAQ,EAAEF,SANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAYH,CAvJD;;AAyJApD,cAAc,CAACuD,YAAf,GAA8B,EAA9B;AAGA,eAAevD,cAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAppLayout } from '../redux/app';\nimport { editModel, saveModel } from '../redux/editor';\nimport qs from 'query-string';\n\nimport Editor from \"../Editor/Editor\"\nimport EditorLoader from \"../Editor/EditorLoader\"\n\nimport schemasByName from \"../schemas/schemasByName\"\n\nimport { utils } from '@kit-ui/schema';\nconst { getUiPreview, getDefaultFormState } = utils\n\nconst DocumentEditor = (props) => {\n    const { uniqueId, documentType } = props.match.params\n\n    const dispatch = useDispatch()\n\n    // new or create doc\n\n    const app = useSelector(state => state.app)\n\n    useEffect(() => {\n        const { pathname, search } = props.location\n        const sq = search && qs.parse(search) || {}\n\n        documentType && dispatch(editModel({\n            collectionId: app.collectionId,\n            schemaId: 1,\n            locale: \"no\",\n            documentType: documentType,\n            content: sq.content && JSON.parse(sq.content) || {}\n        }))\n    }, [documentType])\n\n    useEffect(() => {\n        uniqueId && dispatch(editModel({uniqueId: uniqueId}))\n    }, [uniqueId])\n\n    // uniqueId has changed, update location\n\n    const _onHistory = (uniqueId) => {\n\n        const { path, params } = props.match;\n        const { hash, search } = props.location;\n        \n        let location = path;\n    \n        if (hash) {\n            location = location + hash;\n        }\n    \n        for (let key in params) {\n      \n            let value;\n          \n            if (key === \"uniqueId\") {\n                value = uniqueId\n            } else if (key === \"documentType\") {\n                value = uniqueId\n            } else {\n                value = params[key];\n            }\n\n            if (value) {\n                location = location.replace(':'+key+\"*\", value);\n                location = location.replace(':'+key, value);\n            } else {\n                location = location.replace(':'+key+\"*\", '');\n                location = location.replace(':'+key, '');\n            }\n\n            location = location.replace(\"//\", \"/\");\n\n        }\n\n        location = location.replace(\"new\", \"edit\");\n        props.history.replace(location);\n\n    }\n\n    const editor = useSelector(state => state.editor)\n\n    // set formContext\n\n    const _onBack = () => {\n        props.history.goBack()\n    }\n\n    const _onSelect = ({url}) => {\n        url && props.history.push(url)\n    }\n\n    const _onEditReference = ({id, formData: { referenceId, reference: { documentType } }}) => {\n\n        const referenceUrl = app.root + \"/\" + referenceId + \"/edit/#\" + id\n\n        props.history.push({\n            pathname: referenceUrl,\n            search: \"?backUrl=\" + props.location.pathname + \"&backId=\" + id\n        })\n        \n\n    }\n\n    const formContext = {\n        isLoading: editor && editor.isLoading,\n        isSaving: editor && editor.isSaving,\n        id: editor && editor.id,\n        uniqueId: editor && editor.uniqueId,\n        collectionId: editor && editor.collectionId,\n        parents: app && app.parents,\n        languages: app && app.languages,\n        onBack: _onBack,\n        onSelect: _onSelect,\n        onEditReference: _onEditReference\n    }\n\n    // get schemas based on documentType\n\n    const modelType = uniqueId && editor && editor.documentType || documentType\n    const documentModel = modelType && \"documents/\"+modelType \n    const model = schemasByName && schemasByName[documentModel]\n\n    const schema = model && model.schema\n    const uiSchema = model && model.uiSchema\n\n    // submit\n\n    const collectionId = useSelector(state => state.app.collectionId)\n\n    const _onSubmit = ({formData}) => {\n\n        const uiPreview = getUiPreview({schema, uiSchema, formData})\n        \n        formData = {\n            ...formData,\n            ...uiPreview,\n            collectionId: collectionId,\n            schemaId: 1,\n            locale: \"no\",\n        }\n\n        dispatch(saveModel(formData))\n\n        if (documentType && !uniqueId && formData.uniqueId) {\n            _onHistory(formData.uniqueId)\n        }\n\n    }\n\n\n    return (\n        <EditorLoader formData={formData} schema={schema} uiSchema={uiSchema}>\n            <Editor {...props}\n                schema={schema}\n                uiSchema={uiSchema}\n                formData={editor.formData}\n                formContext={formContext}\n                preview={model && model.preview}\n                onSubmit={_onSubmit} />\n        </EditorLoader>\n    )\n\n}\n\nDocumentEditor.defaultProps = {\n}\n\nexport default DocumentEditor"]},"metadata":{},"sourceType":"module"}