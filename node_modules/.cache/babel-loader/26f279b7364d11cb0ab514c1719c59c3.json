{"ast":null,"code":"import { API } from \"../settings\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport qs from 'query-string';\nimport EXIF from 'exif-js';\nimport * as mm from 'music-metadata-browser';\nconst uploadByIdSlice = createSlice({\n  name: 'upload',\n  initialState: {},\n  reducers: {\n    requestUpload(state, action) {\n      const {\n        id,\n        requested\n      } = action.payload;\n      return { ...state,\n        [id]: {\n          //                    acceptedFiles: acceptedFiles,\n          //                    rejectedFiles: rejectedFiles,\n          requested: requested,\n          received: 0,\n          count: 0,\n          resultsLoaded: []\n        }\n      };\n    },\n\n    receiveUpload(state, action) {\n      const {\n        id,\n        results\n      } = action.payload;\n      return state;\n    },\n\n    requestUploadModel(state, action) {\n      const {\n        id,\n        model\n      } = action.payload;\n      return { ...state,\n        [id]: { ...state[id] //                    received: state[id].received + 1,\n\n        }\n      };\n    },\n\n    receiveUploadModel(state, action) {\n      const {\n        id,\n        data\n      } = action.payload;\n      return { ...state,\n        [id]: { ...state[id],\n          count: state[id].count + 1,\n          resultsLoaded: [...state[id].resultsLoaded, data]\n        }\n      };\n    },\n\n    receiveUploadProgress(state, action) {\n      const {\n        id,\n        progress\n      } = action.payload;\n      return state;\n    },\n\n    receiveUploadStatus(state, action) {\n      const {\n        id,\n        status\n      } = action.payload;\n      return state;\n    }\n\n  }\n});\nexport const getUpload = ({\n  id,\n  acceptedFiles = [],\n  uploadData = {\n    status: \"upload\"\n  }\n}) => dispatch => {\n  const requested = acceptedFiles.length || 0;\n  dispatch(requestUpload({\n    id,\n    requested\n  }));\n  acceptedFiles && acceptedFiles.map((file, index) => {\n    //      dispatch(requestUploadModel({id}))\n    dispatch(getUploadUrl({\n      id,\n      file,\n      uploadData\n    }));\n  });\n};\nexport const getUploadUrl = ({\n  id,\n  file,\n  uploadData = {}\n}) => dispatch => {\n  console.log('getUploadMetadata', file);\n  const {\n    name,\n    type,\n    size\n  } = file;\n  uploadData = { ...uploadData,\n    title: uploadData.title || name,\n    filename: name,\n    mimeType: type,\n    mediaSize: size,\n    content: { ...uploadData.content,\n      title: name,\n      filename: name\n    }\n  }; // where to upload?\n\n  let url = API + '/admin/api/media/upload';\n\n  if (type.startsWith('image/')) {\n    url = url + '/image';\n  } else if (type.startsWith('video/')) {\n    url = url + '/video';\n  } else if (type.startsWith('audio/')) {\n    url = url + '/audio';\n  } else {\n    url = url + '/misc';\n  }\n\n  console.log('url', url);\n  const payload = JSON.stringify(uploadData);\n  fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json; charset=utf-8\"\n    },\n    body: payload\n  }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => dispatch(getUploadData({\n    id,\n    file,\n    data\n  })));\n};\nexport const getUploadData = ({\n  id,\n  file,\n  data\n}) => dispatch => {\n  // uniqueId + uploadUrl\n  const {\n    uniqueId,\n    uploadUrl\n  } = data;\n  dispatch(receiveUploadModel({\n    id,\n    data\n  }));\n\n  const handleStatus = (uniqueId, event) => {\n    let uploadProgress;\n\n    if (event && event.lengthComputable) {\n      uploadProgress = Math.round(event.loaded * 100 / event.total);\n    } else {\n      uploadProgress = 100;\n    }\n\n    let url = API + '/admin/api/media/upload/status/' + uniqueId;\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Accept\": \"application/json\"\n      }\n    }).then(response => response.json(), error => console.log('An error occurred.', error)).then(data => {\n      dispatch(receiveUploadStatus(uniqueId, data));\n    });\n  };\n\n  const _onProgress = event => {\n    let uploadProgress;\n\n    if (event.lengthComputable) {\n      uploadProgress = Math.round(event.loaded * 100 / event.total);\n    } else {\n      uploadProgress = 100;\n    }\n\n    console.log(\"PROGRESS\", uploadProgress); //        dispatch(receiveUploadProgress(uniqueId, uploadProgress))\n  }; // do the upload\n\n\n  let payload = new FormData();\n  payload.append('file', file);\n  var xhr = new XMLHttpRequest(); //    onLoadStart && xhr.upload.addEventListener(\"load\", (event) => _onLoadStatus(event), false);\n\n  xhr.upload.addEventListener(\"progress\", event => _onProgress(event), false); //    onAbort && xhr.upload.addEventListener(\"abort\", (event) => _onAbort(event), false);\n  //    onError && xhr.upload.addEventListener(\"error\", (event) => _onError(event), false);\n  //    onLoad && xhr.upload.addEventListener(\"load\", (event) => _onLoad(event), false);\n  //    onTimeout && xhr.upload.addEventListener(\"timeout\", (event) => _onTimeout(event), false);\n  //    onLoadEnd && xhr.upload.addEventListener(\"loadend\", (event) => _onLoadEnd(event), false);\n\n  xhr.open(\"POST\", uploadUrl);\n  xhr.send(payload); //    getUploadModel({id, file, uploadData, callback: (props) => dispatch(handleUpload(props))})\n};\nexport const {\n  requestUpload,\n  requestUploadModel,\n  receiveUploadModel,\n  receiveUploadStatus,\n  receiveUploadProgress\n} = uploadByIdSlice.actions;\nexport default uploadByIdSlice.reducer;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/redux/uploadById/uploadByIdSlice.js"],"names":["API","createSlice","qs","EXIF","mm","uploadByIdSlice","name","initialState","reducers","requestUpload","state","action","id","requested","payload","received","count","resultsLoaded","receiveUpload","results","requestUploadModel","model","receiveUploadModel","data","receiveUploadProgress","progress","receiveUploadStatus","status","getUpload","acceptedFiles","uploadData","dispatch","length","map","file","index","getUploadUrl","console","log","type","size","title","filename","mimeType","mediaSize","content","url","startsWith","JSON","stringify","fetch","method","headers","body","then","response","json","error","getUploadData","uniqueId","uploadUrl","handleStatus","event","uploadProgress","lengthComputable","Math","round","loaded","total","_onProgress","FormData","append","xhr","XMLHttpRequest","upload","addEventListener","open","send","actions","reducer"],"mappings":"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","sourcesContent":["import { API } from \"../settings\"\nimport { createSlice } from '@reduxjs/toolkit'\nimport qs from 'query-string';\n\nimport EXIF from 'exif-js';\nimport * as mm from 'music-metadata-browser';\n\n\nconst uploadByIdSlice = createSlice({\n    name: 'upload',\n    initialState: {\n    }, \n    reducers: {\n        requestUpload(state, action) {\n            const { id, requested } = action.payload\n\n            return {\n                ...state,\n                [id]: {\n//                    acceptedFiles: acceptedFiles,\n//                    rejectedFiles: rejectedFiles,\n                    requested: requested,\n                    received: 0,\n                    count: 0,\n                    resultsLoaded: []\n                }\n            }\n        },\n        receiveUpload(state, action) {\n            const { id, results } = action.payload\n\n            return state\n        },\n        requestUploadModel(state, action) {\n            const { id, model } = action.payload\n\n            return {\n                ...state,\n                [id]: {\n                    ...state[id],\n//                    received: state[id].received + 1,\n                }\n            }\n            \n        },\n        receiveUploadModel(state, action) {\n            const { id, data } = action.payload\n\n            return {\n                ...state,\n                [id]: {\n                    ...state[id],\n                    count: state[id].count + 1,\n                    resultsLoaded: [\n                        ...state[id].resultsLoaded,\n                        data\n                    ]\n                }\n            }\n        },\n        receiveUploadProgress(state, action) {\n            const { id, progress } = action.payload\n\n            return state\n            \n        },\n        receiveUploadStatus(state, action) {\n            const { id, status } = action.payload\n\n            return state\n        }\n    }\n})\n\nexport const getUpload = ({id, acceptedFiles = [], uploadData = { status: \"upload\" }}) => dispatch => {\n\n    const requested = acceptedFiles.length || 0\n\n    dispatch(requestUpload({id, requested}))\n\n    acceptedFiles && acceptedFiles.map((file, index) => {\n//      dispatch(requestUploadModel({id}))\n        dispatch(getUploadUrl({id, file, uploadData}))\n    })\n\n}\n\nexport const getUploadUrl = ({id, file, uploadData = {}}) => dispatch => {\n\n    console.log('getUploadMetadata', file)\n\n    const { name, type, size } = file\n\n    uploadData = {\n        ...uploadData,\n        title: uploadData.title || name,\n        filename: name,\n        mimeType: type,\n        mediaSize: size,\n        content: {\n            ...uploadData.content,\n            title: name,\n            filename: name\n        }\n    }\n\n    // where to upload?\n\n    let url = API + '/admin/api/media/upload';\n  \n    if (type.startsWith('image/')) {\n        url = url + '/image'\n    } else if (type.startsWith('video/')) {\n        url = url + '/video'\n    } else if (type.startsWith('audio/')) {\n        url = url + '/audio'\n    } else {\n        url = url + '/misc'\n    }\n\n    console.log('url', url);\n\n    const payload = JSON.stringify(uploadData);\n\n    fetch(url, {\n        method: \"POST\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n        body: payload\n    })\n    .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n    )\n    .then(data => dispatch(getUploadData({id, file, data})))        \n\n}\n\n\n\nexport const getUploadData = ({id, file, data}) => dispatch => {\n\n    // uniqueId + uploadUrl\n\n    const { uniqueId, uploadUrl } = data;\n\n    dispatch(receiveUploadModel({id, data}))\n\n    const handleStatus = (uniqueId, event) => {\n        let uploadProgress;\n\n        if (event && event.lengthComputable) {\n            uploadProgress = Math.round(event.loaded * 100 / event.total);\n        } else {\n            uploadProgress = 100\n        }\n    \n        let url = API + '/admin/api/media/upload/status/' + uniqueId\n    \n        fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n            },\n        })\n        .then(\n            response => response.json(),\n            error => console.log('An error occurred.', error)\n        )\n        .then(data => {\n            dispatch(receiveUploadStatus(uniqueId, data))\n        })\n\n    }\n\n    const _onProgress = (event) => {\n        let uploadProgress;\n\n        if (event.lengthComputable) {\n            uploadProgress = Math.round(event.loaded * 100 / event.total);\n        } else {\n            uploadProgress = 100\n        }\n\n        console.log(\"PROGRESS\", uploadProgress)\n    \n//        dispatch(receiveUploadProgress(uniqueId, uploadProgress))\n    \n    }\n\n\n    // do the upload\n\n    let payload = new FormData();\n    payload.append('file', file);\n\n    var xhr = new XMLHttpRequest();\n//    onLoadStart && xhr.upload.addEventListener(\"load\", (event) => _onLoadStatus(event), false);\n        xhr.upload.addEventListener(\"progress\", (event) => _onProgress(event), false);\n//    onAbort && xhr.upload.addEventListener(\"abort\", (event) => _onAbort(event), false);\n//    onError && xhr.upload.addEventListener(\"error\", (event) => _onError(event), false);\n//    onLoad && xhr.upload.addEventListener(\"load\", (event) => _onLoad(event), false);\n//    onTimeout && xhr.upload.addEventListener(\"timeout\", (event) => _onTimeout(event), false);\n//    onLoadEnd && xhr.upload.addEventListener(\"loadend\", (event) => _onLoadEnd(event), false);\n    xhr.open(\"POST\", uploadUrl);\n    xhr.send(payload);\n\n\n//    getUploadModel({id, file, uploadData, callback: (props) => dispatch(handleUpload(props))})\n\n}\n\n\n\nexport const { requestUpload, requestUploadModel, receiveUploadModel, receiveUploadStatus, receiveUploadProgress } = uploadByIdSlice.actions\nexport default uploadByIdSlice.reducer"]},"metadata":{},"sourceType":"module"}