{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Admin/MediaEditor.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAppLayout } from '../redux/app';\nimport { editModel, saveModel } from '../redux/editor';\nimport Editor from \"../Editor/Editor\";\nimport EditorLoader from \"../Editor/EditorLoader\";\nimport MediaPreview from \"./MediaPreview\";\nimport schemasByName from \"../schemas/schemasByName\";\nimport { utils } from '@kit-ui/schema';\nconst {\n  getUiPreview,\n  getDefaultFormState\n} = utils;\n\nconst MediaEditor = props => {\n  const {\n    uniqueId\n  } = props.match.params;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAppLayout(\"editor\"));\n  }, []);\n  useEffect(() => {\n    uniqueId && dispatch(editModel({\n      modelName: \"media\",\n      uniqueId: uniqueId\n    }));\n  }, [uniqueId]);\n  const editor = useSelector(state => state.editor); // set formContext\n\n  const _onBack = () => {\n    props.history.goBack();\n  };\n\n  const _onSelect = ({\n    url\n  }) => {\n    url && props.history.push(url);\n  };\n\n  const formContext = {\n    isLoading: editor && editor.isLoading,\n    isSaving: editor && editor.isSaving,\n    parents: useSelector(state => state.app.parents),\n    onBack: _onBack,\n    onSelect: _onSelect\n  }; // get schemas based on documentType\n\n  const mediaType = uniqueId && formData && formData.mediaType;\n  const mediaModel = mediaType && \"media/\" + mediaType;\n  const model = schemasByName && schemasByName[mediaModel];\n  const schema = model && model.schema;\n  const uiSchema = model && model.uiSchema; // submit\n\n  const collectionId = useSelector(state => state.app.collectionId);\n\n  const _onSubmit = ({\n    formData\n  }) => {\n    const uiPreview = getUiPreview({\n      schema,\n      uiSchema,\n      formData\n    });\n    formData = { ...formData,\n      ...uiPreview,\n      modelName: \"media\",\n      collectionId: collectionId,\n      schemaId: 1,\n      locale: \"no\"\n    };\n    dispatch(saveModel(formData));\n  };\n\n  return /*#__PURE__*/React.createElement(EditorLoader, {\n    formData: formData,\n    schema: schema,\n    uiSchema: uiSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Editor, Object.assign({}, props, {\n    schema: schema,\n    uiSchema: uiSchema,\n    formData: formData,\n    formContext: formContext,\n    preview: {\n      template: MediaPreview\n    },\n    onSubmit: _onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  })));\n};\n\nMediaEditor.defaultProps = {};\nexport default MediaEditor;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Admin/MediaEditor.js"],"names":["React","useEffect","useState","useSelector","useDispatch","getAppLayout","editModel","saveModel","Editor","EditorLoader","MediaPreview","schemasByName","utils","getUiPreview","getDefaultFormState","MediaEditor","props","uniqueId","match","params","dispatch","modelName","editor","state","_onBack","history","goBack","_onSelect","url","push","formContext","isLoading","isSaving","parents","app","onBack","onSelect","mediaType","formData","mediaModel","model","schema","uiSchema","collectionId","_onSubmit","uiPreview","schemaId","locale","template","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAppLayout } from '../redux/app';\nimport { editModel, saveModel } from '../redux/editor';\n\nimport Editor from \"../Editor/Editor\"\nimport EditorLoader from \"../Editor/EditorLoader\"\n\nimport MediaPreview from \"./MediaPreview\"\n\nimport schemasByName from \"../schemas/schemasByName\"\n\nimport { utils } from '@kit-ui/schema';\nconst { getUiPreview, getDefaultFormState } = utils\n\nconst MediaEditor = (props) => {\n    const { uniqueId } = props.match.params\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getAppLayout(\"editor\"))\n    }, [])\n\n    useEffect(() => {\n        uniqueId && dispatch(editModel({modelName: \"media\", uniqueId: uniqueId}))\n    }, [uniqueId])\n\n    const editor = useSelector(state => state.editor)\n\n    // set formContext\n\n    const _onBack = () => {\n        props.history.goBack()\n    }\n\n    const _onSelect = ({url}) => {\n        url && props.history.push(url)\n    }\n\n    const formContext = {\n        isLoading: editor && editor.isLoading,\n        isSaving: editor && editor.isSaving,\n        parents: useSelector(state => state.app.parents),\n        onBack: _onBack,\n        onSelect: _onSelect,\n    }\n\n    // get schemas based on documentType\n\n    const mediaType = uniqueId && formData && formData.mediaType\n    const mediaModel = mediaType && \"media/\" + mediaType\n    const model = schemasByName && schemasByName[mediaModel]\n\n    const schema = model && model.schema\n    const uiSchema = model && model.uiSchema\n\n    // submit\n\n    const collectionId = useSelector(state => state.app.collectionId)\n\n    const _onSubmit = ({formData}) => {\n\n        const uiPreview = getUiPreview({schema, uiSchema, formData})\n        \n        formData = {\n            ...formData,\n            ...uiPreview,\n            modelName: \"media\",\n            collectionId: collectionId,\n            schemaId: 1,\n            locale: \"no\",\n        }\n\n        dispatch(saveModel(formData))\n    }\n\n\n    return (\n        <EditorLoader formData={formData} schema={schema} uiSchema={uiSchema}>\n            <Editor {...props}\n                schema={schema}\n                uiSchema={uiSchema}\n                formData={formData}\n                formContext={formContext}\n                preview={{\n                    template: MediaPreview\n                }}\n                onSubmit={_onSubmit} />\n        </EditorLoader>\n    )\n\n}\n\nMediaEditor.defaultProps = {\n}\n\nexport default MediaEditor"]},"metadata":{},"sourceType":"module"}