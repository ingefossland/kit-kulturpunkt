{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/NavSettings/GridSettings.js\";\nimport React, { useState, useRef } from 'react';\nimport { Dropdown } from \"@kit-ui/core\";\nimport Button from '@material-ui/core/Button';\nimport _ from \"lodash\";\nimport GridSettingsList from \"./GridSettingsList\";\n\nconst getOptions = ({\n  options = []\n}) => {\n  let _cols = 0,\n      _rows = 0,\n      _options = [],\n      _byValue = {};\n  options.map((item, index) => {\n    if (typeof item === \"string\") {\n      item = {\n        label: item,\n        value: item\n      };\n    }\n\n    const size = item.value;\n    const grid = size.split(':');\n    const cols = grid[0] * 1;\n    const rows = grid[1] * 1;\n\n    if (cols > _cols) {\n      _cols = cols;\n    }\n\n    if (rows > _rows) {\n      _rows = rows;\n    }\n\n    item = { ...item,\n      order: cols * rows,\n      size: size,\n      cols: cols,\n      rows: rows\n    };\n\n    _options.push(item);\n\n    _byValue[item.value] = item;\n  });\n  _options = _.orderBy(_options, 'order', 'desc');\n  return {\n    byValue: _byValue,\n    options: _options,\n    cols: _cols,\n    rows: _rows\n  };\n};\n\nconst GridSettings = ({\n  type = \"grid\",\n  name,\n  label,\n  value,\n  onChange,\n  ...props\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const anchorRef = useRef(null);\n\n  const _onToggle = event => {\n    setExpanded(prevExpanded => !prevExpanded);\n  };\n\n  const _onCollapse = event => {\n    setExpanded(false);\n  };\n\n  const {\n    options,\n    byValue,\n    cols,\n    rows\n  } = getOptions(props);\n  const current = byValue[value] || options[0];\n\n  const onSelect = item => {\n    if (onChange) {\n      onChange(name, item.value);\n    }\n\n    setExpanded(false);\n  };\n\n  const onCollapse = () => {\n    setExpanded(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: _onToggle,\n    ref: anchorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, current.label), /*#__PURE__*/React.createElement(Dropdown, {\n    expanded: expanded,\n    anchorEl: anchorRef.current,\n    onClickAway: _onCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridSettingsList, {\n    value: current && current.value,\n    cols: cols,\n    rows: rows,\n    options: options,\n    onSelect: onSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default GridSettings;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/NavSettings/GridSettings.js"],"names":["React","useState","useRef","Dropdown","Button","_","GridSettingsList","getOptions","options","_cols","_rows","_options","_byValue","map","item","index","label","value","size","grid","split","cols","rows","order","push","orderBy","byValue","GridSettings","type","name","onChange","props","expanded","setExpanded","anchorRef","_onToggle","event","prevExpanded","_onCollapse","current","onSelect","onCollapse"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\nimport { Dropdown } from \"@kit-ui/core\"\nimport Button from '@material-ui/core/Button';\nimport _ from \"lodash\"\n\nimport GridSettingsList from \"./GridSettingsList\"\n\nconst getOptions = ({options = []}) => {\n    let _cols = 0, _rows = 0, _options = [], _byValue = {};\n\n    options.map((item, index) => {\n\n        if (typeof item === \"string\") {\n            item = { label: item, value: item }\n        }\n\n        const size = item.value;\n        const grid = size.split(':');\n        const cols = grid[0] * 1\n        const rows = grid[1] * 1\n\n        if (cols > _cols) {\n            _cols = cols\n        }\n\n        if (rows > _rows) {\n            _rows = rows\n        }\n\n        item = {\n            ...item,\n            order: cols * rows,\n            size: size,\n            cols: cols,\n            rows: rows\n        }\n\n        _options.push(item)\n        _byValue[item.value] = item\n\n    })    \n\n    _options = _.orderBy(_options, 'order', 'desc'); \n\n    return {\n        byValue: _byValue,\n        options: _options,\n        cols: _cols,\n        rows: _rows,\n    }\n\n}\n\n\nconst GridSettings = ({type = \"grid\", name, label, value, onChange, ...props}) => {\n    const [expanded, setExpanded] = useState(false);\n    const anchorRef = useRef(null)\n\n    const _onToggle = (event) => {\n        setExpanded(prevExpanded => !prevExpanded);\n    }\n\n    const _onCollapse = (event) => {\n        setExpanded(false);\n    };\n\n    \n    const { options, byValue, cols, rows } = getOptions(props)\n    const current = byValue[value] || options[0]\n\n\n    const onSelect = (item) => {\n        if (onChange) {\n            onChange(name, item.value)\n        }\n        setExpanded(false);\n    }\n\n    const onCollapse = () => {\n        setExpanded(false);\n    }\n\n    return (\n        <React.Fragment>\n            <Button variant=\"outlined\" onClick={_onToggle} ref={anchorRef}>{current.label}</Button>\n            <Dropdown expanded={expanded} anchorEl={anchorRef.current} onClickAway={_onCollapse}>\n                <GridSettingsList value={current && current.value} cols={cols} rows={rows} options={options} onSelect={onSelect} />\n            </Dropdown>\n        </React.Fragment>            \n    )\n\n}\n\nexport default GridSettings;"]},"metadata":{},"sourceType":"module"}