{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Autocomplete = _interopRequireDefault(require(\"@material-ui/lab/Autocomplete\"));\n\nvar _TextField = _interopRequireDefault(require(\"@material-ui/core/TextField\"));\n\nvar _TextWidgetPrefix = _interopRequireDefault(require(\"../TextWidget/TextWidgetPrefix\"));\n\nvar _TextWidgetSuffix = _interopRequireDefault(require(\"../TextWidget/TextWidgetSuffix\"));\n\nvar _core = require(\"@rjsf/core\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar asNumber = _core.utils.asNumber,\n    guessType = _core.utils.guessType;\nvar nums = new Set([\"number\", \"integer\"]);\n/**\n * This is a silly limitation in the DOM where option change event values are\n * always retrieved as strings.\n */\n\nvar processValue = function processValue(schema, value) {\n  // \"enum\" is a reserved word, so only \"type\" and \"items\" can be destructured\n  var type = schema.type,\n      items = schema.items;\n\n  if (value === \"\") {\n    return undefined;\n  } else if (type === \"array\" && items && nums.has(items.type)) {\n    return value.map(asNumber);\n  } else if (type === \"boolean\") {\n    return value === \"true\";\n  } else if (type === \"number\") {\n    return asNumber(value);\n  } // If type is undefined, but an enum is present, try and infer the type from\n  // the enum values\n\n\n  if (schema.enum) {\n    if (schema.enum.every(function (x) {\n      return guessType(x) === \"number\";\n    })) {\n      return asNumber(value);\n    } else if (schema.enum.every(function (x) {\n      return guessType(x) === \"boolean\";\n    })) {\n      return value === \"true\";\n    }\n  }\n\n  return value;\n};\n\nfunction AutocompleteWidget(props) {\n  var schema = props.schema,\n      id = props.id,\n      options = props.options,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      multiple = props.multiple,\n      autofocus = props.autofocus,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled;\n  var emptyValue = multiple ? [] : \"\";\n  var variant = options.variant || \"filled\";\n  var label = options.title || props.title || props.label;\n  var helperText = options.help || undefined;\n\n  var _onChange = function _onChange(event, option, reason) {\n    return onChange(processValue(schema, option.value));\n  };\n\n  var _onBlur = function _onBlur(_ref) {\n    var value = _ref.target.value;\n    return onBlur(id, processValue(schema, value));\n  };\n\n  var _onFocus = function _onFocus(_ref2) {\n    var value = _ref2.target.value;\n    return onFocus(id, processValue(schema, value));\n  };\n  /*\n   const _onChange = (event, option) => {\n       console.log('OPTION', option)\n       onChange(processValue(schema, option && option.value ||Â emptyValue));\n  }*/\n\n\n  var autocompleteOptions = enumOptions.map(function (_ref3, i) {\n    var value = _ref3.value,\n        label = _ref3.label;\n    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n    return {\n      label: label,\n      value: value,\n      disabled: disabled\n    };\n  });\n  return /*#__PURE__*/_react.default.createElement(_Autocomplete.default, {\n    id: id,\n    options: autocompleteOptions //            groupBy={options.groupBy}\n    //            value={value}\n    ,\n    defaultValue: emptyValue //            value={typeof value === \"undefined\" ? emptyValue : value}\n    //            getOptionSelected={(option) => option.value === value}\n    ,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.label || option.value;\n    },\n    onChange: _onChange,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({}, params, {\n        helperText: helperText,\n        label: label,\n        variant: variant,\n        placeholder: placeholder,\n        fullWidth: true,\n        InputProps: _extends({}, params.InputProps, {\n          startAdornment: /*#__PURE__*/_react.default.createElement(_TextWidgetPrefix.default, options)\n        })\n      }));\n    }\n  });\n}\n\nAutocompleteWidget.defaultProps = {\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  AutocompleteWidget.propTypes = process.env.NODE_ENV !== \"production\" ? {\n    schema: _propTypes.default.object.isRequired,\n    id: _propTypes.default.string.isRequired,\n    options: _propTypes.default.shape({\n      enumOptions: _propTypes.default.array\n    }).isRequired,\n    value: _propTypes.default.any,\n    required: _propTypes.default.bool,\n    disabled: _propTypes.default.bool,\n    readonly: _propTypes.default.bool,\n    multiple: _propTypes.default.bool,\n    autofocus: _propTypes.default.bool,\n    onChange: _propTypes.default.func,\n    onBlur: _propTypes.default.func,\n    onFocus: _propTypes.default.func\n  } : {};\n}\n\nvar _default = AutocompleteWidget;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@kit-ui/schema/lib/AutocompleteWidget/AutocompleteWidget.js"],"names":["exports","__esModule","default","_react","_interopRequireDefault","require","_propTypes","_Autocomplete","_TextField","_TextWidgetPrefix","_TextWidgetSuffix","_core","obj","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","asNumber","utils","guessType","nums","Set","processValue","schema","value","type","items","undefined","has","map","enum","every","x","AutocompleteWidget","props","id","options","required","disabled","readonly","multiple","autofocus","onChange","onBlur","onFocus","placeholder","enumOptions","enumDisabled","emptyValue","variant","label","title","helperText","help","_onChange","event","option","reason","_onBlur","_ref","_onFocus","_ref2","autocompleteOptions","_ref3","indexOf","createElement","defaultValue","getOptionLabel","renderInput","params","fullWidth","InputProps","startAdornment","defaultProps","process","env","NODE_ENV","propTypes","object","isRequired","string","shape","array","any","bool","func","_default","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Autocomplete = _interopRequireDefault(require(\"@material-ui/lab/Autocomplete\"));\n\nvar _TextField = _interopRequireDefault(require(\"@material-ui/core/TextField\"));\n\nvar _TextWidgetPrefix = _interopRequireDefault(require(\"../TextWidget/TextWidgetPrefix\"));\n\nvar _TextWidgetSuffix = _interopRequireDefault(require(\"../TextWidget/TextWidgetSuffix\"));\n\nvar _core = require(\"@rjsf/core\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar asNumber = _core.utils.asNumber,\n    guessType = _core.utils.guessType;\nvar nums = new Set([\"number\", \"integer\"]);\n/**\n * This is a silly limitation in the DOM where option change event values are\n * always retrieved as strings.\n */\n\nvar processValue = function processValue(schema, value) {\n  // \"enum\" is a reserved word, so only \"type\" and \"items\" can be destructured\n  var type = schema.type,\n      items = schema.items;\n\n  if (value === \"\") {\n    return undefined;\n  } else if (type === \"array\" && items && nums.has(items.type)) {\n    return value.map(asNumber);\n  } else if (type === \"boolean\") {\n    return value === \"true\";\n  } else if (type === \"number\") {\n    return asNumber(value);\n  } // If type is undefined, but an enum is present, try and infer the type from\n  // the enum values\n\n\n  if (schema.enum) {\n    if (schema.enum.every(function (x) {\n      return guessType(x) === \"number\";\n    })) {\n      return asNumber(value);\n    } else if (schema.enum.every(function (x) {\n      return guessType(x) === \"boolean\";\n    })) {\n      return value === \"true\";\n    }\n  }\n\n  return value;\n};\n\nfunction AutocompleteWidget(props) {\n  var schema = props.schema,\n      id = props.id,\n      options = props.options,\n      value = props.value,\n      required = props.required,\n      disabled = props.disabled,\n      readonly = props.readonly,\n      multiple = props.multiple,\n      autofocus = props.autofocus,\n      onChange = props.onChange,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder;\n  var enumOptions = options.enumOptions,\n      enumDisabled = options.enumDisabled;\n  var emptyValue = multiple ? [] : \"\";\n  var variant = options.variant || \"filled\";\n  var label = options.title || props.title || props.label;\n  var helperText = options.help || undefined;\n\n  var _onChange = function _onChange(event, option, reason) {\n    return onChange(processValue(schema, option.value));\n  };\n\n  var _onBlur = function _onBlur(_ref) {\n    var value = _ref.target.value;\n    return onBlur(id, processValue(schema, value));\n  };\n\n  var _onFocus = function _onFocus(_ref2) {\n    var value = _ref2.target.value;\n    return onFocus(id, processValue(schema, value));\n  };\n  /*\n   const _onChange = (event, option) => {\n       console.log('OPTION', option)\n       onChange(processValue(schema, option && option.value ||Â emptyValue));\n  }*/\n\n\n  var autocompleteOptions = enumOptions.map(function (_ref3, i) {\n    var value = _ref3.value,\n        label = _ref3.label;\n    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;\n    return {\n      label: label,\n      value: value,\n      disabled: disabled\n    };\n  });\n  return /*#__PURE__*/_react.default.createElement(_Autocomplete.default, {\n    id: id,\n    options: autocompleteOptions //            groupBy={options.groupBy}\n    //            value={value}\n    ,\n    defaultValue: emptyValue //            value={typeof value === \"undefined\" ? emptyValue : value}\n    //            getOptionSelected={(option) => option.value === value}\n    ,\n    getOptionLabel: function getOptionLabel(option) {\n      return option.label || option.value;\n    },\n    onChange: _onChange,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({}, params, {\n        helperText: helperText,\n        label: label,\n        variant: variant,\n        placeholder: placeholder,\n        fullWidth: true,\n        InputProps: _extends({}, params.InputProps, {\n          startAdornment: /*#__PURE__*/_react.default.createElement(_TextWidgetPrefix.default, options)\n        })\n      }));\n    }\n  });\n}\n\nAutocompleteWidget.defaultProps = {\n  autofocus: false\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  AutocompleteWidget.propTypes = process.env.NODE_ENV !== \"production\" ? {\n    schema: _propTypes.default.object.isRequired,\n    id: _propTypes.default.string.isRequired,\n    options: _propTypes.default.shape({\n      enumOptions: _propTypes.default.array\n    }).isRequired,\n    value: _propTypes.default.any,\n    required: _propTypes.default.bool,\n    disabled: _propTypes.default.bool,\n    readonly: _propTypes.default.bool,\n    multiple: _propTypes.default.bool,\n    autofocus: _propTypes.default.bool,\n    onChange: _propTypes.default.func,\n    onBlur: _propTypes.default.func,\n    onFocus: _propTypes.default.func\n  } : {};\n}\n\nvar _default = AutocompleteWidget;\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}