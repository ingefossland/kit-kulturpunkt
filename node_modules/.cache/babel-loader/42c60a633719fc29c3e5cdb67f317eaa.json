{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/KpLink/KpLinkField.js\";\nimport React, { Component } from 'react';\nimport Color from 'color';\nimport model from \"./KpLink.model\";\nimport { utils } from \"@rjsf/core\";\nconst {\n  getUiOptions,\n  getDefaultFormState\n} = utils;\n\nconst KpPageLinkField = props => {\n  const {\n    formData,\n    formContext,\n    registry\n  } = props;\n  const schema = { ...model.schema,\n    ...props.schema\n  };\n  const uiSchema = { ...model.uiSchema,\n    ...props.uiSchema\n  };\n  const mediaId = formData && formData.mediaId;\n  const media = formData && formData.media;\n  const referenceId = formData && formData.referenceId;\n  const reference = formData && formData.reference;\n  const referenceTitle = reference && reference.title;\n  const imageUrl = media.imageUrl || reference.imageUrl;\n  const imageFocalpoint = formData && formData.imageFocalpoint;\n  const imageCropdata = formData && formData.imageCropdata;\n  const imageFilters = formData && formData.imageFilters;\n  const backgroundColor = formData && formData.backgroundColor;\n  const color = formData && formData.color;\n\n  const getContrastColor = hex => {\n    const color = Color(hex);\n    return color.isLight() && \"black\" || \"white\";\n  };\n\n  const handleChange = formData => {\n    if (formData.backgroundColor !== backgroundColor) {\n      formData.color = getContrastColor(formData.backgroundColor);\n    }\n\n    if (formData.color !== color) {\n      formData.titleColor = formData.color;\n    }\n\n    const newFormData = getDefaultFormState(schema, formData, registry.definitions);\n    props.onChange && props.onChange(newFormData);\n  };\n\n  const handleMediaChange = ({\n    mediaId,\n    media\n  }) => {\n    console.log('MEDIA change', media);\n    const newFormData = getDefaultFormState(schema, { ...formData,\n      mediaId: mediaId,\n      media: media\n    }, registry.definitions);\n    props.onChange && props.onChange(newFormData);\n  };\n\n  const handleUpload = ({\n    acceptedFiles = []\n  }) => {\n    formContext.onUpload && formContext.onUpload({\n      formContext,\n      schema,\n      onChange: handleMediaChange\n    }, acceptedFiles);\n  };\n\n  const handleMediaDialog = () => {\n    formContext.onDialog && formContext.onDialog({ ...props,\n      schema: schema,\n      formData: {\n        mediaId: mediaId,\n        media: media\n      },\n      query: {\n        models: \"media\",\n        mediaType: \"image\"\n      },\n      onChange: handleMediaChange\n    });\n  };\n\n  const handleReferenceChange = ({\n    referenceId,\n    reference\n  }) => {\n    const newFormData = getDefaultFormState(schema, { ...formData,\n      referenceId: referenceId,\n      reference: reference\n    }, registry.definitions);\n    props.onChange && props.onChange(newFormData);\n  };\n\n  const handleReferenceDialog = query => {\n    formContext.onDialog && formContext.onDialog({ ...props,\n      query: query,\n      onChange: handleReferenceChange\n    });\n  };\n\n  const handleDialog = dialog => {\n    handleReferenceDialog(dialog);\n  };\n\n  const handleCropdata = imageCropdata => {\n    props.onChange && props.onChange({ ...formData,\n      imageCropdata: imageCropdata\n    });\n  };\n\n  const handleFocalpoint = imageFocalpoint => {\n    props.onChange && props.onChange({ ...formData,\n      imageFocalpoint: imageFocalpoint\n    });\n  };\n\n  const handleFilters = imageFilters => {\n    props.onChange && props.onChange({ ...formData,\n      imageFilters: imageFilters\n    });\n  };\n\n  const getUiSchema = () => {\n    const uiOptions = getUiOptions(uiSchema);\n    let fieldset = [];\n    const uiPreview = {\n      \"ui:mediaId\": mediaId,\n      \"ui:media\": mediaId,\n      \"ui:referenceId\": referenceId,\n      \"ui:reference\": reference,\n      \"ui:imageUrl\": imageUrl,\n      \"ui:imageCropdata\": imageCropdata,\n      \"ui:imageFilters\": imageFilters,\n      \"ui:imageFocalpoint\": imageFocalpoint,\n      \"ui:onUpload\": handleUpload\n    };\n    let newUiSchema = {};\n\n    if (uiSchema.link) {\n      newUiSchema.link = { ...uiSchema.link,\n        ...uiPreview,\n        \"linkContent\": { ...uiSchema.link.linkContent,\n          \"title\": { ...uiSchema.link.linkContent.title,\n            \"ui:placeholder\": referenceTitle\n          }\n        }\n      };\n      fieldset.push('link');\n    }\n\n    if (uiSchema.imageCropdata && imageUrl) {\n      newUiSchema.imageCropdata = { ...uiSchema.imageCropdata,\n        ...uiPreview,\n        \"ui:onChange\": cropdata => handleCropdata(cropdata)\n      };\n      fieldset.push('imageCropdata');\n    }\n\n    if (uiSchema.imageFocalpoint && imageUrl) {\n      newUiSchema.imageFocalpoint = { ...uiSchema.imageFocalpoint,\n        ...uiPreview,\n        \"ui:onChange\": focalpoint => handleFocalpoint(focalpoint)\n      };\n      fieldset.push('imageFocalpoint');\n    }\n\n    if (uiSchema.imageFilters && imageUrl) {\n      newUiSchema.imageFilters = { ...uiSchema.imageFilters,\n        ...uiPreview,\n        \"ui:onChange\": filters => handleFilters(filters)\n      };\n      fieldset.push('imageFilters');\n    }\n\n    if (formContext.pageType === \"annotate\") {\n      newUiSchema.imageAnnotations = { ...uiSchema.imageAnnotations,\n        ...uiPreview\n      };\n      fieldset.push('imageAnnotations');\n    }\n\n    return { ...newUiSchema,\n      \"ui:options\": uiOptions,\n      \"ui:fieldset\": fieldset,\n      \"color\": {\n        \"ui:backgroundColor\": formData && formData.backgroundColor\n      },\n      \"link\": { ...newUiSchema.link,\n        \"linkContent\": { ...newUiSchema.link.linkContent,\n          \"titleColor\": {\n            \"ui:backgroundColor\": formData && formData.backgroundColor\n          }\n        }\n      }\n    };\n  };\n\n  const newRegistry = { ...registry,\n    formContext: { ...registry.formContext,\n      \"onUpload\": handleUpload,\n      \"onMediaDialog\": handleMediaDialog,\n      \"onMediaChange\": handleMediaChange,\n      \"onReferenceDialog\": handleReferenceDialog,\n      \"onReferenceChange\": handleReferenceChange\n    }\n  };\n  const newUiSchema = getUiSchema();\n  const {\n    ObjectField\n  } = registry.fields;\n  return /*#__PURE__*/React.createElement(ObjectField, Object.assign({}, props, {\n    uiSchema: newUiSchema,\n    registry: newRegistry,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default KpPageLinkField;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/KpLink/KpLinkField.js"],"names":["React","Component","Color","model","utils","getUiOptions","getDefaultFormState","KpPageLinkField","props","formData","formContext","registry","schema","uiSchema","mediaId","media","referenceId","reference","referenceTitle","title","imageUrl","imageFocalpoint","imageCropdata","imageFilters","backgroundColor","color","getContrastColor","hex","isLight","handleChange","titleColor","newFormData","definitions","onChange","handleMediaChange","console","log","handleUpload","acceptedFiles","onUpload","handleMediaDialog","onDialog","query","models","mediaType","handleReferenceChange","handleReferenceDialog","handleDialog","dialog","handleCropdata","handleFocalpoint","handleFilters","getUiSchema","uiOptions","fieldset","uiPreview","newUiSchema","link","linkContent","push","cropdata","focalpoint","filters","pageType","imageAnnotations","newRegistry","ObjectField","fields"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Color from 'color';\nimport model from \"./KpLink.model\"\n\nimport { utils } from \"@rjsf/core\"\nconst { getUiOptions, getDefaultFormState } = utils\n\n\nconst KpPageLinkField = (props) => {\n    const { formData, formContext, registry } = props\n\n\n    const schema = {\n        ...model.schema,\n        ...props.schema\n    }\n\n    const uiSchema = {\n        ...model.uiSchema,\n        ...props.uiSchema\n    }\n\n    const mediaId = formData && formData.mediaId\n    const media = formData && formData.media\n\n    const referenceId = formData && formData.referenceId\n    const reference = formData && formData.reference\n    const referenceTitle = reference && reference.title\n\n    const imageUrl = media.imageUrl || reference.imageUrl;\n    const imageFocalpoint = formData && formData.imageFocalpoint\n    const imageCropdata = formData && formData.imageCropdata\n    const imageFilters = formData && formData.imageFilters\n\n    const backgroundColor = formData && formData.backgroundColor;\n    const color = formData && formData.color;\n\n    const getContrastColor = (hex) => {\n        const color = Color(hex)\n        return color.isLight() && \"black\" || \"white\"\n    }\n\n    const handleChange = (formData) => {\n\n        if (formData.backgroundColor !== backgroundColor) {\n            formData.color = getContrastColor(formData.backgroundColor)\n        }\n\n        if (formData.color !== color) {\n            formData.titleColor = formData.color\n        }\n\n        const newFormData = getDefaultFormState(schema, formData, registry.definitions);\n        props.onChange && props.onChange(newFormData)\n    }\n\n    const handleMediaChange = ({mediaId, media}) => {\n\n        console.log('MEDIA change', media)\n\n        const newFormData = getDefaultFormState(schema, {\n            ...formData,\n            mediaId: mediaId,\n            media: media\n        }, registry.definitions);\n\n        props.onChange && props.onChange(newFormData)\n\n    }\n\n    const handleUpload = ({acceptedFiles = []}) => {\n        formContext.onUpload && formContext.onUpload({formContext, schema, onChange: handleMediaChange}, acceptedFiles)\n    }\n\n    const handleMediaDialog = () => {\n\n        formContext.onDialog && formContext.onDialog({\n            ...props,\n            schema: schema,\n            formData: {\n                mediaId: mediaId,\n                media: media\n            },\n            query: {\n                models: \"media\",\n                mediaType: \"image\"\n            },\n            onChange: handleMediaChange\n        })\n\n    }\n\n    const handleReferenceChange = ({referenceId, reference}) => {\n\n        const newFormData = getDefaultFormState(schema, {\n            ...formData,\n            referenceId: referenceId,\n            reference: reference\n        }, registry.definitions);\n\n        props.onChange && props.onChange(newFormData)\n\n    }\n\n    const handleReferenceDialog = (query) => {\n\n        formContext.onDialog && formContext.onDialog({\n            ...props,\n            query: query,\n            onChange: handleReferenceChange\n        })\n\n    }\n\n    const handleDialog = (dialog) => {\n        handleReferenceDialog(dialog)\n    }\n\n    const handleCropdata = (imageCropdata) => {\n        props.onChange && props.onChange({\n            ...formData,\n            imageCropdata: imageCropdata\n        })\n    }\n\n    const handleFocalpoint = (imageFocalpoint) => {\n        props.onChange && props.onChange({\n            ...formData,\n            imageFocalpoint: imageFocalpoint\n        })\n    }\n\n    const handleFilters = (imageFilters) => {\n        props.onChange && props.onChange({\n            ...formData,\n            imageFilters: imageFilters\n        })\n     }\n    \n    const getUiSchema = () => {\n        const uiOptions = getUiOptions(uiSchema);\n\n        let fieldset = []\n\n        const uiPreview = {\n            \"ui:mediaId\": mediaId,\n            \"ui:media\": mediaId,\n            \"ui:referenceId\": referenceId,\n            \"ui:reference\": reference,\n            \"ui:imageUrl\": imageUrl,\n            \"ui:imageCropdata\": imageCropdata,\n            \"ui:imageFilters\": imageFilters,\n            \"ui:imageFocalpoint\": imageFocalpoint,\n            \"ui:onUpload\": handleUpload,\n        }\n\n        let newUiSchema = {}\n\n        if (uiSchema.link) {\n            newUiSchema.link = {\n                ...uiSchema.link,\n                ...uiPreview,\n                \"linkContent\": {\n                    ...uiSchema.link.linkContent,\n                    \"title\": {\n                        ...uiSchema.link.linkContent.title,\n                        \"ui:placeholder\": referenceTitle,\n                    }\n                }\n            }\n\n            fieldset.push('link')\n\n        }\n\n        if (uiSchema.imageCropdata && imageUrl) {\n            newUiSchema.imageCropdata = {\n                ...uiSchema.imageCropdata,\n                ...uiPreview,\n                \"ui:onChange\": (cropdata) => handleCropdata(cropdata),\n            }\n\n            fieldset.push('imageCropdata')\n        }\n\n        if (uiSchema.imageFocalpoint && imageUrl) {\n            newUiSchema.imageFocalpoint = {\n                ...uiSchema.imageFocalpoint,\n                ...uiPreview,\n                \"ui:onChange\": (focalpoint) => handleFocalpoint(focalpoint),\n            }\n\n            fieldset.push('imageFocalpoint')\n\n        }\n\n        if (uiSchema.imageFilters && imageUrl) {\n            newUiSchema.imageFilters = {\n                ...uiSchema.imageFilters,\n                ...uiPreview,\n                \"ui:onChange\": (filters) => handleFilters(filters),\n            }\n\n            fieldset.push('imageFilters')\n        }\n\n        if (formContext.pageType === \"annotate\") {\n            newUiSchema.imageAnnotations = {\n                ...uiSchema.imageAnnotations,\n                ...uiPreview\n            }\n\n            fieldset.push('imageAnnotations')\n        }\n\n        return {\n            ...newUiSchema,\n            \"ui:options\": uiOptions,\n            \"ui:fieldset\": fieldset,\n            \"color\": {\n                \"ui:backgroundColor\": formData && formData.backgroundColor\n            },\n            \"link\": {\n                ...newUiSchema.link,\n                \"linkContent\": {\n                    ...newUiSchema.link.linkContent,\n                    \"titleColor\": {\n                        \"ui:backgroundColor\": formData && formData.backgroundColor\n                    }\n                }\n            }\n        }\n\n    }\n\n    const newRegistry = {\n        ...registry,\n        formContext: {\n            ...registry.formContext,\n            \"onUpload\": handleUpload,\n            \"onMediaDialog\": handleMediaDialog,\n            \"onMediaChange\": handleMediaChange,\n            \"onReferenceDialog\": handleReferenceDialog,\n            \"onReferenceChange\": handleReferenceChange\n        }\n    }\n\n    const newUiSchema = getUiSchema()\n\n    const { ObjectField } = registry.fields;\n\n    return (\n        <ObjectField {...props} uiSchema={newUiSchema} registry={newRegistry} onChange={handleChange} />\n    )\n\n}\n\nexport default KpPageLinkField"]},"metadata":{},"sourceType":"module"}