{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/ListSettings/ListSettings.js\";\nimport React, { forwardRef, useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\";\nimport { Dropdown } from \"@kit-ui/core\";\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport ListOptions from \"./ListOptions\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { utils } from '@kit-ui/schema';\nconst {\n  getUiOptions\n} = utils;\nconst useStyles = makeStyles(theme => ({\n  button: {\n    padding: theme.spacing(1.5),\n    fontFamily: \"Akkurat, sans-serif\",\n    fontSize: 12,\n    fontWeight: \"bold\",\n    lineHeight: 1\n  }\n}));\n\nconst ListSettings = ({\n  value,\n  options,\n  uiSchema,\n  onChange\n}) => {\n  /*\n  const {\n      variant,\n      enumOptions,\n      enumDisabled\n  } = options;\n  */\n  const uiOptions = getUiOptions(uiSchema);\n  const enumOptions = uiOptions.enumOptions || options.enumOptions.map(option => {\n    return { ...option\n    };\n  });\n\n  if (!value) {\n    value = enumOptions[0].value;\n  }\n\n  let label;\n  enumOptions.map(option => {\n    if (option.value === value) {\n      label = option.label;\n    }\n  });\n  const [expanded, setExpanded] = useState(false);\n  const anchorRef = useRef(null);\n\n  const _onChange = value => {\n    onChange && onChange(value);\n    setExpanded(false);\n  };\n\n  const _onToggle = event => {\n    setExpanded(prevExpanded => !prevExpanded);\n  };\n\n  const _onCollapse = event => {\n    setExpanded(false);\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonBase, {\n    className: classes.button,\n    onClick: _onToggle,\n    ref: anchorRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, label || value), /*#__PURE__*/React.createElement(Dropdown, {\n    expanded: expanded,\n    anchorEl: anchorRef.current,\n    onClickAway: _onCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListOptions, {\n    options: uiOptions.enumOptions || enumOptions,\n    onChange: _onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })));\n};\n\nListSettings.defaultProps = {};\nListSettings.propTypes = {};\nexport default ListSettings;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/ListSettings/ListSettings.js"],"names":["React","forwardRef","useState","useEffect","useRef","PropTypes","Dropdown","ButtonBase","ListOptions","makeStyles","utils","getUiOptions","useStyles","theme","button","padding","spacing","fontFamily","fontSize","fontWeight","lineHeight","ListSettings","value","options","uiSchema","onChange","uiOptions","enumOptions","map","option","label","expanded","setExpanded","anchorRef","_onChange","_onToggle","event","prevExpanded","_onCollapse","classes","current","defaultProps","propTypes"],"mappings":"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","sourcesContent":["import React, { forwardRef, useState, useEffect, useRef } from 'react';\nimport PropTypes from \"prop-types\"\nimport { Dropdown } from \"@kit-ui/core\"\n\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport ListOptions from \"./ListOptions\"\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { utils } from '@kit-ui/schema';\nconst { getUiOptions } = utils\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        padding: theme.spacing(1.5),\n        fontFamily: \"Akkurat, sans-serif\",\n        fontSize: 12,\n        fontWeight: \"bold\",\n        lineHeight: 1,\n    }\n}));\n\nconst ListSettings = ({\n    value, \n    options,\n    uiSchema,\n    onChange,\n}) => {\n\n    /*\n    const {\n        variant,\n        enumOptions,\n        enumDisabled\n    } = options;\n    */\n\n    const uiOptions = getUiOptions(uiSchema)\n\n    const enumOptions = uiOptions.enumOptions || options.enumOptions.map(option => {\n        return {\n            ...option\n        }\n    })\n\n    if (!value) {\n        value = enumOptions[0].value\n    }\n\n    let label\n\n    enumOptions.map((option => {\n        if (option.value === value) {\n            label = option.label\n        }\n    }))\n\n    const [expanded, setExpanded] = useState(false);\n    const anchorRef = useRef(null)\n\n    const _onChange = (value) => {\n        onChange && onChange(value)\n        setExpanded(false)\n    }\n\n    const _onToggle = (event) => {\n        setExpanded(prevExpanded => !prevExpanded);\n    }\n\n    const _onCollapse = (event) => {\n        setExpanded(false);\n    };\n\n    const classes = useStyles()\n\n    return (\n        <React.Fragment>\n            <ButtonBase className={classes.button} onClick={_onToggle} ref={anchorRef}>{label || value}</ButtonBase>\n            <Dropdown expanded={expanded} anchorEl={anchorRef.current} onClickAway={_onCollapse}>\n                <ListOptions options={uiOptions.enumOptions || enumOptions} onChange={_onChange} />\n            </Dropdown>\n        </React.Fragment>\n    )\n\n}\n\nListSettings.defaultProps = {\n}\n\nListSettings.propTypes = {\n}\n\nexport default ListSettings;"]},"metadata":{},"sourceType":"module"}