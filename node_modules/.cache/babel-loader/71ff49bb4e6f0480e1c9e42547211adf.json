{"ast":null,"code":"import { API } from \"../settings\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport getMenuChildren from \"./getMenuChildren\";\nconst appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    isLoading: false,\n    header: {},\n    search: {//            expanded: false\n    },\n    sidebar: {}\n  },\n  reducers: {\n    requestApp(state, action) {\n      return { ...state,\n        isLoading: true\n      };\n    },\n\n    receiveApp(state, action) {\n      return { ...state,\n        isLoading: false,\n        ...action.payload\n      };\n    },\n\n    toggleSearch(state, action) {\n      //            const { expanded } = action.payload\n      return { ...state,\n        search: { ...state.search,\n          expanded: !state.search.expanded\n        }\n      };\n    },\n\n    toggleHeader(state, action) {\n      const {\n        expanded\n      } = action.payload;\n      return { ...state,\n        header: { ...state.header,\n          expanded: expanded\n        }\n      };\n    },\n\n    toggleSidebar(state, action) {\n      const {\n        expanded\n      } = action.payload;\n      return { ...state,\n        sidebar: { ...state.sidebar,\n          expanded: expanded\n        }\n      };\n    },\n\n    requestSchemasByName(state, action) {\n      return { ...state,\n        schemasByName: {}\n      };\n    },\n\n    receiveSchemasByName(state, action) {\n      const {\n        schemasByName\n      } = action.payload;\n      return { ...state,\n        schemasByName: schemasByName\n      };\n    },\n\n    requestMenu(state, action) {\n      return { ...state,\n        menu: []\n      };\n    },\n\n    receiveMenu(state, action) {\n      const {\n        menu\n      } = action.payload;\n      return { ...state,\n        menu: menu\n      };\n    },\n\n    requestMenuByUrl(state, action) {\n      return { ...state,\n        menuByUrl: {}\n      };\n    },\n\n    receiveMenuByUrl(state, action) {\n      const {\n        menuByUrl\n      } = action.payload;\n      return { ...state,\n        menuByUrl: menuByUrl\n      };\n    },\n\n    requestParents(state, action) {\n      return state;\n    },\n\n    receiveParents(state, action) {\n      const {\n        parents\n      } = action.payload;\n      return { ...state,\n        parents: parents\n      };\n    }\n\n  }\n});\nexport const getApp = ({\n  menu = [],\n  schemas = [],\n  ...data\n}) => dispatch => {\n  dispatch(requestApp());\n  dispatch(receiveApp({ ...data,\n    menu: menu\n  }));\n  menu && dispatch(getMenuByUrl({\n    menu\n  }));\n  schemas && dispatch(getSchemasByName({\n    schemas\n  }));\n};\nexport const getAppMenu = ({\n  menu\n}) => dispatch => {};\nexport const getAppLayout = (layout = \"default\") => dispatch => {\n  if (layout === \"editor\") {\n    dispatch(toggleHeader({\n      expanded: false\n    }));\n    dispatch(toggleSidebar({\n      expanded: false\n    }));\n  }\n\n  if (layout === \"finder\") {\n    dispatch(toggleHeader({\n      expanded: true\n    }));\n    dispatch(toggleSidebar({\n      expanded: true\n    }));\n  }\n};\nexport const getAppSearch = ({\n  expanded,\n  q\n}) => dispatch => {\n  dispatch(toggleSearch({\n    expanded,\n    q\n  }));\n};\nexport const getParents = ({\n  menuByUrl,\n  pathname\n}) => dispatch => {\n  dispatch(requestParents());\n  let parents = [];\n  const pathnames = pathname.split('/');\n  let url = '';\n  pathnames.forEach(path => {\n    if (path) {\n      url = url + '/' + path;\n    } else {\n      url = '/';\n    }\n\n    if (menuByUrl && menuByUrl[url]) {\n      parents.push(menuByUrl[url]);\n    }\n\n    if (url == '/') {\n      url = '';\n    }\n  });\n  dispatch(receiveParents({\n    parents: parents\n  }));\n};\nexport const getSchemasByName = ({\n  schemas = []\n}) => dispatch => {\n  dispatch(requestSchemasByName());\n  let schemasByName = {};\n  schemas.map(schema => {\n    if (schema.name) {\n      schemasByName[schema.name] = schema;\n    }\n  });\n  dispatch(receiveSchemasByName({\n    schemasByName\n  }));\n};\n\nconst getMenuUrls = ({\n  children = [],\n  urls = {},\n  level = 0\n}) => {\n  if (!urls) {\n    urls = {};\n  }\n\n  children.forEach(child => {\n    let item = { ...child,\n      level: level\n    };\n\n    if (item.url) {\n      urls[item.url] = item;\n    }\n\n    if (item.children) {\n      urls = getMenuUrls({\n        children: item.children,\n        urls: urls,\n        level: level++\n      });\n    }\n  });\n  return urls;\n};\n\nexport const getMenuByUrl = ({\n  menu = []\n}) => dispatch => {\n  dispatch(requestMenuByUrl());\n  const menuByUrl = getMenuUrls({\n    children: menu\n  });\n  dispatch(receiveMenuByUrl({\n    menuByUrl: menuByUrl\n  }));\n};\nexport const {\n  requestApp,\n  receiveApp,\n  toggleHeader,\n  toggleSearch,\n  toggleSidebar,\n  requestSchemasByName,\n  receiveSchemasByName,\n  requestMenu,\n  receiveMenu,\n  requestMenuByUrl,\n  receiveMenuByUrl,\n  requestParents,\n  receiveParents\n} = appSlice.actions;\nexport default appSlice.reducer;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/redux/app/appSlice.js"],"names":["API","createSlice","getMenuChildren","appSlice","name","initialState","isLoading","header","search","sidebar","reducers","requestApp","state","action","receiveApp","payload","toggleSearch","expanded","toggleHeader","toggleSidebar","requestSchemasByName","schemasByName","receiveSchemasByName","requestMenu","menu","receiveMenu","requestMenuByUrl","menuByUrl","receiveMenuByUrl","requestParents","receiveParents","parents","getApp","schemas","data","dispatch","getMenuByUrl","getSchemasByName","getAppMenu","getAppLayout","layout","getAppSearch","q","getParents","pathname","pathnames","split","url","forEach","path","push","map","schema","getMenuUrls","children","urls","level","child","item","actions","reducer"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,QAAQ,GAAGF,WAAW,CAAC;AACzBG,EAAAA,IAAI,EAAE,KADmB;AAEzBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,SAAS,EAAE,KADD;AAEVC,IAAAA,MAAM,EAAE,EAFE;AAIVC,IAAAA,MAAM,EAAE,CAChB;AADgB,KAJE;AAOVC,IAAAA,OAAO,EAAE;AAPC,GAFW;AAWzBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGD,KADA;AAEHN,QAAAA,SAAS,EAAE;AAFR,OAAP;AAIH,KANK;;AAONQ,IAAAA,UAAU,CAACF,KAAD,EAAQC,MAAR,EAAgB;AACtB,aAAO,EACH,GAAGD,KADA;AAEHN,QAAAA,SAAS,EAAE,KAFR;AAGH,WAAGO,MAAM,CAACE;AAHP,OAAP;AAKH,KAbK;;AAcNC,IAAAA,YAAY,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACpC;AAEY,aAAO,EACH,GAAGD,KADA;AAEHJ,QAAAA,MAAM,EAAE,EACJ,GAAGI,KAAK,CAACJ,MADL;AAEJS,UAAAA,QAAQ,EAAE,CAACL,KAAK,CAACJ,MAAN,CAAaS;AAFpB;AAFL,OAAP;AAOH,KAxBK;;AAyBNC,IAAAA,YAAY,CAACN,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAM;AAAEI,QAAAA;AAAF,UAAeJ,MAAM,CAACE,OAA5B;AAEA,aAAO,EACH,GAAGH,KADA;AAEHL,QAAAA,MAAM,EAAE,EACJ,GAAGK,KAAK,CAACL,MADL;AAEJU,UAAAA,QAAQ,EAAEA;AAFN;AAFL,OAAP;AAOH,KAnCK;;AAoCNE,IAAAA,aAAa,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACzB,YAAM;AAAEI,QAAAA;AAAF,UAAeJ,MAAM,CAACE,OAA5B;AAEA,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,OAAO,EAAE,EACL,GAAGG,KAAK,CAACH,OADJ;AAELQ,UAAAA,QAAQ,EAAEA;AAFL;AAFN,OAAP;AAOH,KA9CK;;AA+CNG,IAAAA,oBAAoB,CAACR,KAAD,EAAQC,MAAR,EAAgB;AAChC,aAAO,EACH,GAAGD,KADA;AAEHS,QAAAA,aAAa,EAAE;AAFZ,OAAP;AAIH,KApDK;;AAqDNC,IAAAA,oBAAoB,CAACV,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAM;AAACQ,QAAAA;AAAD,UAAmBR,MAAM,CAACE,OAAhC;AACA,aAAO,EACH,GAAGH,KADA;AAEHS,QAAAA,aAAa,EAAEA;AAFZ,OAAP;AAIH,KA3DK;;AA4DNE,IAAAA,WAAW,CAACX,KAAD,EAAQC,MAAR,EAAgB;AACvB,aAAO,EACH,GAAGD,KADA;AAEHY,QAAAA,IAAI,EAAE;AAFH,OAAP;AAIH,KAjEK;;AAkENC,IAAAA,WAAW,CAACb,KAAD,EAAQC,MAAR,EAAgB;AACvB,YAAM;AAAEW,QAAAA;AAAF,UAAWX,MAAM,CAACE,OAAxB;AACA,aAAO,EACH,GAAGH,KADA;AAEHY,QAAAA,IAAI,EAAEA;AAFH,OAAP;AAIH,KAxEK;;AAyENE,IAAAA,gBAAgB,CAACd,KAAD,EAAQC,MAAR,EAAgB;AAC5B,aAAO,EACH,GAAGD,KADA;AAEHe,QAAAA,SAAS,EAAE;AAFR,OAAP;AAIH,KA9EK;;AA+ENC,IAAAA,gBAAgB,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AAC5B,YAAM;AAAEc,QAAAA;AAAF,UAAgBd,MAAM,CAACE,OAA7B;AACA,aAAO,EACH,GAAGH,KADA;AAEHe,QAAAA,SAAS,EAAGA;AAFT,OAAP;AAIH,KArFK;;AAsFNE,IAAAA,cAAc,CAACjB,KAAD,EAAQC,MAAR,EAAgB;AAC1B,aAAOD,KAAP;AACH,KAxFK;;AAyFNkB,IAAAA,cAAc,CAAClB,KAAD,EAAQC,MAAR,EAAgB;AAC1B,YAAM;AAAEkB,QAAAA;AAAF,UAAclB,MAAM,CAACE,OAA3B;AACA,aAAO,EACH,GAAGH,KADA;AAEHmB,QAAAA,OAAO,EAAEA;AAFN,OAAP;AAIH;;AA/FK;AAXe,CAAD,CAA5B;AA8GA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAACR,EAAAA,IAAI,GAAG,EAAR;AAAYS,EAAAA,OAAO,GAAG,EAAtB;AAA0B,KAAGC;AAA7B,CAAD,KAAwCC,QAAQ,IAAI;AAEtEA,EAAAA,QAAQ,CAACxB,UAAU,EAAX,CAAR;AAEAwB,EAAAA,QAAQ,CAACrB,UAAU,CAAC,EAChB,GAAGoB,IADa;AAEhBV,IAAAA,IAAI,EAAEA;AAFU,GAAD,CAAX,CAAR;AAKAA,EAAAA,IAAI,IAAIW,QAAQ,CAACC,YAAY,CAAC;AAACZ,IAAAA;AAAD,GAAD,CAAb,CAAhB;AACAS,EAAAA,OAAO,IAAIE,QAAQ,CAACE,gBAAgB,CAAC;AAACJ,IAAAA;AAAD,GAAD,CAAjB,CAAnB;AAEH,CAZM;AAcP,OAAO,MAAMK,UAAU,GAAG,CAAC;AAACd,EAAAA;AAAD,CAAD,KAAYW,QAAQ,IAAI,CAKjD,CALM;AAOP,OAAO,MAAMI,YAAY,GAAG,CAACC,MAAM,GAAG,SAAV,KAAwBL,QAAQ,IAAI;AAE5D,MAAIK,MAAM,KAAK,QAAf,EAAyB;AACrBL,IAAAA,QAAQ,CAACjB,YAAY,CAAC;AAACD,MAAAA,QAAQ,EAAE;AAAX,KAAD,CAAb,CAAR;AACAkB,IAAAA,QAAQ,CAAChB,aAAa,CAAC;AAACF,MAAAA,QAAQ,EAAE;AAAX,KAAD,CAAd,CAAR;AACH;;AAED,MAAIuB,MAAM,KAAK,QAAf,EAAyB;AACrBL,IAAAA,QAAQ,CAACjB,YAAY,CAAC;AAACD,MAAAA,QAAQ,EAAE;AAAX,KAAD,CAAb,CAAR;AACAkB,IAAAA,QAAQ,CAAChB,aAAa,CAAC;AAACF,MAAAA,QAAQ,EAAE;AAAX,KAAD,CAAd,CAAR;AACH;AAEJ,CAZM;AAcP,OAAO,MAAMwB,YAAY,GAAG,CAAC;AAACxB,EAAAA,QAAD;AAAWyB,EAAAA;AAAX,CAAD,KAAmBP,QAAQ,IAAI;AACvDA,EAAAA,QAAQ,CAACnB,YAAY,CAAC;AAACC,IAAAA,QAAD;AAAWyB,IAAAA;AAAX,GAAD,CAAb,CAAR;AACH,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAChB,EAAAA,SAAD;AAAYiB,EAAAA;AAAZ,CAAD,KAA2BT,QAAQ,IAAI;AAE7DA,EAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR;AAEA,MAAIE,OAAO,GAAG,EAAd;AAEA,QAAMc,SAAS,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAlB;AAEA,MAAIC,GAAG,GAAG,EAAV;AAEAF,EAAAA,SAAS,CAACG,OAAV,CAAmBC,IAAD,IAAU;AAExB,QAAIA,IAAJ,EAAU;AACNF,MAAAA,GAAG,GAAGA,GAAG,GAAG,GAAN,GAAYE,IAAlB;AACH,KAFD,MAEO;AACHF,MAAAA,GAAG,GAAG,GAAN;AACH;;AAED,QAAIpB,SAAS,IAAIA,SAAS,CAACoB,GAAD,CAA1B,EAAiC;AAC7BhB,MAAAA,OAAO,CAACmB,IAAR,CAAavB,SAAS,CAACoB,GAAD,CAAtB;AACH;;AAED,QAAIA,GAAG,IAAI,GAAX,EAAgB;AACZA,MAAAA,GAAG,GAAG,EAAN;AACH;AAEJ,GAhBD;AAkBAZ,EAAAA,QAAQ,CAACL,cAAc,CAAC;AAACC,IAAAA,OAAO,EAACA;AAAT,GAAD,CAAf,CAAR;AAEH,CA9BM;AAgCP,OAAO,MAAMM,gBAAgB,GAAG,CAAC;AAACJ,EAAAA,OAAO,GAAG;AAAX,CAAD,KAAoBE,QAAQ,IAAI;AAE5DA,EAAAA,QAAQ,CAACf,oBAAoB,EAArB,CAAR;AAEA,MAAIC,aAAa,GAAG,EAApB;AAEAY,EAAAA,OAAO,CAACkB,GAAR,CAAYC,MAAM,IAAI;AAElB,QAAIA,MAAM,CAAChD,IAAX,EAAiB;AACbiB,MAAAA,aAAa,CAAC+B,MAAM,CAAChD,IAAR,CAAb,GAA6BgD,MAA7B;AACH;AAEJ,GAND;AAQAjB,EAAAA,QAAQ,CAACb,oBAAoB,CAAC;AAACD,IAAAA;AAAD,GAAD,CAArB,CAAR;AAEH,CAhBM;;AAmBP,MAAMgC,WAAW,GAAG,CAAC;AAACC,EAAAA,QAAQ,GAAG,EAAZ;AAAgBC,EAAAA,IAAI,GAAG,EAAvB;AAA2BC,EAAAA,KAAK,GAAG;AAAnC,CAAD,KAA2C;AAE3D,MAAI,CAACD,IAAL,EAAW;AACPA,IAAAA,IAAI,GAAG,EAAP;AACH;;AAEDD,EAAAA,QAAQ,CAACN,OAAT,CAAkBS,KAAD,IAAW;AAExB,QAAIC,IAAI,GAAG,EACP,GAAGD,KADI;AAEPD,MAAAA,KAAK,EAAEA;AAFA,KAAX;;AAKA,QAAIE,IAAI,CAACX,GAAT,EAAc;AACVQ,MAAAA,IAAI,CAACG,IAAI,CAACX,GAAN,CAAJ,GAAiBW,IAAjB;AACH;;AAED,QAAIA,IAAI,CAACJ,QAAT,EAAmB;AACfC,MAAAA,IAAI,GAAGF,WAAW,CAAC;AAACC,QAAAA,QAAQ,EAAEI,IAAI,CAACJ,QAAhB;AAA0BC,QAAAA,IAAI,EAAEA,IAAhC;AAAsCC,QAAAA,KAAK,EAAEA,KAAK;AAAlD,OAAD,CAAlB;AACH;AACJ,GAdD;AAgBA,SAAOD,IAAP;AAEH,CAxBD;;AA2BA,OAAO,MAAMnB,YAAY,GAAG,CAAC;AAACZ,EAAAA,IAAI,GAAG;AAAR,CAAD,KAAiBW,QAAQ,IAAI;AAErDA,EAAAA,QAAQ,CAACT,gBAAgB,EAAjB,CAAR;AAEA,QAAMC,SAAS,GAAG0B,WAAW,CAAC;AAACC,IAAAA,QAAQ,EAAE9B;AAAX,GAAD,CAA7B;AAEAW,EAAAA,QAAQ,CAACP,gBAAgB,CAAC;AAACD,IAAAA,SAAS,EAAEA;AAAZ,GAAD,CAAjB,CAAR;AAEH,CARM;AAWP,OAAO,MAAM;AAAEhB,EAAAA,UAAF;AAAcG,EAAAA,UAAd;AAA0BI,EAAAA,YAA1B;AAAwCF,EAAAA,YAAxC;AAAsDG,EAAAA,aAAtD;AAAqEC,EAAAA,oBAArE;AAA2FE,EAAAA,oBAA3F;AAAiHC,EAAAA,WAAjH;AAA8HE,EAAAA,WAA9H;AAA2IC,EAAAA,gBAA3I;AAA6JE,EAAAA,gBAA7J;AAA+KC,EAAAA,cAA/K;AAA+LC,EAAAA;AAA/L,IAAkN3B,QAAQ,CAACwD,OAAjO;AACP,eAAexD,QAAQ,CAACyD,OAAxB","sourcesContent":["import { API } from \"../settings\"\nimport { createSlice } from '@reduxjs/toolkit'\n\nimport getMenuChildren from \"./getMenuChildren\"\n\nconst appSlice = createSlice({\n    name: 'app',\n    initialState: {\n        isLoading: false,\n        header: {\n        },\n        search: {\n//            expanded: false\n        },\n        sidebar: {}\n    }, \n    reducers: {\n        requestApp(state, action) {\n            return {\n                ...state,\n                isLoading: true,\n            }\n        },\n        receiveApp(state, action) {\n            return {\n                ...state,\n                isLoading: false,\n                ...action.payload\n            }\n        },\n        toggleSearch(state, action) {\n//            const { expanded } = action.payload\n\n            return {\n                ...state,\n                search: {\n                    ...state.search,\n                    expanded: !state.search.expanded,\n                }\n            }\n        },\n        toggleHeader(state, action) {\n            const { expanded } = action.payload\n\n            return {\n                ...state,\n                header: {\n                    ...state.header,\n                    expanded: expanded\n                }\n            }\n        },\n        toggleSidebar(state, action) {\n            const { expanded } = action.payload\n\n            return {\n                ...state,\n                sidebar: {\n                    ...state.sidebar,\n                    expanded: expanded\n                }\n            }\n        },\n        requestSchemasByName(state, action) {\n            return {\n                ...state,\n                schemasByName: {}\n            }\n        },\n        receiveSchemasByName(state, action) {\n            const {schemasByName } = action.payload\n            return {\n                ...state,\n                schemasByName: schemasByName\n            }\n        },\n        requestMenu(state, action) {\n            return {\n                ...state,\n                menu: []\n            }\n        },\n        receiveMenu(state, action) {\n            const { menu } = action.payload\n            return {\n                ...state,\n                menu: menu\n            }\n        },\n        requestMenuByUrl(state, action) {\n            return {\n                ...state,\n                menuByUrl: {}\n            }\n        },\n        receiveMenuByUrl(state, action) {\n            const { menuByUrl } = action.payload\n            return {\n                ...state,\n                menuByUrl:  menuByUrl\n            }\n        },\n        requestParents(state, action) {\n            return state            \n        },\n        receiveParents(state, action) {\n            const { parents } = action.payload\n            return {\n                ...state,\n                parents: parents\n            }\n        }\n    }\n})\n\nexport const getApp = ({menu = [], schemas = [], ...data}) => dispatch => {\n\n    dispatch(requestApp())\n\n    dispatch(receiveApp({\n        ...data,\n        menu: menu,\n    }))\n\n    menu && dispatch(getMenuByUrl({menu}))\n    schemas && dispatch(getSchemasByName({schemas}))\n    \n}\n\nexport const getAppMenu = ({menu}) => dispatch => {\n\n\n\n\n}\n\nexport const getAppLayout = (layout = \"default\") => dispatch => {\n\n    if (layout === \"editor\") {\n        dispatch(toggleHeader({expanded: false}))\n        dispatch(toggleSidebar({expanded: false}))\n    }\n\n    if (layout === \"finder\") {\n        dispatch(toggleHeader({expanded: true}))\n        dispatch(toggleSidebar({expanded: true}))\n    }\n\n}\n\nexport const getAppSearch = ({expanded, q}) => dispatch => {\n    dispatch(toggleSearch({expanded, q}))  \n}\n\nexport const getParents = ({menuByUrl, pathname}) => dispatch => {\n\n    dispatch(requestParents())\n\n    let parents = [];\n  \n    const pathnames = pathname.split('/');\n  \n    let url = '';\n  \n    pathnames.forEach((path) => {\n\n        if (path) {\n            url = url + '/' + path;\n        } else {\n            url = '/';\n        }\n    \n        if (menuByUrl && menuByUrl[url]) {\n            parents.push(menuByUrl[url]);\n        }\n        \n        if (url == '/') {\n            url = '';\n        }\n\n    });\n\n    dispatch(receiveParents({parents:parents}))\n  \n}\n\nexport const getSchemasByName = ({schemas = []}) => dispatch => {\n\n    dispatch(requestSchemasByName())\n\n    let schemasByName = {}\n\n    schemas.map(schema => {\n\n        if (schema.name) {\n            schemasByName[schema.name] = schema\n        }\n\n    })\n\n    dispatch(receiveSchemasByName({schemasByName}))\n    \n}\n\n\nconst getMenuUrls = ({children = [], urls = {}, level = 0}) => {\n\n    if (!urls) {\n        urls = {}\n    }\n\n    children.forEach((child) => {\n\n        let item = {\n            ...child,\n            level: level\n        }\n\n        if (item.url) {\n            urls[item.url] = item;\n        }\n      \n        if (item.children) {\n            urls = getMenuUrls({children: item.children, urls: urls, level: level++});\n        }\n    });\n\n    return urls\n\n}\n\n\nexport const getMenuByUrl = ({menu = []}) => dispatch => {\n\n    dispatch(requestMenuByUrl())\n\n    const menuByUrl = getMenuUrls({children: menu})\n\n    dispatch(receiveMenuByUrl({menuByUrl: menuByUrl}))\n    \n}\n\n\nexport const { requestApp, receiveApp, toggleHeader, toggleSearch, toggleSidebar, requestSchemasByName, receiveSchemasByName, requestMenu, receiveMenu, requestMenuByUrl, receiveMenuByUrl, requestParents, receiveParents } = appSlice.actions\nexport default appSlice.reducer"]},"metadata":{},"sourceType":"module"}