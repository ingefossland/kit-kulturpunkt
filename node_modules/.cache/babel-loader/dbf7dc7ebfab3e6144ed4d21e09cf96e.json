{"ast":null,"code":"/*!\n * condense-newlines <https://github.com/jonschlinkert/condense-newlines>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT License\n */\n'use strict';\n\nvar isWhitespace = require('is-whitespace');\n\nvar extend = require('extend-shallow');\n\nvar typeOf = require('kind-of');\n\nmodule.exports = function (str, options) {\n  var opts = extend({}, options);\n  var sep = opts.sep || '\\n\\n';\n  var min = opts.min;\n  var re;\n\n  if (typeof min === 'number' && min !== 2) {\n    re = new RegExp('(\\\\r\\\\n|\\\\n|\\\\u2424) {' + min + ',}');\n  }\n\n  if (typeof re === 'undefined') {\n    re = opts.regex || /(\\r\\n|\\n|\\u2424){2,}/g;\n  } // if a line is 100% whitespace it will be trimmed, so that\n  // later we can condense newlines correctly\n\n\n  if (opts.keepWhitespace !== true) {\n    str = str.split('\\n').map(function (line) {\n      return isWhitespace(line) ? line.trim() : line;\n    }).join('\\n');\n  }\n\n  str = trailingNewline(str, opts);\n  return str.replace(re, sep);\n};\n\nfunction trailingNewline(str, options) {\n  var val = options.trailingNewline;\n\n  if (val === false) {\n    return str;\n  }\n\n  switch (typeOf(val)) {\n    case 'string':\n      str = str.replace(/\\s+$/, options.trailingNewline);\n      break;\n\n    case 'function':\n      str = options.trailingNewline(str);\n      break;\n\n    case 'undefined':\n    case 'boolean':\n    default:\n      {\n        str = str.replace(/\\s+$/, '\\n');\n        break;\n      }\n  }\n\n  return str;\n}","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/condense-newlines/index.js"],"names":["isWhitespace","require","extend","typeOf","module","exports","str","options","opts","sep","min","re","RegExp","regex","keepWhitespace","split","map","line","trim","join","trailingNewline","replace","val"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAD,CAApB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAASC,GAAT,EAAcC,OAAd,EAAuB;AACtC,MAAIC,IAAI,GAAGN,MAAM,CAAC,EAAD,EAAKK,OAAL,CAAjB;AACA,MAAIE,GAAG,GAAGD,IAAI,CAACC,GAAL,IAAY,MAAtB;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACE,GAAf;AACA,MAAIC,EAAJ;;AAEA,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,CAAvC,EAA0C;AACxCC,IAAAA,EAAE,GAAG,IAAIC,MAAJ,CAAW,2BAA2BF,GAA3B,GAAiC,IAA5C,CAAL;AACD;;AACD,MAAI,OAAOC,EAAP,KAAc,WAAlB,EAA+B;AAC7BA,IAAAA,EAAE,GAAGH,IAAI,CAACK,KAAL,IAAc,uBAAnB;AACD,GAXqC,CAatC;AACA;;;AACA,MAAIL,IAAI,CAACM,cAAL,KAAwB,IAA5B,EAAkC;AAChCR,IAAAA,GAAG,GAAGA,GAAG,CAACS,KAAJ,CAAU,IAAV,EAAgBC,GAAhB,CAAoB,UAASC,IAAT,EAAe;AACvC,aAAOjB,YAAY,CAACiB,IAAD,CAAZ,GAAqBA,IAAI,CAACC,IAAL,EAArB,GAAmCD,IAA1C;AACD,KAFK,EAEHE,IAFG,CAEE,IAFF,CAAN;AAGD;;AAEDb,EAAAA,GAAG,GAAGc,eAAe,CAACd,GAAD,EAAME,IAAN,CAArB;AACA,SAAOF,GAAG,CAACe,OAAJ,CAAYV,EAAZ,EAAgBF,GAAhB,CAAP;AACD,CAvBD;;AAyBA,SAASW,eAAT,CAAyBd,GAAzB,EAA8BC,OAA9B,EAAuC;AACrC,MAAIe,GAAG,GAAGf,OAAO,CAACa,eAAlB;;AACA,MAAIE,GAAG,KAAK,KAAZ,EAAmB;AACjB,WAAOhB,GAAP;AACD;;AAED,UAAQH,MAAM,CAACmB,GAAD,CAAd;AACE,SAAK,QAAL;AACEhB,MAAAA,GAAG,GAAGA,GAAG,CAACe,OAAJ,CAAY,MAAZ,EAAoBd,OAAO,CAACa,eAA5B,CAAN;AACA;;AACF,SAAK,UAAL;AACEd,MAAAA,GAAG,GAAGC,OAAO,CAACa,eAAR,CAAwBd,GAAxB,CAAN;AACA;;AACF,SAAK,WAAL;AACA,SAAK,SAAL;AACA;AAAS;AACPA,QAAAA,GAAG,GAAGA,GAAG,CAACe,OAAJ,CAAY,MAAZ,EAAoB,IAApB,CAAN;AACA;AACD;AAZH;;AAcA,SAAOf,GAAP;AACD","sourcesContent":["/*!\n * condense-newlines <https://github.com/jonschlinkert/condense-newlines>\n *\n * Copyright (c) 2014 Jon Schlinkert, contributors.\n * Licensed under the MIT License\n */\n\n'use strict';\n\nvar isWhitespace = require('is-whitespace');\nvar extend = require('extend-shallow');\nvar typeOf = require('kind-of');\n\nmodule.exports = function(str, options) {\n  var opts = extend({}, options);\n  var sep = opts.sep || '\\n\\n';\n  var min = opts.min;\n  var re;\n\n  if (typeof min === 'number' && min !== 2) {\n    re = new RegExp('(\\\\r\\\\n|\\\\n|\\\\u2424) {' + min + ',}');\n  }\n  if (typeof re === 'undefined') {\n    re = opts.regex || /(\\r\\n|\\n|\\u2424){2,}/g;\n  }\n\n  // if a line is 100% whitespace it will be trimmed, so that\n  // later we can condense newlines correctly\n  if (opts.keepWhitespace !== true) {\n    str = str.split('\\n').map(function(line) {\n      return isWhitespace(line) ? line.trim() : line;\n    }).join('\\n');\n  }\n\n  str = trailingNewline(str, opts);\n  return str.replace(re, sep);\n};\n\nfunction trailingNewline(str, options) {\n  var val = options.trailingNewline;\n  if (val === false) {\n    return str;\n  }\n\n  switch (typeOf(val)) {\n    case 'string':\n      str = str.replace(/\\s+$/, options.trailingNewline);\n      break;\n    case 'function':\n      str = options.trailingNewline(str);\n      break;\n    case 'undefined':\n    case 'boolean':\n    default: {\n      str = str.replace(/\\s+$/, '\\n');\n      break;\n    }\n  }\n  return str;\n}\n"]},"metadata":{},"sourceType":"script"}