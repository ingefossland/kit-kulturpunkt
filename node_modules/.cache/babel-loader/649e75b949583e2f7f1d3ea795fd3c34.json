{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport * as types from \"../../types\";\nimport { asNumber } from \"../../utils\"; // Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\n\nvar trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/; // This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\n\nvar trailingCharMatcher = /[0.]0*$/;\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\n\nvar NumberField = /*#__PURE__*/function (_React$Component) {\n  _inherits(NumberField, _React$Component);\n\n  function NumberField(props) {\n    var _this;\n\n    _classCallCheck(this, NumberField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberField).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      // Cache the original value in component state\n      _this.setState({\n        lastValue: value\n      }); // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n\n\n      if (\"\".concat(value).charAt(0) === \".\") {\n        value = \"0\".concat(value);\n      } // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n\n\n      var processed = typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix) ? asNumber(value.replace(trailingCharMatcher, \"\")) : asNumber(value);\n\n      _this.props.onChange(processed);\n    });\n\n    _this.state = {\n      lastValue: props.value\n    };\n    return _this;\n  }\n\n  _createClass(NumberField, [{\n    key: \"render\",\n    value: function render() {\n      var StringField = this.props.registry.fields.StringField;\n\n      var _this$props = this.props,\n          formData = _this$props.formData,\n          props = _objectWithoutProperties(_this$props, [\"formData\"]);\n\n      var lastValue = this.state.lastValue;\n      var value = formData;\n\n      if (typeof lastValue === \"string\" && typeof value === \"number\") {\n        // Construct a regular expression that checks for a string that consists\n        // of the formData value suffixed with zero or one '.' characters and zero\n        // or more '0' characters\n        var re = new RegExp(\"\".concat(value).replace(\".\", \"\\\\.\") + \"\\\\.?0*$\"); // If the cached \"lastValue\" is a match, use that instead of the formData\n        // value to prevent the input value from changing in the UI\n\n        if (lastValue.match(re)) {\n          value = lastValue;\n        }\n      }\n\n      return React.createElement(StringField, _extends({}, props, {\n        formData: value,\n        onChange: this.handleChange\n      }));\n    }\n  }]);\n\n  return NumberField;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NumberField.propTypes = types.fieldProps;\n}\n\nNumberField.defaultProps = {\n  uiSchema: {}\n};\nexport default NumberField;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@rjsf/core/lib/components/fields/NumberField.js"],"names":["_extends","_objectWithoutProperties","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","React","types","asNumber","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","_React$Component","props","_this","call","value","setState","lastValue","concat","charAt","processed","match","replace","onChange","state","key","render","StringField","registry","fields","_this$props","formData","re","RegExp","createElement","handleChange","Component","process","env","NODE_ENV","propTypes","fieldProps","defaultProps","uiSchema"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nimport * as types from \"../../types\";\nimport { asNumber } from \"../../utils\"; // Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\n\nvar trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/; // This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\n\nvar trailingCharMatcher = /[0.]0*$/;\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\n\nvar NumberField =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(NumberField, _React$Component);\n\n  function NumberField(props) {\n    var _this;\n\n    _classCallCheck(this, NumberField);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NumberField).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (value) {\n      // Cache the original value in component state\n      _this.setState({\n        lastValue: value\n      }); // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n\n\n      if (\"\".concat(value).charAt(0) === \".\") {\n        value = \"0\".concat(value);\n      } // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n\n\n      var processed = typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix) ? asNumber(value.replace(trailingCharMatcher, \"\")) : asNumber(value);\n\n      _this.props.onChange(processed);\n    });\n\n    _this.state = {\n      lastValue: props.value\n    };\n    return _this;\n  }\n\n  _createClass(NumberField, [{\n    key: \"render\",\n    value: function render() {\n      var StringField = this.props.registry.fields.StringField;\n\n      var _this$props = this.props,\n          formData = _this$props.formData,\n          props = _objectWithoutProperties(_this$props, [\"formData\"]);\n\n      var lastValue = this.state.lastValue;\n      var value = formData;\n\n      if (typeof lastValue === \"string\" && typeof value === \"number\") {\n        // Construct a regular expression that checks for a string that consists\n        // of the formData value suffixed with zero or one '.' characters and zero\n        // or more '0' characters\n        var re = new RegExp(\"\".concat(value).replace(\".\", \"\\\\.\") + \"\\\\.?0*$\"); // If the cached \"lastValue\" is a match, use that instead of the formData\n        // value to prevent the input value from changing in the UI\n\n        if (lastValue.match(re)) {\n          value = lastValue;\n        }\n      }\n\n      return React.createElement(StringField, _extends({}, props, {\n        formData: value,\n        onChange: this.handleChange\n      }));\n    }\n  }]);\n\n  return NumberField;\n}(React.Component);\n\nif (process.env.NODE_ENV !== \"production\") {\n  NumberField.propTypes = types.fieldProps;\n}\n\nNumberField.defaultProps = {\n  uiSchema: {}\n};\nexport default NumberField;"]},"metadata":{},"sourceType":"module"}