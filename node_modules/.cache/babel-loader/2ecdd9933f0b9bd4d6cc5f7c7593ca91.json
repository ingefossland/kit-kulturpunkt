{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ID3v2Parser = void 0;\n\nconst Token = require(\"token-types\");\n\nconst Util_1 = require(\"../common/Util\");\n\nconst FrameParser_1 = require(\"./FrameParser\");\n\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\n\nclass ID3v2Parser {\n  static removeUnsyncBytes(buffer) {\n    let readI = 0;\n    let writeI = 0;\n\n    while (readI < buffer.length - 1) {\n      if (readI !== writeI) {\n        buffer[writeI] = buffer[readI];\n      }\n\n      readI += buffer[readI] === 0xFF && buffer[readI + 1] === 0 ? 2 : 1;\n      writeI++;\n    }\n\n    if (readI < buffer.length) {\n      buffer[writeI++] = buffer[readI];\n    }\n\n    return buffer.slice(0, writeI);\n  }\n\n  static readFrameHeader(v, majorVer) {\n    let header;\n\n    switch (majorVer) {\n      case 2:\n        header = {\n          id: v.toString('ascii', 0, 3),\n          length: Token.UINT24_BE.get(v, 3)\n        };\n        break;\n\n      case 3:\n        header = {\n          id: v.toString('ascii', 0, 4),\n          length: Token.UINT32_BE.get(v, 4),\n          flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n        };\n        break;\n\n      case 4:\n        header = {\n          id: v.toString('ascii', 0, 4),\n          length: ID3v2Token_1.UINT32SYNCSAFE.get(v, 4),\n          flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n        };\n        break;\n\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n\n    return header;\n  }\n\n  static getFrameHeaderLength(majorVer) {\n    switch (majorVer) {\n      case 2:\n        return 6;\n\n      case 3:\n      case 4:\n        return 10;\n\n      default:\n        throw new Error('header versionIndex is incorrect');\n    }\n  }\n\n  static readFrameFlags(b) {\n    return {\n      status: {\n        tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\n        file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\n        read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\n      },\n      format: {\n        grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\n        compression: Util_1.default.strtokBITSET.get(b, 1, 3),\n        encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\n        unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\n        data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\n      }\n    };\n  }\n\n  static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\n    const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n\n    switch (majorVer) {\n      case 2:\n        return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n      case 3:\n      case 4:\n        if (frameHeader.flags.format.unsynchronisation) {\n          buf = ID3v2Parser.removeUnsyncBytes(buf);\n        }\n\n        if (frameHeader.flags.format.data_length_indicator) {\n          buf = buf.slice(4, buf.length);\n        }\n\n        return frameParser.readData(buf, frameHeader.id, includeCovers);\n\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n  }\n  /**\n   * Create a combined tag key, of tag & description\n   * @param {string} tag e.g.: COM\n   * @param {string} description e.g. iTunPGAP\n   * @returns {string} e.g. COM:iTunPGAP\n   */\n\n\n  static makeDescriptionTagName(tag, description) {\n    return tag + (description ? ':' + description : '');\n  }\n\n  async parse(metadata, tokenizer, options) {\n    this.tokenizer = tokenizer;\n    this.metadata = metadata;\n    this.options = options;\n    const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n\n    if (id3Header.fileIdentifier !== 'ID3') {\n      throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n    }\n\n    this.id3Header = id3Header;\n    this.headerType = 'ID3v2.' + id3Header.version.major;\n\n    if (id3Header.flags.isExtendedHeader) {\n      return this.parseExtendedHeader();\n    } else {\n      return this.parseId3Data(id3Header.size);\n    }\n  }\n\n  async parseExtendedHeader() {\n    const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n    const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n\n    if (dataRemaining > 0) {\n      return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\n    } else {\n      return this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n  }\n\n  async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n    const buffer = Buffer.alloc(dataRemaining);\n    await this.tokenizer.readBuffer(buffer, {\n      length: dataRemaining\n    });\n    return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n  }\n\n  async parseId3Data(dataLen) {\n    const buffer = Buffer.alloc(dataLen);\n    await this.tokenizer.readBuffer(buffer, {\n      length: dataLen\n    });\n\n    for (const tag of this.parseMetadata(buffer)) {\n      if (tag.id === 'TXXX') {\n        if (tag.value) {\n          for (const text of tag.value.text) {\n            this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n          }\n        }\n      } else if (tag.id === 'COM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n        }\n      } else if (tag.id === 'COMM') {\n        for (const value of tag.value) {\n          this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n        }\n      } else if (Array.isArray(tag.value)) {\n        for (const value of tag.value) {\n          this.addTag(tag.id, value);\n        }\n      } else {\n        this.addTag(tag.id, tag.value);\n      }\n    }\n  }\n\n  addTag(id, value) {\n    this.metadata.addTag(this.headerType, id, value);\n  }\n\n  parseMetadata(data) {\n    let offset = 0;\n    const tags = [];\n\n    while (true) {\n      if (offset === data.length) break;\n      const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n\n      if (offset + frameHeaderLength > data.length) {\n        this.metadata.addWarning('Illegal ID3v2 tag length');\n        break;\n      }\n\n      const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n      const frameHeader = ID3v2Parser.readFrameHeader(frameHeaderBytes, this.id3Header.version.major); // Last frame. Check first char is a letter, bit of defensive programming\n\n      if (frameHeader.id === '' || frameHeader.id === '\\u0000\\u0000\\u0000\\u0000' || 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {\n        // ToDo: generate WARNING\n        break;\n      }\n\n      const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n      const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n      tags.push({\n        id: frameHeader.id,\n        value: values\n      });\n    }\n\n    return tags;\n  }\n\n}\n\nexports.ID3v2Parser = ID3v2Parser;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"names":["Object","defineProperty","exports","value","ID3v2Parser","Token","require","Util_1","FrameParser_1","ID3v2Token_1","removeUnsyncBytes","buffer","readI","writeI","length","slice","readFrameHeader","v","majorVer","header","id","toString","UINT24_BE","get","UINT32_BE","flags","readFrameFlags","UINT32SYNCSAFE","Error","getFrameHeaderLength","b","status","tag_alter_preservation","default","strtokBITSET","file_alter_preservation","read_only","format","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","buf","frameHeader","includeCovers","warningCollector","frameParser","FrameParser","readData","makeDescriptionTagName","tag","description","parse","metadata","tokenizer","options","id3Header","readToken","ID3v2Header","fileIdentifier","headerType","version","major","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","ExtendedHeader","dataRemaining","len","parseExtendedHeaderData","extendedHeaderSize","Buffer","alloc","readBuffer","dataLen","parseMetadata","text","addTag","Array","isArray","data","offset","tags","frameHeaderLength","addWarning","frameHeaderBytes","indexOf","frameDataBytes","values","skipCovers","push"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ID3v2Parser = void 0;\nconst Token = require(\"token-types\");\nconst Util_1 = require(\"../common/Util\");\nconst FrameParser_1 = require(\"./FrameParser\");\nconst ID3v2Token_1 = require(\"./ID3v2Token\");\nclass ID3v2Parser {\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.slice(0, writeI);\n    }\n    static readFrameHeader(v, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: v.toString('ascii', 0, 3),\n                    length: Token.UINT24_BE.get(v, 3)\n                };\n                break;\n            case 3:\n                header = {\n                    id: v.toString('ascii', 0, 4),\n                    length: Token.UINT32_BE.get(v, 4),\n                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n                };\n                break;\n            case 4:\n                header = {\n                    id: v.toString('ascii', 0, 4),\n                    length: ID3v2Token_1.UINT32SYNCSAFE.get(v, 4),\n                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n                };\n                break;\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n        return header;\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw new Error('header versionIndex is incorrect');\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),\n                file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),\n                read_only: Util_1.default.strtokBITSET.get(b, 0, 4)\n            },\n            format: {\n                grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),\n                compression: Util_1.default.strtokBITSET.get(b, 1, 3),\n                encryption: Util_1.default.strtokBITSET.get(b, 1, 2),\n                unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),\n                data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(buf, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser_1.FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags.format.unsynchronisation) {\n                    buf = ID3v2Parser.removeUnsyncBytes(buf);\n                }\n                if (frameHeader.flags.format.data_length_indicator) {\n                    buf = buf.slice(4, buf.length);\n                }\n                return frameParser.readData(buf, frameHeader.id, includeCovers);\n            default:\n                throw new Error('Unexpected majorVer: ' + majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param {string} tag e.g.: COM\n     * @param {string} description e.g. iTunPGAP\n     * @returns {string} e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? ':' + description : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Token_1.ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Error('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = ('ID3v2.' + id3Header.version.major);\n        if (id3Header.flags.isExtendedHeader) {\n            return this.parseExtendedHeader();\n        }\n        else {\n            return this.parseId3Data(id3Header.size);\n        }\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ID3v2Token_1.ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ID3v2Token_1.ExtendedHeader.len;\n        if (dataRemaining > 0) {\n            return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\n        }\n        else {\n            return this.parseId3Data(this.id3Header.size - extendedHeader.size);\n        }\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        const buffer = Buffer.alloc(dataRemaining);\n        await this.tokenizer.readBuffer(buffer, { length: dataRemaining });\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const buffer = Buffer.alloc(dataLen);\n        await this.tokenizer.readBuffer(buffer, { length: dataLen });\n        for (const tag of this.parseMetadata(buffer)) {\n            if (tag.id === 'TXXX') {\n                if (tag.value) {\n                    for (const text of tag.value.text) {\n                        this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), text);\n                    }\n                }\n            }\n            else if (tag.id === 'COM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value.text);\n                }\n            }\n            else if (tag.id === 'COMM') {\n                for (const value of tag.value) {\n                    this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value);\n                }\n            }\n            else if (Array.isArray(tag.value)) {\n                for (const value of tag.value) {\n                    this.addTag(tag.id, value);\n                }\n            }\n            else {\n                this.addTag(tag.id, tag.value);\n            }\n        }\n    }\n    addTag(id, value) {\n        this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);\n            const frameHeader = ID3v2Parser.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            // Last frame. Check first char is a letter, bit of defensive programming\n            if (frameHeader.id === '' || frameHeader.id === '\\u0000\\u0000\\u0000\\u0000' ||\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {\n                // ToDo: generate WARNING\n                break;\n            }\n            const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            tags.push({ id: frameHeader.id, value: values });\n        }\n        return tags;\n    }\n}\nexports.ID3v2Parser = ID3v2Parser;\n//# sourceMappingURL=ID3v2Parser.js.map"]},"metadata":{},"sourceType":"script"}