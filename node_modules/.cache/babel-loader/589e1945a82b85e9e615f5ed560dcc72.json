{"ast":null,"code":"const getMeasureFromValue = value => {\n  const split = value && value.split(\"x\") || [];\n  const values = split && split.map((value, index) => {\n    return parseFloat(value);\n  });\n  const unitValue = split && split.length && split[split.length - 1];\n  const unit = unitValue && unitValue.replace(/[0-9]/g, '');\n  return {\n    width: values && values[0],\n    height: values && values[1],\n    depth: values && values[2],\n    unit: unit,\n    value: value\n  };\n};\n\nconst getArrayItem = string => {\n  const split = string && string.split(\":\");\n  const name = split[0];\n  const value = split[1];\n\n  if (name && value) {\n    return { ...getMeasureFromValue(value),\n      name: name.trim()\n    };\n  } else {\n    return getMeasureFromValue(string);\n  }\n};\n\nexport const getMeasureArray = (string = \"\") => {\n  const array = string && string.split(\",\") || [];\n  return array.map(item => {\n    return getArrayItem(item);\n  });\n};\nexport default getMeasureArray;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/MeasureField/utils/getMeasureArray.js"],"names":["getMeasureFromValue","value","split","values","map","index","parseFloat","unitValue","length","unit","replace","width","height","depth","getArrayItem","string","name","trim","getMeasureArray","array","item"],"mappings":"AAAA,MAAMA,mBAAmB,GAAIC,KAAD,IAAW;AAEnC,QAAMC,KAAK,GAAGD,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAY,GAAZ,CAAT,IAA6B,EAA3C;AAEA,QAAMC,MAAM,GAAGD,KAAK,IAAIA,KAAK,CAACE,GAAN,CAAU,CAACH,KAAD,EAAQI,KAAR,KAAkB;AAChD,WAAOC,UAAU,CAACL,KAAD,CAAjB;AACH,GAFuB,CAAxB;AAIA,QAAMM,SAAS,GAAGL,KAAK,IAAIA,KAAK,CAACM,MAAf,IAAyBN,KAAK,CAACA,KAAK,CAACM,MAAN,GAAa,CAAd,CAAhD;AAEA,QAAMC,IAAI,GAAGF,SAAS,IAAIA,SAAS,CAACG,OAAV,CAAkB,QAAlB,EAA4B,EAA5B,CAA1B;AAEA,SAAO;AACHC,IAAAA,KAAK,EAAER,MAAM,IAAIA,MAAM,CAAC,CAAD,CADpB;AAEHS,IAAAA,MAAM,EAAET,MAAM,IAAIA,MAAM,CAAC,CAAD,CAFrB;AAGHU,IAAAA,KAAK,EAAEV,MAAM,IAAIA,MAAM,CAAC,CAAD,CAHpB;AAIHM,IAAAA,IAAI,EAAEA,IAJH;AAKHR,IAAAA,KAAK,EAAEA;AALJ,GAAP;AAQH,CApBD;;AAsBA,MAAMa,YAAY,GAAIC,MAAD,IAAY;AAE7B,QAAMb,KAAK,GAAGa,MAAM,IAAIA,MAAM,CAACb,KAAP,CAAa,GAAb,CAAxB;AAEA,QAAMc,IAAI,GAAGd,KAAK,CAAC,CAAD,CAAlB;AACA,QAAMD,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAnB;;AAEA,MAAIc,IAAI,IAAIf,KAAZ,EAAmB;AACf,WAAO,EACH,GAAGD,mBAAmB,CAACC,KAAD,CADnB;AAEHe,MAAAA,IAAI,EAAEA,IAAI,CAACC,IAAL;AAFH,KAAP;AAIH,GALD,MAOK;AACD,WAAOjB,mBAAmB,CAACe,MAAD,CAA1B;AACH;AAEJ,CAlBD;;AAoBA,OAAO,MAAMG,eAAe,GAAG,CAACH,MAAM,GAAG,EAAV,KAAiB;AAE5C,QAAMI,KAAK,GAAGJ,MAAM,IAAIA,MAAM,CAACb,KAAP,CAAa,GAAb,CAAV,IAA+B,EAA7C;AAEA,SAAOiB,KAAK,CAACf,GAAN,CAAUgB,IAAI,IAAI;AAAE,WAAON,YAAY,CAACM,IAAD,CAAnB;AAA2B,GAA/C,CAAP;AAGH,CAPM;AASP,eAAeF,eAAf","sourcesContent":["const getMeasureFromValue = (value) => {\n\n    const split = value && value.split(\"x\") || []\n\n    const values = split && split.map((value, index) => {\n        return parseFloat(value)\n    })\n\n    const unitValue = split && split.length && split[split.length-1]\n\n    const unit = unitValue && unitValue.replace(/[0-9]/g, '')\n\n    return {\n        width: values && values[0],\n        height: values && values[1],\n        depth: values && values[2],\n        unit: unit,\n        value: value\n    }\n\n}\n\nconst getArrayItem = (string) => {\n\n    const split = string && string.split(\":\")\n\n    const name = split[0]\n    const value = split[1]\n\n    if (name && value) {\n        return {\n            ...getMeasureFromValue(value),\n            name: name.trim(),\n        }\n    }\n\n    else {\n        return getMeasureFromValue(string)\n    }\n\n}\n\nexport const getMeasureArray = (string = \"\") => {\n\n    const array = string && string.split(\",\") || []\n\n    return array.map(item => { return getArrayItem(item) } )\n\n\n}\n\nexport default getMeasureArray"]},"metadata":{},"sourceType":"module"}