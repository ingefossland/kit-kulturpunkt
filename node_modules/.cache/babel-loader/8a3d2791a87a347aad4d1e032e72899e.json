{"ast":null,"code":"var _this = this;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport { makeStyles } from '@material-ui/core/styles';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  };\n});\n\nvar ImageCropperBase = function ImageCropperBase(_ref) {\n  var className = _ref.className,\n      imageUrl = _ref.imageUrl,\n      imageCropdata = _ref.imageCropdata,\n      options = _ref.options,\n      aspectRatio = _ref.aspectRatio,\n      onChange = _ref.onChange;\n  var classes = useStyles();\n  var cropperRef = useRef(null);\n\n  if (!imageUrl) {\n    return /*#__PURE__*/React.createElement(\"p\", null, \"No imageUrl for cropper\");\n  }\n\n  var onReady = function onReady() {\n    var image = cropperRef.current.getImageData();\n    var imageWidth = image && image.naturalWidth;\n    var imageHeight = image && image.naturalHeight;\n    var x = imageCropdata && imageCropdata.x * imageWidth / 100 || 0;\n    var y = imageCropdata && imageCropdata.y * imageHeight / 100 || 0;\n    var width = imageCropdata && imageCropdata.width * imageWidth / 100 || imageWidth;\n    var height = imageCropdata && imageCropdata.height * imageHeight / 100 || imageHeight;\n    cropperRef.current.setData(_extends({}, imageCropdata, {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    })); //        cropperRef.current.setData(imageCropdata);\n  };\n\n  var onCrop = function onCrop() {\n    var data = cropperRef.current.getData();\n    var image = cropperRef.current.getImageData();\n    var imageWidth = image && image.naturalWidth;\n    var imageHeight = image && image.naturalHeight;\n    var x = data.x / imageWidth * 100;\n    var y = data.y / imageHeight * 100;\n    var width = data.width / imageWidth * 100;\n    var height = data.height / imageHeight * 100;\n\n    var newFormData = _extends({}, data, {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n\n    onChange && onChange(newFormData);\n  };\n\n  options = _extends({}, options, {\n    aspectRatio: aspectRatio\n  });\n  return /*#__PURE__*/React.createElement(Cropper, _extends({\n    className: className || classes.root,\n    ref: cropperRef,\n    src: imageUrl\n  }, options, {\n    ready: onReady.bind(_this),\n    crop: onCrop.bind(_this)\n  }));\n};\n\nImageCropperBase.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  imageUrl: PropTypes.string\n} : {};\nImageCropperBase.defaultProps = {\n  imageUrl: undefined,\n  options: {\n    viewMode: 0,\n    dragMode: \"crop\",\n    initialAspectRatio: undefined,\n    aspectRatio: undefined,\n    responsive: true,\n    restore: true,\n    checkCrossOrigin: false,\n    checkOrientation: true,\n    modal: true,\n    guides: true,\n    center: true,\n    highlight: true,\n    background: true,\n    autoCrop: true,\n    autoCropArea: 1,\n    movable: true,\n    rotatable: true,\n    scalable: true,\n    zoomable: true,\n    zoomOnTouch: true,\n    zoomOnWheel: true,\n    wheelZoomRatio: 0.1,\n    cropBoxMovable: true,\n    cropBoxResizable: true,\n    toggleDragModeOnDblclick: true\n  },\n  imageCropdata: {\n    \"x\": undefined,\n    \"y\": undefined,\n    \"width\": undefined,\n    \"height\": undefined,\n    \"rotate\": undefined\n  }\n};\nexport default ImageCropperBase;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@kit-ui/schema/node_modules/@kit-ui/admin/es/Media/ImageCropperBase.js"],"names":["_this","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","useRef","useEffect","PropTypes","Cropper","makeStyles","useStyles","theme","root","position","top","right","bottom","left","ImageCropperBase","_ref","className","imageUrl","imageCropdata","options","aspectRatio","onChange","classes","cropperRef","createElement","onReady","image","current","getImageData","imageWidth","naturalWidth","imageHeight","naturalHeight","x","y","width","height","setData","onCrop","data","getData","newFormData","ref","src","ready","bind","crop","propTypes","process","env","NODE_ENV","string","defaultProps","undefined","viewMode","dragMode","initialAspectRatio","responsive","restore","checkCrossOrigin","checkOrientation","modal","guides","center","highlight","background","autoCrop","autoCropArea","movable","rotatable","scalable","zoomable","zoomOnTouch","zoomOnWheel","wheelZoomRatio","cropBoxMovable","cropBoxResizable","toggleDragModeOnDblclick"],"mappings":"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","sourcesContent":["var _this = this;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useRef, useEffect } from 'react';\nimport PropTypes from \"prop-types\";\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\nimport { makeStyles } from '@material-ui/core/styles';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    }\n  };\n});\n\nvar ImageCropperBase = function ImageCropperBase(_ref) {\n  var className = _ref.className,\n      imageUrl = _ref.imageUrl,\n      imageCropdata = _ref.imageCropdata,\n      options = _ref.options,\n      aspectRatio = _ref.aspectRatio,\n      onChange = _ref.onChange;\n  var classes = useStyles();\n  var cropperRef = useRef(null);\n\n  if (!imageUrl) {\n    return /*#__PURE__*/React.createElement(\"p\", null, \"No imageUrl for cropper\");\n  }\n\n  var onReady = function onReady() {\n    var image = cropperRef.current.getImageData();\n    var imageWidth = image && image.naturalWidth;\n    var imageHeight = image && image.naturalHeight;\n    var x = imageCropdata && imageCropdata.x * imageWidth / 100 || 0;\n    var y = imageCropdata && imageCropdata.y * imageHeight / 100 || 0;\n    var width = imageCropdata && imageCropdata.width * imageWidth / 100 || imageWidth;\n    var height = imageCropdata && imageCropdata.height * imageHeight / 100 || imageHeight;\n    cropperRef.current.setData(_extends({}, imageCropdata, {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    })); //        cropperRef.current.setData(imageCropdata);\n  };\n\n  var onCrop = function onCrop() {\n    var data = cropperRef.current.getData();\n    var image = cropperRef.current.getImageData();\n    var imageWidth = image && image.naturalWidth;\n    var imageHeight = image && image.naturalHeight;\n    var x = data.x / imageWidth * 100;\n    var y = data.y / imageHeight * 100;\n    var width = data.width / imageWidth * 100;\n    var height = data.height / imageHeight * 100;\n\n    var newFormData = _extends({}, data, {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    });\n\n    onChange && onChange(newFormData);\n  };\n\n  options = _extends({}, options, {\n    aspectRatio: aspectRatio\n  });\n  return /*#__PURE__*/React.createElement(Cropper, _extends({\n    className: className || classes.root,\n    ref: cropperRef,\n    src: imageUrl\n  }, options, {\n    ready: onReady.bind(_this),\n    crop: onCrop.bind(_this)\n  }));\n};\n\nImageCropperBase.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  imageUrl: PropTypes.string\n} : {};\nImageCropperBase.defaultProps = {\n  imageUrl: undefined,\n  options: {\n    viewMode: 0,\n    dragMode: \"crop\",\n    initialAspectRatio: undefined,\n    aspectRatio: undefined,\n    responsive: true,\n    restore: true,\n    checkCrossOrigin: false,\n    checkOrientation: true,\n    modal: true,\n    guides: true,\n    center: true,\n    highlight: true,\n    background: true,\n    autoCrop: true,\n    autoCropArea: 1,\n    movable: true,\n    rotatable: true,\n    scalable: true,\n    zoomable: true,\n    zoomOnTouch: true,\n    zoomOnWheel: true,\n    wheelZoomRatio: 0.1,\n    cropBoxMovable: true,\n    cropBoxResizable: true,\n    toggleDragModeOnDblclick: true\n  },\n  imageCropdata: {\n    \"x\": undefined,\n    \"y\": undefined,\n    \"width\": undefined,\n    \"height\": undefined,\n    \"rotate\": undefined\n  }\n};\nexport default ImageCropperBase;"]},"metadata":{},"sourceType":"module"}