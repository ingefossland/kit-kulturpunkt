{"ast":null,"code":"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppIcon } from \"@kit-ui/icons\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      \"&[data-is-loading=true]\": {\n        pointerEvents: \"none\"\n      }\n    },\n    loader: {\n      position: \"absolute\",\n      zIndex: 2000,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      backgroundColor: \"white\",\n      color: \"black\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      opacity: 0,\n      transition: \".5s ease-out\",\n      pointerEvents: \"none\",\n      \"[data-is-loading=true] &\": {\n        opacity: 1\n      }\n    },\n    icon: {\n      \"& > svg\": {\n        fontSize: \"64px\"\n      },\n      \"& > img\": {\n        width: theme.spacing(8),\n        height: theme.spacing(8)\n      },\n      transition: \".5s ease-out\",\n      transform: \"scale(3)\",\n      opacity: 0,\n      \"[data-is-loading=true] &\": {\n        opacity: 1,\n        transform: \"scale(1)\"\n      }\n    },\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      \"& * + *\": {\n        margin: theme.spacing(.5)\n      }\n    },\n    title: {\n      fontFamily: \"Akkurat, sans-serif\",\n      fontWeight: \"bold\",\n      fontSize: \"16px\",\n      color: theme.palette.text.primary\n    },\n    description: {\n      fontFamily: \"Akkurat, sans-serif\",\n      fontSize: \"14px\",\n      color: theme.palette.text.secondary\n    }\n  };\n});\n\nvar AppLoader = function AppLoader(_ref) {\n  var className = _ref.className,\n      _ref$isLoading = _ref.isLoading,\n      isLoading = _ref$isLoading === void 0 ? true : _ref$isLoading,\n      icon = _ref.icon,\n      imageUrl = _ref.imageUrl,\n      title = _ref.title,\n      description = _ref.description,\n      children = _ref.children;\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-is-loading\": isLoading\n  }, !isLoading && children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loader\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || imageUrl && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageUrl\n  }) || /*#__PURE__*/React.createElement(AppIcon, null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: classes.title\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.description\n  }, description))));\n};\n\nAppLoader.defaultProps = {\n  title: \"App\",\n  description: \"Loading app\"\n};\nAppLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Wheter app is loading or not, if not */\n  isLoading: PropTypes.bool,\n\n  /** SVG icon */\n  icon: PropTypes.node,\n\n  /** ImageUrl, displayed if no icon is present */\n  imageUrl: PropTypes.string,\n\n  /** Loading title, normally the title of the app that is loading */\n  title: PropTypes.string,\n\n  /** Description. Consider changing this on load progress */\n  description: PropTypes.string\n} : {};\nexport default AppLoader;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/@kit-ui/admin/es/AppLoader/AppLoader.js"],"names":["React","PropTypes","makeStyles","AppIcon","useStyles","theme","root","position","top","right","bottom","left","pointerEvents","loader","zIndex","backgroundColor","color","display","flexDirection","alignItems","justifyContent","opacity","transition","icon","fontSize","width","spacing","height","transform","content","margin","title","fontFamily","fontWeight","palette","text","primary","description","secondary","AppLoader","_ref","className","_ref$isLoading","isLoading","imageUrl","children","classes","createElement","src","defaultProps","propTypes","process","env","NODE_ENV","bool","node","string"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,IAAIC,SAAS,GAAGF,UAAU,CAAC,UAAUG,KAAV,EAAiB;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJC,MAAAA,QAAQ,EAAE,UADN;AAEJC,MAAAA,GAAG,EAAE,CAFD;AAGJC,MAAAA,KAAK,EAAE,CAHH;AAIJC,MAAAA,MAAM,EAAE,CAJJ;AAKJC,MAAAA,IAAI,EAAE,CALF;AAMJ,iCAA2B;AACzBC,QAAAA,aAAa,EAAE;AADU;AANvB,KADD;AAWLC,IAAAA,MAAM,EAAE;AACNN,MAAAA,QAAQ,EAAE,UADJ;AAENO,MAAAA,MAAM,EAAE,IAFF;AAGNN,MAAAA,GAAG,EAAE,CAHC;AAINC,MAAAA,KAAK,EAAE,CAJD;AAKNC,MAAAA,MAAM,EAAE,CALF;AAMNC,MAAAA,IAAI,EAAE,CANA;AAONI,MAAAA,eAAe,EAAE,OAPX;AAQNC,MAAAA,KAAK,EAAE,OARD;AASNC,MAAAA,OAAO,EAAE,MATH;AAUNC,MAAAA,aAAa,EAAE,QAVT;AAWNC,MAAAA,UAAU,EAAE,QAXN;AAYNC,MAAAA,cAAc,EAAE,QAZV;AAaNC,MAAAA,OAAO,EAAE,CAbH;AAcNC,MAAAA,UAAU,EAAE,cAdN;AAeNV,MAAAA,aAAa,EAAE,MAfT;AAgBN,kCAA4B;AAC1BS,QAAAA,OAAO,EAAE;AADiB;AAhBtB,KAXH;AA+BLE,IAAAA,IAAI,EAAE;AACJ,iBAAW;AACTC,QAAAA,QAAQ,EAAE;AADD,OADP;AAIJ,iBAAW;AACTC,QAAAA,KAAK,EAAEpB,KAAK,CAACqB,OAAN,CAAc,CAAd,CADE;AAETC,QAAAA,MAAM,EAAEtB,KAAK,CAACqB,OAAN,CAAc,CAAd;AAFC,OAJP;AAQJJ,MAAAA,UAAU,EAAE,cARR;AASJM,MAAAA,SAAS,EAAE,UATP;AAUJP,MAAAA,OAAO,EAAE,CAVL;AAWJ,kCAA4B;AAC1BA,QAAAA,OAAO,EAAE,CADiB;AAE1BO,QAAAA,SAAS,EAAE;AAFe;AAXxB,KA/BD;AA+CLC,IAAAA,OAAO,EAAE;AACPZ,MAAAA,OAAO,EAAE,MADF;AAEPC,MAAAA,aAAa,EAAE,QAFR;AAGPC,MAAAA,UAAU,EAAE,QAHL;AAIP,iBAAW;AACTW,QAAAA,MAAM,EAAEzB,KAAK,CAACqB,OAAN,CAAc,EAAd;AADC;AAJJ,KA/CJ;AAuDLK,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,qBADP;AAELC,MAAAA,UAAU,EAAE,MAFP;AAGLT,MAAAA,QAAQ,EAAE,MAHL;AAILR,MAAAA,KAAK,EAAEX,KAAK,CAAC6B,OAAN,CAAcC,IAAd,CAAmBC;AAJrB,KAvDF;AA6DLC,IAAAA,WAAW,EAAE;AACXL,MAAAA,UAAU,EAAE,qBADD;AAEXR,MAAAA,QAAQ,EAAE,MAFC;AAGXR,MAAAA,KAAK,EAAEX,KAAK,CAAC6B,OAAN,CAAcC,IAAd,CAAmBG;AAHf;AA7DR,GAAP;AAmED,CApEyB,CAA1B;;AAsEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvC,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,cAAc,GAAGF,IAAI,CAACG,SAD1B;AAAA,MAEIA,SAAS,GAAGD,cAAc,KAAK,KAAK,CAAxB,GAA4B,IAA5B,GAAmCA,cAFnD;AAAA,MAGInB,IAAI,GAAGiB,IAAI,CAACjB,IAHhB;AAAA,MAIIqB,QAAQ,GAAGJ,IAAI,CAACI,QAJpB;AAAA,MAKIb,KAAK,GAAGS,IAAI,CAACT,KALjB;AAAA,MAMIM,WAAW,GAAGG,IAAI,CAACH,WANvB;AAAA,MAOIQ,QAAQ,GAAGL,IAAI,CAACK,QAPpB;AAQA,MAAIC,OAAO,GAAG1C,SAAS,EAAvB;AACA,SAAO,aAAaJ,KAAK,CAAC+C,aAAN,CAAoB,KAApB,EAA2B;AAC7C,uBAAmBJ;AAD0B,GAA3B,EAEjB,CAACA,SAAD,IAAcE,QAFG,EAEO,aAAa7C,KAAK,CAAC+C,aAAN,CAAoB,KAApB,EAA2B;AACjEN,IAAAA,SAAS,EAAEK,OAAO,CAACjC;AAD8C,GAA3B,EAErC,aAAab,KAAK,CAAC+C,aAAN,CAAoB,KAApB,EAA2B;AACzCN,IAAAA,SAAS,EAAEK,OAAO,CAACvB;AADsB,GAA3B,EAEbA,IAAI,IAAIqB,QAAQ,IAAI,aAAa5C,KAAK,CAAC+C,aAAN,CAAoB,KAApB,EAA2B;AAC7DC,IAAAA,GAAG,EAAEJ;AADwD,GAA3B,CAAjC,IAEG,aAAa5C,KAAK,CAAC+C,aAAN,CAAoB5C,OAApB,EAA6B,IAA7B,CAJH,CAFwB,EAMgB,aAAaH,KAAK,CAAC+C,aAAN,CAAoB,KAApB,EAA2B;AAC9FN,IAAAA,SAAS,EAAEK,OAAO,CAACjB;AAD2E,GAA3B,EAElE,aAAa7B,KAAK,CAAC+C,aAAN,CAAoB,IAApB,EAA0B;AACxCN,IAAAA,SAAS,EAAEK,OAAO,CAACf;AADqB,GAA1B,EAEbA,KAFa,CAFqD,EAI1D,aAAa/B,KAAK,CAAC+C,aAAN,CAAoB,GAApB,EAAyB;AAC/CN,IAAAA,SAAS,EAAEK,OAAO,CAACT;AAD4B,GAAzB,EAErBA,WAFqB,CAJ6C,CAN7B,CAFpB,CAApB;AAeD,CAzBD;;AA2BAE,SAAS,CAACU,YAAV,GAAyB;AACvBlB,EAAAA,KAAK,EAAE,KADgB;AAEvBM,EAAAA,WAAW,EAAE;AAFU,CAAzB;AAIAE,SAAS,CAACW,SAAV,GAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC5D;AACAV,EAAAA,SAAS,EAAE1C,SAAS,CAACqD,IAFuC;;AAI5D;AACA/B,EAAAA,IAAI,EAAEtB,SAAS,CAACsD,IAL4C;;AAO5D;AACAX,EAAAA,QAAQ,EAAE3C,SAAS,CAACuD,MARwC;;AAU5D;AACAzB,EAAAA,KAAK,EAAE9B,SAAS,CAACuD,MAX2C;;AAa5D;AACAnB,EAAAA,WAAW,EAAEpC,SAAS,CAACuD;AAdqC,CAAxC,GAelB,EAfJ;AAgBA,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppIcon } from \"@kit-ui/icons\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      \"&[data-is-loading=true]\": {\n        pointerEvents: \"none\"\n      }\n    },\n    loader: {\n      position: \"absolute\",\n      zIndex: 2000,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      backgroundColor: \"white\",\n      color: \"black\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      opacity: 0,\n      transition: \".5s ease-out\",\n      pointerEvents: \"none\",\n      \"[data-is-loading=true] &\": {\n        opacity: 1\n      }\n    },\n    icon: {\n      \"& > svg\": {\n        fontSize: \"64px\"\n      },\n      \"& > img\": {\n        width: theme.spacing(8),\n        height: theme.spacing(8)\n      },\n      transition: \".5s ease-out\",\n      transform: \"scale(3)\",\n      opacity: 0,\n      \"[data-is-loading=true] &\": {\n        opacity: 1,\n        transform: \"scale(1)\"\n      }\n    },\n    content: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      \"& * + *\": {\n        margin: theme.spacing(.5)\n      }\n    },\n    title: {\n      fontFamily: \"Akkurat, sans-serif\",\n      fontWeight: \"bold\",\n      fontSize: \"16px\",\n      color: theme.palette.text.primary\n    },\n    description: {\n      fontFamily: \"Akkurat, sans-serif\",\n      fontSize: \"14px\",\n      color: theme.palette.text.secondary\n    }\n  };\n});\n\nvar AppLoader = function AppLoader(_ref) {\n  var className = _ref.className,\n      _ref$isLoading = _ref.isLoading,\n      isLoading = _ref$isLoading === void 0 ? true : _ref$isLoading,\n      icon = _ref.icon,\n      imageUrl = _ref.imageUrl,\n      title = _ref.title,\n      description = _ref.description,\n      children = _ref.children;\n  var classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    \"data-is-loading\": isLoading\n  }, !isLoading && children, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loader\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || imageUrl && /*#__PURE__*/React.createElement(\"img\", {\n    src: imageUrl\n  }) || /*#__PURE__*/React.createElement(AppIcon, null)), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.content\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: classes.title\n  }, title), /*#__PURE__*/React.createElement(\"p\", {\n    className: classes.description\n  }, description))));\n};\n\nAppLoader.defaultProps = {\n  title: \"App\",\n  description: \"Loading app\"\n};\nAppLoader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Wheter app is loading or not, if not */\n  isLoading: PropTypes.bool,\n\n  /** SVG icon */\n  icon: PropTypes.node,\n\n  /** ImageUrl, displayed if no icon is present */\n  imageUrl: PropTypes.string,\n\n  /** Loading title, normally the title of the app that is loading */\n  title: PropTypes.string,\n\n  /** Description. Consider changing this on load progress */\n  description: PropTypes.string\n} : {};\nexport default AppLoader;"]},"metadata":{},"sourceType":"module"}