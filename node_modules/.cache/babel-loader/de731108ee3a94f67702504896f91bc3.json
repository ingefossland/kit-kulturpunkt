{"ast":null,"code":"const getVisibilityOptions = props => {\n  const {\n    hideable,\n    hidden,\n    deletable,\n    deleted,\n    restorable,\n    restored,\n    removable\n  } = props;\n  const {\n    onHide,\n    onUnhide,\n    onDelete,\n    onRestore,\n    onRemove\n  } = props; // hideable\n\n  let options = [];\n\n  if (hideable) {\n    options.push({\n      name: \"hidden\",\n      icon: \"visibility\",\n      title: \"Visible\",\n      onClick: onUnhide\n    });\n    options.push({\n      name: \"hidden\",\n      icon: \"visibility_off\",\n      title: \"Hidden\",\n      onClick: onHide\n    });\n  } // deletable && restorable\n\n\n  if (deletable && restorable) {\n    if (deleted) {\n      options.push({\n        type: \"button\",\n        variant: \"outlined\",\n        name: \"restore\",\n        title: \"Restore\",\n        onClick: onRestore\n      });\n    } else {\n      options.push({\n        type: \"button\",\n        variant: \"outlined\",\n        name: \"delete\",\n        title: \"Delete\",\n        onClick: onDelete\n      });\n    } // deletable\n\n  } else if (deletable && onDelete) {\n    options.push({\n      type: \"button\",\n      variant: \"outlined\",\n      name: \"delete\",\n      title: \"Delete\",\n      onClick: onDelete\n    }); // removable\n  } else if (removable) {\n    options.push({\n      type: \"button\",\n      variant: \"outlined\",\n      name: \"remove\",\n      title: \"Remove\",\n      onClick: onRemove\n    });\n  } // set icon\n\n\n  let icon;\n\n  if (deleted && restorable) {\n    icon = \"restore\";\n  } else if (deleted) {\n    icon = \"delete\";\n  } else if (hidden) {\n    icon = \"visibility_off\";\n  } else {\n    icon = \"visibility\";\n  }\n\n  return {\n    name: \"visibility\",\n    icon: icon,\n    options: options\n  };\n};\n\nconst getVisibilityToolbar = (props, toolbar) => {\n  const {\n    hideable,\n    hidden,\n    deletable,\n    deleted,\n    restorable,\n    restored,\n    erasable,\n    erased,\n    addable,\n    removable\n  } = props;\n  const {\n    onHide,\n    onUnhide,\n    onDelete,\n    onRestore,\n    onErase,\n    onRemove\n  } = props; // deleted\n\n  if (deleted) {\n    toolbar = [];\n\n    if (restorable) {\n      toolbar.push({\n        name: \"restore\",\n        icon: \"restore\",\n        onClick: onRestore\n      });\n    }\n\n    if (erasable) {\n      toolbar.push({\n        name: \"erase\",\n        icon: \"delete_forever\",\n        onClick: onErase\n      });\n    }\n\n    if (!toolbar.length) {\n      toolbar.push({\n        name: \"deleted\",\n        icon: \"delete\",\n        disabled: true\n      });\n    }\n\n    return toolbar; // hideable => visibility options\n  } else if (hideable && (deletable || restorable)) {\n    let visibility = getVisibilityOptions(props);\n    toolbar.push(visibility); // hideable\n  } else if (hideable && hidden) {\n    toolbar.push({\n      name: \"hidden\",\n      icon: \"visibility_off\",\n      onClick: onUnhide\n    });\n  } else if (hideable) {\n    toolbar.push({\n      name: \"hidden\",\n      icon: \"visibility\",\n      onClick: onHide\n    }); // deletable\n  } else if (deletable) {\n    toolbar.push({\n      name: \"remove\",\n      icon: \"delete\",\n      onClick: onDelete\n    }); // removable\n  } else if (removable) {\n    toolbar.push({\n      name: \"remove\",\n      icon: \"remove_circle\",\n      onClick: onRemove\n    });\n  }\n\n  return toolbar;\n};\n\nconst getEditableToolbar = (props, toolbar) => {\n  const {\n    editable,\n    editing\n  } = props;\n  const {\n    onEdit,\n    onSave\n  } = props;\n\n  if (editable && editing) {\n    toolbar.unshift({\n      label: \"Save\",\n      onClick: onSave\n    });\n  } else if (editable) {\n    toolbar.unshift({\n      icon: \"edit\",\n      onClick: onEdit\n    });\n  }\n\n  return toolbar;\n};\n\nexport const getToolbar = props => {\n  let toolbar = [];\n  toolbar = getEditableToolbar(props, toolbar);\n  toolbar = getVisibilityToolbar(props, toolbar);\n  return toolbar;\n};\nexport default getToolbar;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/NavToolbar/getToolbar.js"],"names":["getVisibilityOptions","props","hideable","hidden","deletable","deleted","restorable","restored","removable","onHide","onUnhide","onDelete","onRestore","onRemove","options","push","name","icon","title","onClick","type","variant","getVisibilityToolbar","toolbar","erasable","erased","addable","onErase","length","disabled","visibility","getEditableToolbar","editable","editing","onEdit","onSave","unshift","label","getToolbar"],"mappings":"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","sourcesContent":["\nconst getVisibilityOptions = (props) => {\n    const { hideable, hidden, deletable, deleted, restorable, restored, removableÂ } = props\n    const { onHide, onUnhide, onDelete, onRestore, onRemove } = props\n\n    // hideable\n\n    let options = []\n    \n    if (hideable) {\n        \n        options.push({\n            name: \"hidden\",\n            icon: \"visibility\",\n            title: \"Visible\",\n            onClick: onUnhide\n        })\n\n        options.push({\n            name: \"hidden\",\n            icon: \"visibility_off\",\n            title: \"Hidden\",\n            onClick: onHide\n        })\n        \n    }\n    \n    // deletable && restorable\n    \n    if (deletable && restorable) {\n        \n        if (deleted) {\n            options.push({\n                type: \"button\",\n                variant: \"outlined\",\n                name: \"restore\",\n                title: \"Restore\",\n                onClick: onRestore\n            })            \n        } else {\n            options.push({\n                type: \"button\",\n                variant: \"outlined\",\n                name: \"delete\",\n                title: \"Delete\",\n                onClick: onDelete\n            })            \n        }\n\n    // deletable\n        \n    } else if (deletable && onDelete) {\n\n        options.push({\n            type: \"button\",\n            variant: \"outlined\",\n            name: \"delete\",\n            title: \"Delete\",\n            onClick: onDelete\n        })            \n\n    // removable\n\n    } else if (removable) {\n\n        options.push({\n            type: \"button\",\n            variant: \"outlined\",\n            name: \"remove\",\n            title: \"Remove\",\n            onClick: onRemove\n        })            \n\n    }\n    \n    // set icon\n\n    let icon;\n\n    if (deleted && restorable) {\n        icon = \"restore\"\n    } else if (deleted) {\n        icon = \"delete\"\n    } else if (hidden) {\n        icon = \"visibility_off\"\n    } else {\n        icon = \"visibility\"\n    }\n    \n    return {\n        name: \"visibility\",\n        icon: icon,\n        options: options\n    }\n    \n}\n\nconst getVisibilityToolbar = (props, toolbar) => {\n    const { hideable, hidden, deletable, deleted, restorable, restored, erasable, erased, addable, removableÂ } = props\n    const { onHide, onUnhide, onDelete, onRestore, onErase, onRemove } = props\n\n    // deleted\n\n    if (deleted) {\n            \n        toolbar = [];\n\n        if (restorable) {\n            toolbar.push({\n                name: \"restore\",\n                icon: \"restore\",\n                onClick: onRestore\n            });\n        }\n\n        if (erasable) {\n            toolbar.push({\n                name: \"erase\",\n                icon: \"delete_forever\",\n                onClick: onErase\n            });\n        }\n\n        if (!toolbar.length) {\n            toolbar.push({\n                name: \"deleted\",\n                icon: \"delete\",\n                disabled: true\n            });\n        }\n\n        \n        return toolbar;\n\n    // hideable => visibility options\n    \n    } else if (hideable && (deletable || restorable)) {\n\n        let visibility = getVisibilityOptions(props)\n        toolbar.push(visibility)\n\n    // hideable\n\n    } else if (hideable && hidden) {\n\n        toolbar.push({\n            name: \"hidden\",\n            icon: \"visibility_off\",\n            onClick: onUnhide\n        })\n\n    } else if (hideable) {\n\n        toolbar.push({\n            name: \"hidden\",\n            icon: \"visibility\",\n            onClick: onHide\n        })\n       \n    // deletable\n\n    } else if (deletable) {\n        toolbar.push({\n            name: \"remove\",\n            icon: \"delete\",\n            onClick: onDelete\n        })\n\n    // removable\n        \n    } else if (removable) {\n        toolbar.push({\n            name: \"remove\",\n            icon: \"remove_circle\",\n            onClick: onRemove\n        })\n        \n    }\n\n    return toolbar\n\n}\n\n\nconst getEditableToolbar = (props, toolbar) => {\n    const { editable, editing } = props\n    const { onEdit, onSave } = props\n\n    if (editable && editing) {\n        toolbar.unshift({\n            label: \"Save\",\n            onClick: onSave\n        })\n    } else if (editable) {\n        toolbar.unshift({\n            icon: \"edit\",\n            onClick: onEdit\n        })\n    }\n\n    return toolbar\n\n}\n\nexport const getToolbar = (props) => {\n\n    let toolbar = []\n\n    toolbar = getEditableToolbar(props, toolbar)\n    toolbar = getVisibilityToolbar(props, toolbar)\n    \n    return toolbar;    \n  \n}\n\nexport default getToolbar"]},"metadata":{},"sourceType":"module"}