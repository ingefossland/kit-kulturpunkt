{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/FavouritesDialog.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport DialogBase from \"./DialogBase\";\nimport SearchDialog from \"./SearchDialog\";\n\nconst FavouritesDialog = ({\n  query,\n  favourites,\n  ...props\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation(['dialog']);\n  const search = {\n    placeholder: t('Search favorites')\n  };\n\n  const getFavouritesQuery = (uniqueIds = []) => {\n    if (uniqueIds.length) {\n      return { ...query,\n        q: \"uniqueId:\" + uniqueIds.join(\" OR \")\n      };\n    } else {\n      return { ...query,\n        q: \"uniqueId:false\"\n      };\n    }\n\n    return query;\n  };\n\n  if (query.models && favourites[query.models]) {\n    query = getFavouritesQuery(favourites[query.models]);\n  }\n\n  return /*#__PURE__*/React.createElement(DialogBase, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchDialog, Object.assign({\n    query: query,\n    search: search\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })));\n};\n\nFavouritesDialog.defaultProps = {\n  favourites: {\n    media: [],\n    documents: []\n  }\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nconst mapStateToProps = state => {\n  return {\n    favourites: state.favourites\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavouritesDialog);","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/FavouritesDialog.js"],"names":["React","useState","useEffect","useTranslation","connect","bindActionCreators","DialogBase","SearchDialog","FavouritesDialog","query","favourites","props","t","i18n","search","placeholder","getFavouritesQuery","uniqueIds","length","q","join","models","defaultProps","media","documents","mapDispatchToProps","dispatch","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACxD,QAAM;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,MAAcV,cAAc,CAAC,CAAC,QAAD,CAAD,CAAlC;AAEA,QAAMW,MAAM,GAAG;AACXC,IAAAA,WAAW,EAAEH,CAAC,CAAC,kBAAD;AADH,GAAf;;AAIA,QAAMI,kBAAkB,GAAG,CAACC,SAAS,GAAG,EAAb,KAAoB;AAE3C,QAAIA,SAAS,CAACC,MAAd,EAAsB;AAClB,aAAO,EACH,GAAGT,KADA;AAEHU,QAAAA,CAAC,EAAE,cAAcF,SAAS,CAACG,IAAV,CAAe,MAAf;AAFd,OAAP;AAIH,KALD,MAKO;AACH,aAAO,EACH,GAAGX,KADA;AAEHU,QAAAA,CAAC,EAAE;AAFA,OAAP;AAKH;;AAED,WAAOV,KAAP;AAEH,GAjBD;;AAmBA,MAAIA,KAAK,CAACY,MAAN,IAAgBX,UAAU,CAACD,KAAK,CAACY,MAAP,CAA9B,EAA8C;AAC1CZ,IAAAA,KAAK,GAAGO,kBAAkB,CAACN,UAAU,CAACD,KAAK,CAACY,MAAP,CAAX,CAA1B;AACH;;AAED,sBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEZ,KAArB;AAA4B,IAAA,MAAM,EAAEK;AAApC,KAAgDH,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAMH,CApCD;;AAsCAH,gBAAgB,CAACc,YAAjB,GAAgC;AAC5BZ,EAAAA,UAAU,EAAE;AACRa,IAAAA,KAAK,EAAE,EADC;AAERC,IAAAA,SAAS,EAAE;AAFH;AADgB,CAAhC;;AAOA,MAAMC,kBAAkB,GAAIC,QAAD,IACvBrB,kBAAkB,CAAC,EAAD,EAEtBqB,QAFsB,CADtB;;AAKA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAlB,IAAAA,UAAU,EAAEkB,KAAK,CAAClB;AADlB,GAAP;AAGA,CAJD;;AAMA,eAAeN,OAAO,CAClBuB,eADkB,EAElBF,kBAFkB,CAAP,CAGbjB,gBAHa,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport DialogBase from \"./DialogBase\"\nimport SearchDialog from \"./SearchDialog\"\n\nconst FavouritesDialog = ({query, favourites, ...props}) => {\n    const { t, i18n } = useTranslation(['dialog']);\n\n    const search = {\n        placeholder: t('Search favorites')\n    }\n\n    const getFavouritesQuery = (uniqueIds = []) => {\n\n        if (uniqueIds.length) {\n            return {\n                ...query,\n                q: \"uniqueId:\" + uniqueIds.join(\" OR \")\n            }\n        } else {\n            return {\n                ...query,\n                q: \"uniqueId:false\"\n            }\n\n        }\n\n        return query\n\n    }\n\n    if (query.models && favourites[query.models]) {\n        query = getFavouritesQuery(favourites[query.models])\n    }\n\n    return (\n        <DialogBase>\n            <SearchDialog query={query} search={search} {...props} />\n        </DialogBase>\n    )\n\n}\n\nFavouritesDialog.defaultProps = {\n    favourites: {\n        media: [],\n        documents: []\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators({\n    }, \ndispatch);\n\nconst mapStateToProps = (state) => {\n\treturn {\n        favourites: state.favourites,\n\t};\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(FavouritesDialog);"]},"metadata":{},"sourceType":"module"}