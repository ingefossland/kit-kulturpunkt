{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/ByMonthDayWidget.js\";\nimport React from \"react\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    \"&[aria-checked=true]\": {\n      \"& $label\": {\n        backgroundColor: theme.palette.primary.main,\n        color: theme.palette.primary.contrastText\n      }\n    }\n  },\n  label: {\n    display: \"block\",\n    border: \"1px solid\",\n    borderRadius: \"100%\",\n    width: \"3em\",\n    height: \"3em\",\n    fontSize: \".5em\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    margin: \"-.5em\"\n  }\n}));\n\nconst ByMonthDayButton = ({\n  checked,\n  onClick,\n  label\n}) => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-checked\": checked,\n    className: classes.button,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, label.substr(0, 2)));\n};\n\nconst selectValue = (value, selected, all) => {\n  const at = all.indexOf(value);\n  const updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty\n  // arrays, we need to reorder the updated selection to match the initial order\n\n  return updated.sort((a, b) => all.indexOf(a) > all.indexOf(b));\n};\n\nconst deselectValue = (value, selected) => {\n  return selected.filter(v => v !== value);\n};\n\nconst ByDayWidget = ({\n  schema,\n  //  label,\n  id,\n  disabled,\n  options,\n  value,\n  autofocus,\n  readonly,\n  required,\n  onChange,\n  onBlur,\n  onFocus,\n  ...props\n}) => {\n  const {\n    enumOptions,\n    enumDisabled\n  } = options;\n  /*\n  const _onChange = (option) => ({ target: { checked }}) => {\n      const all = (enumOptions).map(({ value }) => value);\n       if (checked) {\n          onChange(selectValue(option.value, value, all));\n      } else {\n          onChange(deselectValue(option.value, value));\n      }\n  };\n  */\n\n  const _onToggle = option => {\n    const all = enumOptions.map(({\n      value\n    }) => value);\n\n    if (!option.checked) {\n      onChange(selectValue(option.value, value, all));\n    } else {\n      onChange(deselectValue(option.value, value));\n    }\n  };\n\n  const _onBlur = ({\n    target: {\n      value\n    }\n  }) => onBlur(id, value);\n\n  const _onFocus = ({\n    target: {\n      value\n    }\n  }) => onFocus(id, value);\n\n  const label = options.title || props.title || props.label || \"checkboxes\";\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormLabel, {\n    required: required,\n    htmlFor: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, label || schema.title), /*#__PURE__*/React.createElement(FormGroup, {\n    row: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, enumOptions.map((option, index) => {\n    const checked = value.indexOf(option.value) !== -1;\n    const itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;\n    option = { ...option,\n      checked: checked,\n      disabled: disabled || itemDisabled || readonly\n    };\n    return /*#__PURE__*/React.createElement(ByMonthDayButton, Object.assign({}, option, {\n      id: `${id}_${index}`,\n      color: \"primary\",\n      autoFocus: autofocus && index === 0,\n      onClick: () => _onToggle(option),\n      onBlur: _onBlur,\n      onFocus: _onFocus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }));\n  })));\n};\n\nexport default ByDayWidget;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/components/EventField/ByMonthDayWidget.js"],"names":["React","FormLabel","FormGroup","IconButton","makeStyles","useStyles","theme","button","backgroundColor","palette","primary","main","color","contrastText","label","display","border","borderRadius","width","height","fontSize","alignItems","justifyContent","margin","ByMonthDayButton","checked","onClick","classes","substr","selectValue","value","selected","all","at","indexOf","updated","slice","concat","sort","a","b","deselectValue","filter","v","ByDayWidget","schema","id","disabled","options","autofocus","readonly","required","onChange","onBlur","onFocus","props","enumOptions","enumDisabled","_onToggle","option","map","_onBlur","target","_onFocus","title","index","itemDisabled"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        \"&[aria-checked=true]\": {\n\n            \"& $label\": {\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.primary.contrastText\n            }\n\n        }\n    },\n    label: {\n        display: \"block\",\n        border: \"1px solid\",\n        borderRadius: \"100%\",\n        width: \"3em\",\n        height: \"3em\",\n        fontSize: \".5em\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        margin: \"-.5em\"\n    }\n}));\n\nconst ByMonthDayButton = ({checked, onClick, label }) => {\n    const classes = useStyles()\n\n    return (\n        <IconButton aria-checked={checked} className={classes.button} onClick={onClick}>\n            <span className={classes.label}>{label.substr(0,2)}</span>\n        </IconButton>\n    )\n}\n\nconst selectValue = (value, selected, all) => {\n    const at = all.indexOf(value);\n    const updated = selected.slice(0, at).concat(value, selected.slice(at));\n\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => all.indexOf(a) > all.indexOf(b));\n};\n\nconst deselectValue = (value, selected) => {\n    return selected.filter((v) => v !== value);\n};\n\nconst ByDayWidget = ({\n    schema,\n    //  label,\n    id,\n    disabled,\n    options,\n    value,\n    autofocus,\n    readonly,\n    required,\n    onChange,\n    onBlur,\n    onFocus,\n    ...props\n}) => {\n    const { enumOptions, enumDisabled } = options;\n\n    /*\n    const _onChange = (option) => ({ target: { checked }}) => {\n        const all = (enumOptions).map(({ value }) => value);\n\n        if (checked) {\n            onChange(selectValue(option.value, value, all));\n        } else {\n            onChange(deselectValue(option.value, value));\n        }\n    };\n    */\n\n    const _onToggle = (option) => {\n        const all = (enumOptions).map(({ value }) => value);\n\n        if (!option.checked) {\n            onChange(selectValue(option.value, value, all));\n        } else {\n            onChange(deselectValue(option.value, value));\n        }\n    }\n\n    const _onBlur = ({ target: { value }}) => onBlur(id, value);\n    const _onFocus = ({ target: { value }}) => onFocus(id, value);\n\n    const label = options.title || props.title || props.label || \"checkboxes\"\n\n    return (\n        <>\n            <FormLabel required={required} htmlFor={id}>\n                {label || schema.title}\n            </FormLabel>\n            <FormGroup row={true}>\n                {(enumOptions).map((option, index) => {\n\n                    const checked = value.indexOf(option.value) !== -1;\n                    const itemDisabled = enumDisabled && (enumDisabled).indexOf(option.value) != -1;\n\n                    option = {\n                        ...option,\n                        checked: checked,\n                        disabled: disabled || itemDisabled || readonly\n                    }\n\n                    return (\n                        <ByMonthDayButton\n                            {...option}\n                            id={`${id}_${index}`}\n                            color=\"primary\"\n                            autoFocus={autofocus && index === 0}\n                            onClick={() => _onToggle(option)}\n                            onBlur={_onBlur}\n                            onFocus={_onFocus}\n                        />\n\n                    )\n\n                })}\n            </FormGroup>\n        </>\n    )\n}\n\nexport default ByDayWidget"]},"metadata":{},"sourceType":"module"}