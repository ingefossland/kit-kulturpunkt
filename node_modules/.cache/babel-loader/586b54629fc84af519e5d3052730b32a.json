{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/MediaResults.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { getMediaSource } from '../redux/modelsById';\nimport ResultsList from \"./ResultsList\";\nimport ResultsGallery from \"./ResultsGallery\";\nimport ResultsUploads from \"./ResultsUploads\";\nimport { utils } from '@kit-ui/schema';\nconst {\n  getDefaultFormState\n} = utils;\nconst templates = {\n  \"list\": ResultsList,\n  \"gallery\": ResultsGallery,\n  \"uploads\": ResultsUploads\n};\n\nconst MediaResults = ({\n  schema,\n  formData,\n  onChange,\n  query = {},\n  search = {},\n  layout = \"list\",\n  ...props\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation(['dialog']);\n  const dispatch = useDispatch(); // schema\n\n  let itemSchema;\n\n  if (schema.type === \"array\") {\n    itemSchema = schema.items;\n  } else {\n    itemSchema = schema;\n  } // set selected\n\n\n  const [modelsSelected, setModelsSelected] = useState([]);\n\n  const getSelected = formData => {\n    let items = [];\n\n    if (schema.type === \"array\") {\n      items = formData || [];\n    } else {\n      items = formData && [formData] || [];\n    }\n\n    const selected = items.map(({\n      media,\n      mediaId\n    }) => {\n      if (media.source && media.sourceId) {\n        return media.source + \"/\" + media.sourceId;\n      }\n\n      return mediaId;\n    });\n    setModelsSelected(selected);\n  };\n\n  useEffect(() => {\n    getSelected(formData);\n  }, [formData]); // change\n\n  const handleChange = formData => {\n    const newFormData = getDefaultFormState(schema, formData);\n    onChange(newFormData);\n  }; // add\n\n\n  const addModel = model => {\n    const item = getDefaultFormState(itemSchema, {\n      mediaId: model.uniqueId,\n      media: model\n    });\n    let newFormData;\n\n    if (schema.type === \"array\") {\n      newFormData = [].concat(formData, item);\n    } else {\n      newFormData = item;\n    }\n\n    handleChange(newFormData);\n  };\n\n  const handleAdd = model => {\n    const {\n      uniqueId,\n      sourceId,\n      mediaType\n    } = model;\n    console.log('addModel', model);\n\n    if (sourceId) {\n      console.log('sourceId', sourceId);\n      const source = { ...model,\n        identifier: sourceId,\n        mimeType: mediaType,\n        collectionId: query.collectionId\n      };\n      console.log('source', source);\n      dispatch(getMediaSource({ ...model,\n        identifier: sourceId,\n        mimeType: mediaType,\n        collectionId: query.collectionId\n      }, model => addModel(model)));\n    } else if (uniqueId) {\n      addModel(model);\n    }\n  }; // remove\n\n\n  const removeItem = ({\n    uniqueId,\n    source,\n    sourceId\n  }) => {\n    return formData.filter(item => item.mediaId !== uniqueId);\n  };\n\n  const handleRemove = model => {\n    const uniqueId = model && model.uniqueId;\n    console.log('remove', model);\n    let newFormData;\n\n    if (schema.type === \"array\") {\n      newFormData = removeItem({\n        uniqueId\n      });\n    } else {\n      newFormData = getDefaultFormState(itemSchema, {\n        mediaId: undefined,\n        media: {}\n      });\n    }\n\n    handleChange(newFormData);\n  }; // get template\n\n\n  const ResultsTemplate = templates && templates[layout];\n\n  if (!ResultsTemplate) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"No template for \", layout);\n  }\n\n  return /*#__PURE__*/React.createElement(ResultsTemplate, Object.assign({}, props, search, {\n    selected: modelsSelected,\n    query: query,\n    onAdd: handleAdd,\n    onRemove: handleRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default MediaResults;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/MediaResults.js"],"names":["React","useState","useEffect","useSelector","useDispatch","useTranslation","getMediaSource","ResultsList","ResultsGallery","ResultsUploads","utils","getDefaultFormState","templates","MediaResults","schema","formData","onChange","query","search","layout","props","t","i18n","dispatch","itemSchema","type","items","modelsSelected","setModelsSelected","getSelected","selected","map","media","mediaId","source","sourceId","handleChange","newFormData","addModel","model","item","uniqueId","concat","handleAdd","mediaType","console","log","identifier","mimeType","collectionId","removeItem","filter","handleRemove","undefined","ResultsTemplate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { getMediaSource } from '../redux/modelsById';\n\nimport ResultsList from \"./ResultsList\"\nimport ResultsGallery from \"./ResultsGallery\"\nimport ResultsUploads from \"./ResultsUploads\"\n\nimport { utils } from '@kit-ui/schema';\nconst { getDefaultFormState } = utils\n\nconst templates = {\n    \"list\": ResultsList,\n    \"gallery\": ResultsGallery,\n    \"uploads\": ResultsUploads\n}\n\nconst MediaResults = ({schema, formData, onChange, query = {}, search = {}, layout = \"list\", ...props}) => {\n    const { t, i18n } = useTranslation(['dialog']);\n    const dispatch = useDispatch()\n\n    // schema\n\n    let itemSchema;\n\n    if (schema.type === \"array\") {\n        itemSchema = schema.items\n    } else {\n        itemSchema = schema\n    }\n\n    // set selected\n\n    const [modelsSelected, setModelsSelected] = useState([])\n\n    const getSelected = (formData) => {\n        let items = []\n\n        if (schema.type === \"array\") {\n            items = formData || []\n        } else {\n            items = formData && [formData] || []\n        }\n\n        const selected = items.map(({media, mediaId}) => { \n\n            if (media.source && media.sourceId) {\n                return media.source + \"/\" + media.sourceId\n            }\n\n            return mediaId\n        })\n\n        setModelsSelected(selected)\n    }\n\n    useEffect(() => {\n        getSelected(formData)\n    }, [formData])\n\n    // change\n\n    const handleChange = (formData) => {\n        const newFormData = getDefaultFormState(schema, formData)\n        onChange(newFormData);\n    }\n\n    // add\n\n    const addModel = (model) => {\n        \n        const item = getDefaultFormState(itemSchema, {\n            mediaId: model.uniqueId,\n            media: model\n        })\n\n        let newFormData;\n\n        if (schema.type === \"array\") {\n            newFormData = [].concat(formData, item);\n        } else {\n            newFormData = item\n        }\n\n        handleChange(newFormData);\n\n    }\n\n    const handleAdd = (model) => {\n        const { uniqueId, sourceId, mediaType } = model;\n\n        console.log('addModel', model)\n\n        if (sourceId) {\n            console.log('sourceId', sourceId)\n\n            const source = {\n                ...model,\n                identifier: sourceId,\n                mimeType: mediaType,\n                collectionId: query.collectionId\n            }\n\n            console.log('source', source)\n\n            dispatch(getMediaSource({\n                ...model,\n                identifier: sourceId,\n                mimeType: mediaType,\n                collectionId: query.collectionId\n            }, (model) => addModel(model)))\n\n        } else if (uniqueId) {\n            addModel(model)\n        }\n     \n    }\n\n    // remove\n\n    const removeItem = ({uniqueId, source, sourceId}) => {\n        return formData.filter(item => item.mediaId !== uniqueId)\n    }\n    \n    const handleRemove = (model) => {\n        const uniqueId = model && model.uniqueId\n\n        console.log('remove', model)\n\n        let newFormData;\n\n        if (schema.type === \"array\") {\n            newFormData = removeItem({uniqueId})\n        } else {\n            newFormData = getDefaultFormState(itemSchema, {\n                mediaId: undefined,\n                media: {}\n            })\n        }\n\n        handleChange(newFormData);\n\n    }\n\n    // get template\n\n    const ResultsTemplate = templates && templates[layout]\n\n    if (!ResultsTemplate) {\n        return (\n            <p>No template for {layout}</p>\n        )\n    }\n\n    return (\n        <ResultsTemplate \n            {...props}\n            {...search}\n            selected={modelsSelected}\n            query={query}\n            onAdd={handleAdd}\n            onRemove={handleRemove} />\n    )\n\n    \n}\n\nexport default MediaResults"]},"metadata":{},"sourceType":"module"}