{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AsfParser = void 0;\n\nconst type_1 = require(\"../type\");\n\nconst GUID_1 = require(\"./GUID\");\n\nconst AsfObject = require(\"./AsfObject\");\n\nconst _debug = require(\"debug\");\n\nconst BasicParser_1 = require(\"../common/BasicParser\");\n\nconst debug = _debug('music-metadata:parser:ASF');\n\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\n\nclass AsfParser extends BasicParser_1.BasicParser {\n  async parse() {\n    const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n\n    if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n      throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n    }\n\n    try {\n      await this.parseObjectHeader(header.numberOfHeaderObjects);\n    } catch (err) {\n      debug('Error while parsing ASF: %s', err);\n    }\n  }\n\n  async parseObjectHeader(numberOfObjectHeaders) {\n    let tags;\n\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken); // Parse data part of the ASF Object\n\n      debug('header GUID=%s', header.objectId.str);\n\n      switch (header.objectId.str) {\n        case AsfObject.FilePropertiesObject.guid.str:\n          // 3.2\n          const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n          this.metadata.setFormat('duration', fpo.playDuration / 10000000);\n          this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n          break;\n\n        case AsfObject.StreamPropertiesObject.guid.str:\n          // 3.3\n          const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n          this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n          break;\n\n        case AsfObject.HeaderExtensionObject.guid.str:\n          // 3.4\n          const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n          await this.parseExtensionObject(extHeader.extensionDataSize);\n          break;\n\n        case AsfObject.ContentDescriptionObjectState.guid.str:\n          // 3.10\n          tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n\n        case AsfObject.ExtendedContentDescriptionObjectState.guid.str:\n          // 3.11\n          tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n          this.addTags(tags);\n          break;\n\n        case GUID_1.default.CodecListObject.str:\n          const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n          codecs.forEach(codec => {\n            this.metadata.addStreamInfo({\n              type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n              codecName: codec.codecName\n            });\n          });\n          const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n          this.metadata.setFormat('codec', audioCodecs);\n          break;\n\n        case GUID_1.default.StreamBitratePropertiesObject.str:\n          // ToDo?\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n          debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n      }\n    } while (--numberOfObjectHeaders); // done\n\n  }\n\n  addTags(tags) {\n    tags.forEach(tag => {\n      this.metadata.addTag(headerType, tag.id, tag.value);\n    });\n  }\n\n  async parseExtensionObject(extensionSize) {\n    do {\n      // Parse common header of the ASF Object (3.1)\n      const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken); // Parse data part of the ASF Object\n\n      switch (header.objectId.str) {\n        case AsfObject.ExtendedStreamPropertiesObjectState.guid.str:\n          // 4.1\n          // ToDo: extended stream header properties are ignored\n          await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n          break;\n\n        case AsfObject.MetadataObjectState.guid.str:\n          // 4.7\n          const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n          this.addTags(moTags);\n          break;\n\n        case AsfObject.MetadataLibraryObjectState.guid.str:\n          // 4.8\n          const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n          this.addTags(mlTags);\n          break;\n\n        case GUID_1.default.PaddingObject.str:\n          // ToDo: register bytes pad\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.CompatibilityObject.str:\n          this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        case GUID_1.default.ASF_Index_Placeholder_Object.str:\n          await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n          break;\n\n        default:\n          this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str); // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n\n          await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n          break;\n      }\n\n      extensionSize -= header.objectSize;\n    } while (extensionSize > 0);\n  }\n\n}\n\nexports.AsfParser = AsfParser;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/node_modules/music-metadata/lib/asf/AsfParser.js"],"names":["Object","defineProperty","exports","value","AsfParser","type_1","require","GUID_1","AsfObject","_debug","BasicParser_1","debug","headerType","BasicParser","parse","header","tokenizer","readToken","TopLevelHeaderObjectToken","objectId","equals","default","HeaderObject","Error","str","parseObjectHeader","numberOfHeaderObjects","err","numberOfObjectHeaders","tags","HeaderObjectToken","FilePropertiesObject","guid","fpo","metadata","setFormat","playDuration","maximumBitrate","StreamPropertiesObject","spo","streamType","HeaderExtensionObject","extHeader","parseExtensionObject","extensionDataSize","ContentDescriptionObjectState","addTags","ExtendedContentDescriptionObjectState","CodecListObject","codecs","readCodecEntries","forEach","codec","addStreamInfo","type","videoCodec","TrackType","video","audio","codecName","audioCodecs","filter","audioCodec","map","join","StreamBitratePropertiesObject","ignore","objectSize","len","PaddingObject","addWarning","IgnoreObjectState","tag","addTag","id","extensionSize","ExtendedStreamPropertiesObjectState","MetadataObjectState","moTags","MetadataLibraryObjectState","mlTags","CompatibilityObject","ASF_Index_Placeholder_Object"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AsfParser = void 0;\nconst type_1 = require(\"../type\");\nconst GUID_1 = require(\"./GUID\");\nconst AsfObject = require(\"./AsfObject\");\nconst _debug = require(\"debug\");\nconst BasicParser_1 = require(\"../common/BasicParser\");\nconst debug = _debug('music-metadata:parser:ASF');\nconst headerType = 'asf';\n/**\n * Windows Media Metadata Usage Guidelines\n *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx\n *\n * Ref:\n *   https://tools.ietf.org/html/draft-fleischman-asf-01\n *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf\n *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html\n *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx\n */\nclass AsfParser extends BasicParser_1.BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(AsfObject.TopLevelHeaderObjectToken);\n        if (!header.objectId.equals(GUID_1.default.HeaderObject)) {\n            throw new Error('expected asf header; but was not found; got: ' + header.objectId.str);\n        }\n        try {\n            await this.parseObjectHeader(header.numberOfHeaderObjects);\n        }\n        catch (err) {\n            debug('Error while parsing ASF: %s', err);\n        }\n    }\n    async parseObjectHeader(numberOfObjectHeaders) {\n        let tags;\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            debug('header GUID=%s', header.objectId.str);\n            switch (header.objectId.str) {\n                case AsfObject.FilePropertiesObject.guid.str: // 3.2\n                    const fpo = await this.tokenizer.readToken(new AsfObject.FilePropertiesObject(header));\n                    this.metadata.setFormat('duration', fpo.playDuration / 10000000);\n                    this.metadata.setFormat('bitrate', fpo.maximumBitrate);\n                    break;\n                case AsfObject.StreamPropertiesObject.guid.str: // 3.3\n                    const spo = await this.tokenizer.readToken(new AsfObject.StreamPropertiesObject(header));\n                    this.metadata.setFormat('container', 'ASF/' + spo.streamType);\n                    break;\n                case AsfObject.HeaderExtensionObject.guid.str: // 3.4\n                    const extHeader = await this.tokenizer.readToken(new AsfObject.HeaderExtensionObject());\n                    await this.parseExtensionObject(extHeader.extensionDataSize);\n                    break;\n                case AsfObject.ContentDescriptionObjectState.guid.str: // 3.10\n                    tags = await this.tokenizer.readToken(new AsfObject.ContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case AsfObject.ExtendedContentDescriptionObjectState.guid.str: // 3.11\n                    tags = await this.tokenizer.readToken(new AsfObject.ExtendedContentDescriptionObjectState(header));\n                    this.addTags(tags);\n                    break;\n                case GUID_1.default.CodecListObject.str:\n                    const codecs = await AsfObject.readCodecEntries(this.tokenizer);\n                    codecs.forEach(codec => {\n                        this.metadata.addStreamInfo({\n                            type: codec.type.videoCodec ? type_1.TrackType.video : type_1.TrackType.audio,\n                            codecName: codec.codecName\n                        });\n                    });\n                    const audioCodecs = codecs.filter(codec => codec.type.audioCodec).map(codec => codec.codecName).join('/');\n                    this.metadata.setFormat('codec', audioCodecs);\n                    break;\n                case GUID_1.default.StreamBitratePropertiesObject.str:\n                    // ToDo?\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    debug('Padding: %s bytes', header.objectSize - AsfObject.HeaderObjectToken.len);\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    debug('Ignore ASF-Object-GUID: %s', header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n            }\n        } while (--numberOfObjectHeaders);\n        // done\n    }\n    addTags(tags) {\n        tags.forEach(tag => {\n            this.metadata.addTag(headerType, tag.id, tag.value);\n        });\n    }\n    async parseExtensionObject(extensionSize) {\n        do {\n            // Parse common header of the ASF Object (3.1)\n            const header = await this.tokenizer.readToken(AsfObject.HeaderObjectToken);\n            // Parse data part of the ASF Object\n            switch (header.objectId.str) {\n                case AsfObject.ExtendedStreamPropertiesObjectState.guid.str: // 4.1\n                    // ToDo: extended stream header properties are ignored\n                    await this.tokenizer.readToken(new AsfObject.ExtendedStreamPropertiesObjectState(header));\n                    break;\n                case AsfObject.MetadataObjectState.guid.str: // 4.7\n                    const moTags = await this.tokenizer.readToken(new AsfObject.MetadataObjectState(header));\n                    this.addTags(moTags);\n                    break;\n                case AsfObject.MetadataLibraryObjectState.guid.str: // 4.8\n                    const mlTags = await this.tokenizer.readToken(new AsfObject.MetadataLibraryObjectState(header));\n                    this.addTags(mlTags);\n                    break;\n                case GUID_1.default.PaddingObject.str:\n                    // ToDo: register bytes pad\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.CompatibilityObject.str:\n                    this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                case GUID_1.default.ASF_Index_Placeholder_Object.str:\n                    await this.tokenizer.ignore(header.objectSize - AsfObject.HeaderObjectToken.len);\n                    break;\n                default:\n                    this.metadata.addWarning('Ignore ASF-Object-GUID: ' + header.objectId.str);\n                    // console.log(\"Ignore ASF-Object-GUID: %s\", header.objectId.str);\n                    await this.tokenizer.readToken(new AsfObject.IgnoreObjectState(header));\n                    break;\n            }\n            extensionSize -= header.objectSize;\n        } while (extensionSize > 0);\n    }\n}\nexports.AsfParser = AsfParser;\n//# sourceMappingURL=AsfParser.js.map"]},"metadata":{},"sourceType":"script"}