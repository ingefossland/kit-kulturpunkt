{"ast":null,"code":"var _jsxFileName = \"/Users/inge/Sites/kit-kulturpunkt/src/Dialog/DialogModel.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadModel } from '../redux/modelsById';\nimport { ListModule, TableModule, GridModule, GalleryModule } from '@kit-ui/admin';\nimport { getUiPreview } from '@kit-ui/schema/lib';\nimport { useTranslation } from 'react-i18next';\nimport qs from 'query-string';\nconst layouts = {\n  \"table\": TableModule,\n  \"list\": ListModule,\n  \"grid\": GridModule,\n  \"gallery\": GalleryModule\n};\n\nconst ModuleLoader = ({\n  app,\n  dialog,\n  query,\n  model,\n  layout = \"table\",\n  size = \"medium\",\n  modelsSelected = [],\n  onAdd,\n  onRemove,\n  ...props\n}) => {\n  const {\n    t,\n    i18n\n  } = useTranslation(['dialog']);\n  const dispatch = useDispatch();\n  const schemasByName = {};\n  const modelsById = useSelector(state => state.modelsById);\n  const modelsBySource = {};\n  const {\n    uniqueId,\n    source,\n    sourceId,\n    documentType,\n    mediaType\n  } = model;\n  useEffect(() => {\n    if (modelName && uniqueId && !modelsById[uniqueId]) {\n      dispatch(loadModel({\n        modelName: modelName,\n        uniqueId: uniqueId\n      }));\n    }\n  }, [uniqueId]);\n  const appDocumentType = documentType && app && app.root + \"/\" + documentType;\n  const sourceDocumentType = source && \"document/\" + source;\n  let modelName = model.modelName === \"doc_schemas\" && \"schemas\" || model.modelName;\n  let modelSchema;\n\n  if (modelName === \"users\") {\n    modelSchema = schemasByName['user'];\n  } else if (modelName === \"sites\") {\n    modelSchema = schemasByName['site'];\n  } else if (modelName === \"collections\") {\n    modelSchema = schemasByName['collection'];\n  } else if (modelName === \"doc_schemas\") {\n    modelSchema = schemasByName['schema'];\n  } else if (modelName === \"documents\" || documentType) {\n    if (schemasByName[appDocumentType]) {\n      modelSchema = schemasByName[appDocumentType];\n    } else if (source && schemasByName[sourceDocumentType]) {\n      modelSchema = schemasByName[sourceDocumentType];\n    } else if (documentType) {\n      modelSchema = schemasByName[documentType];\n    }\n  } else if (modelName === \"media\" || mediaType) {\n    modelSchema = mediaType && schemasByName[\"media/\" + mediaType];\n  }\n\n  const [preview, setPreview] = useState(model);\n\n  const getImageUrl = model => {\n    const {\n      imageUrl,\n      uploadStatus,\n      uploadProgress\n    } = model;\n    const imageUrlParts = imageUrl && imageUrl.split(\"?\");\n    const imageParams = imageUrlParts && imageUrlParts[1] && qs.parse(imageUrlParts[1]);\n\n    if (!imageParams) {\n      return imageUrl;\n    }\n\n    const newImageParams = qs.stringify({ ...imageParams,\n      uploadStatus: uploadStatus,\n      uploadProgress: uploadProgress,\n      dimension: \"250x250\"\n    });\n    const newImageUrl = imageUrlParts[0] + \"?\" + newImageParams;\n    return newImageUrl;\n  };\n\n  const uniqueModel = source && sourceId && modelsBySource && modelsBySource[source + \"/\" + sourceId] || uniqueId && modelsById && modelsById[uniqueId]; //  || model\n\n  useEffect(() => {\n    let uiPreview = {};\n\n    if (modelSchema && uniqueModel) {\n      uiPreview = getUiPreview({ ...modelSchema,\n        formData: uniqueModel,\n        formContext: {\n          t: t\n        }\n      });\n    }\n\n    const newModel = { ...uniqueModel,\n      ...model,\n      ...uiPreview\n    };\n    const newImageUrl = getImageUrl(newModel);\n    setPreview({ ...newModel,\n      imageUrl: newImageUrl\n    });\n  }, [uniqueModel]);\n  const {\n    status,\n    createdAt,\n    createdByName,\n    updatedAt,\n    updatedByName,\n    deletedAt,\n    deletedByName\n  } = preview;\n  const author = deletedByName || updatedByName || createdByName || \"N/A\";\n  const datetime = deletedAt || updatedAt || createdAt;\n  const statusLabel = t(\"status:\" + status || undefined);\n  const LayoutTemplate = layout && layouts[layout];\n  let selected;\n\n  if (source && sourceId) {\n    selected = modelsSelected && modelsSelected.includes(source + \"/\" + sourceId);\n  } else if (uniqueId) {\n    selected = modelsSelected && modelsSelected.includes(uniqueId);\n  }\n\n  const handleSelect = () => {\n    console.log(\"ADD/REMOVE\", uniqueModel);\n\n    if (selected) {\n      onRemove && onRemove(uniqueModel);\n    } else {\n      onAdd && onAdd(uniqueModel);\n    }\n  };\n\n  const selectable = uniqueModel && true || false;\n  const onClick = selectable ? handleSelect : undefined;\n  return /*#__PURE__*/React.createElement(LayoutTemplate, Object.assign({}, preview, {\n    size: size,\n    statusLabel: statusLabel,\n    author: author,\n    datetime: datetime,\n    selectable: selectable,\n    selected: selected,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default ModuleLoader;","map":{"version":3,"sources":["/Users/inge/Sites/kit-kulturpunkt/src/Dialog/DialogModel.js"],"names":["React","useState","useEffect","useSelector","useDispatch","loadModel","ListModule","TableModule","GridModule","GalleryModule","getUiPreview","useTranslation","qs","layouts","ModuleLoader","app","dialog","query","model","layout","size","modelsSelected","onAdd","onRemove","props","t","i18n","dispatch","schemasByName","modelsById","state","modelsBySource","uniqueId","source","sourceId","documentType","mediaType","modelName","appDocumentType","root","sourceDocumentType","modelSchema","preview","setPreview","getImageUrl","imageUrl","uploadStatus","uploadProgress","imageUrlParts","split","imageParams","parse","newImageParams","stringify","dimension","newImageUrl","uniqueModel","uiPreview","formData","formContext","newModel","status","createdAt","createdByName","updatedAt","updatedByName","deletedAt","deletedByName","author","datetime","statusLabel","undefined","LayoutTemplate","selected","includes","handleSelect","console","log","selectable","onClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadModel } from '../redux/modelsById';\n\nimport { ListModule, TableModule, GridModule, GalleryModule } from '@kit-ui/admin';\nimport { getUiPreview } from '@kit-ui/schema/lib';\n\nimport { useTranslation } from 'react-i18next';\nimport qs from 'query-string';\n\nconst layouts = {\n    \"table\": TableModule,\n    \"list\": ListModule,\n    \"grid\": GridModule,     \n    \"gallery\": GalleryModule,\n}\n\nconst ModuleLoader = ({app, dialog, query, model, layout = \"table\", size = \"medium\", modelsSelected = [], onAdd, onRemove, ...props}) => {\n    const { t, i18n } = useTranslation(['dialog']);\n    const dispatch = useDispatch()\n\n    const schemasByName = {}\n\n    const modelsById = useSelector(state => state.modelsById)\n    const modelsBySource = {}\n\n    const { uniqueId, source, sourceId, documentType, mediaType } = model;\n\n    useEffect(() => {\n        if (modelName && uniqueId && !modelsById[uniqueId]) {\n            dispatch(loadModel({modelName: modelName, uniqueId: uniqueId}))\n        }\n    }, [uniqueId])\n\n    const appDocumentType = documentType && app && app.root + \"/\" + documentType\n    const sourceDocumentType = source && \"document/\" + source\n\n    let modelName = model.modelName === \"doc_schemas\" && \"schemas\" || model.modelName\n    let modelSchema;\n\n    if (modelName === \"users\") {\n        modelSchema = schemasByName['user']\n    } else if (modelName === \"sites\") {\n        modelSchema = schemasByName['site']\n    } else if (modelName === \"collections\") {\n        modelSchema = schemasByName['collection']\n    } else if (modelName === \"doc_schemas\") {\n        modelSchema = schemasByName['schema']\n    } else if (modelName === \"documents\" || documentType) {\n        if (schemasByName[appDocumentType]) {\n            modelSchema = schemasByName[appDocumentType]\n        } else if (source && schemasByName[sourceDocumentType]) {\n            modelSchema = schemasByName[sourceDocumentType]\n        } else if (documentType) {\n            modelSchema = schemasByName[documentType]\n        }\n    } else if (modelName === \"media\" || mediaType) {\n        modelSchema = mediaType && schemasByName[\"media/\"+mediaType]\n    }\n\n\n    const [preview, setPreview] = useState(model)\n\n    const getImageUrl = (model) => {\n        const { imageUrl, uploadStatus, uploadProgress } = model\n\n        const imageUrlParts = imageUrl && imageUrl.split(\"?\")\n        const imageParams = imageUrlParts && imageUrlParts[1] && qs.parse(imageUrlParts[1])\n\n        if (!imageParams) {\n            return imageUrl\n        }\n\n        const newImageParams = qs.stringify({\n            ...imageParams,\n            uploadStatus: uploadStatus,\n            uploadProgress: uploadProgress,\n            dimension: \"250x250\"\n        })\n\n        const newImageUrl = imageUrlParts[0] + \"?\" + newImageParams\n        \n        return newImageUrl\n\n    }\n\n    const uniqueModel = source && sourceId && modelsBySource && modelsBySource[source + \"/\" + sourceId] || uniqueId && modelsById && modelsById[uniqueId]; //  || model\n\n    useEffect(() => {\n        let uiPreview = {}\n\n        if (modelSchema && uniqueModel) {\n            uiPreview = getUiPreview({...modelSchema, formData: uniqueModel, formContext: {t:t}})\n        }\n\n        const newModel = {\n            ...uniqueModel,\n            ...model,\n            ...uiPreview,\n        }\n\n        const newImageUrl = getImageUrl(newModel)\n\n        setPreview({\n            ...newModel,\n            imageUrl: newImageUrl,\n        })\n\n    }, [uniqueModel])\n\n    const { status, createdAt, createdByName, updatedAt, updatedByName, deletedAt, deletedByName } = preview;\n\n    const author = deletedByName || updatedByName || createdByName || \"N/A\"\n    const datetime = deletedAt || updatedAt || createdAt\n\n    const statusLabel = t(\"status:\"+status || undefined)\n    const LayoutTemplate = layout && layouts[layout]\n\n    let selected;\n\n    if (source && sourceId) {\n        selected = modelsSelected && modelsSelected.includes(source + \"/\" + sourceId)\n    } else if (uniqueId) {\n        selected = modelsSelected && modelsSelected.includes(uniqueId)\n    }\n\n    const handleSelect = () => {\n\n        console.log(\"ADD/REMOVE\", uniqueModel)\n\n        if (selected) {\n            onRemove && onRemove(uniqueModel)\n        } else {\n            onAdd && onAdd(uniqueModel)\n        }\n\n    }\n\n    const selectable = uniqueModel && true || false\n    const onClick = selectable ? handleSelect : undefined\n\n    return (\n        <LayoutTemplate {...preview} size={size} \n            statusLabel={statusLabel} author={author} datetime={datetime}\n            selectable={selectable} selected={selected} onClick={onClick} />\n    )\n\n}\n\nexport default ModuleLoader"]},"metadata":{},"sourceType":"module"}