function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import PropTypes from "prop-types";
import SvgIcon from '@material-ui/core/SvgIcon';
import AppIconFilled from "./AppIconFilled";
import AppIconOutlined from "./AppIconOutlined";
var variants = {
  "outlined": AppIconOutlined,
  "filled": AppIconFilled
};
var colors = {
  "blue": "#0067b6",
  "red": "#eb314e"
};

var AppIcon = function AppIcon(_ref) {
  var color = _ref.color,
      text = _ref.text,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "outlined" : _ref$variant,
      props = _objectWithoutPropertiesLoose(_ref, ["color", "text", "variant"]);

  var IconTemplate = variants && variants[variant];
  color = colors[color] || color;

  if (!IconTemplate) {
    return "<p>Failed</p>";
  }

  return /*#__PURE__*/React.createElement(IconTemplate, _extends({
    color: color,
    text: text
  }, props));
};

AppIcon.propTypes = process.env.NODE_ENV !== "production" ? {
  fontSize: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string, PropTypes.number]),
  variant: PropTypes.oneOfType([PropTypes.oneOf(['filled', 'outlined']), PropTypes.string])
} : {};
export default AppIcon;