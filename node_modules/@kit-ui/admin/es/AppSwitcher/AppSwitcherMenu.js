function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useState, useEffect } from 'react';
import PropTypes from "prop-types";
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
import AppsByUser from "./AppsByUser";
import AppsByOwner from "./AppsByOwner";
import OwnersList from "./OwnersList";
var useStyles = makeStyles(function (theme) {
  return {
    menu: {
      backgroundColor: function backgroundColor(props) {
        return theme.palette.background.paper;
      },
      maxWidth: "320px",
      zIndex: 2,
      "& > * + *": {
        borderTop: "1px solid",
        borderColor: theme.palette.divider
      }
    }
  };
});

var AppSwitcherMenu = function AppSwitcherMenu(_ref) {
  var className = _ref.className,
      _ref$user = _ref.user,
      user = _ref$user === void 0 ? {} : _ref$user,
      _ref$owners = _ref.owners,
      owners = _ref$owners === void 0 ? [] : _ref$owners,
      _ref$currentOwner = _ref.currentOwner,
      currentOwner = _ref$currentOwner === void 0 ? undefined : _ref$currentOwner,
      onSelect = _ref.onSelect;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(Paper, {
    className: classes.menu,
    elevation: 24,
    square: true
  }, user.apps && /*#__PURE__*/React.createElement(AppsByUser, {
    apps: user.apps,
    onSelect: onSelect
  }), currentOwner && /*#__PURE__*/React.createElement(AppsByOwner, _extends({}, currentOwner, {
    onSelect: onSelect
  })), !currentOwner && owners && /*#__PURE__*/React.createElement(OwnersList, {
    owners: owners,
    onSelect: onSelect
  }));
};

AppSwitcherMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  user: PropTypes.shape({
    uniqueId: PropTypes.string,
    apps: PropTypes.array
  }),
  owners: PropTypes.array,
  currentOwner: PropTypes.shape({
    uniqueId: PropTypes.string,
    title: PropTypes.string,
    apps: PropTypes.array
  }),
  onSelect: PropTypes.func
} : {};
export default AppSwitcherMenu;