import React, { useState } from "react";
import IconButton from '@material-ui/core/IconButton';
import Icon from '@material-ui/core/Icon';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  var _button;

  return {
    button: (_button = {
      backgroundColor: "transparent",
      width: theme.spacing(6),
      height: theme.spacing(6),
      marginLeft: theme.spacing(.5),
      marginRight: theme.spacing(.5),
      borderRadius: "100%"
    }, _button["backgroundColor"] = function backgroundColor(props) {
      return props.selected && theme.palette.primary.main || "transparent";
    }, _button.color = function color(props) {
      return props.selected && theme.palette.primary.contrastText || props.value && theme.palette.primary.main || "currentColor";
    }, _button["&:hover"] = {
      backgroundColor: function backgroundColor(props) {
        return props.selected && theme.palette.primary.main || "transparent";
      },
      opacity: 1
    }, _button),
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "16px",
      position: "absolute",
      top: 0,
      height: "1em",
      marginTop: "-2em",
      width: "100%",
      overflow: "visible"
    },
    value: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "16px"
    },
    circle: {
      transition: "stroke-dashoffset 0.35s",
      transform: "rotate(-90deg)",
      transformOrigin: "50% 50%",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: "100%",
      height: "100%"
    },
    circleBackground: {
      fill: "transparent",
      stroke: "currentColor",
      opacity: .25
    },
    circleProgress: {
      stroke: "currentColor"
    }
  };
});

var FilterButton = function FilterButton(_ref) {
  var min = _ref.min,
      max = _ref.max,
      icon = _ref.icon,
      label = _ref.label,
      name = _ref.name,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      selected = _ref.selected,
      onClick = _ref.onClick;
  var progress = value;
  var classes = useStyles({
    progress: progress,
    selected: selected,
    value: value
  });

  var ProgressCircle = function ProgressCircle(_ref2) {
    var _ref2$radius = _ref2.radius,
        radius = _ref2$radius === void 0 ? 24 : _ref2$radius,
        _ref2$stroke = _ref2.stroke,
        stroke = _ref2$stroke === void 0 ? 2 : _ref2$stroke,
        progress = _ref2.progress;
    var normalizedRadius = radius - stroke / 2 * 2;
    var circumference = normalizedRadius * 2 * Math.PI;
    var strokeDashoffset = circumference - progress / 100 * circumference;
    return /*#__PURE__*/React.createElement("svg", {
      className: classes.circle,
      width: radius * 2,
      height: radius * 2
    }, /*#__PURE__*/React.createElement("circle", {
      className: classes.circleBackground,
      stroke: "black",
      fill: "transparent",
      strokeWidth: stroke,
      r: normalizedRadius,
      cx: radius,
      cy: radius
    }), /*#__PURE__*/React.createElement("circle", {
      className: classes.circleProgress,
      stroke: "black",
      fill: "transparent",
      strokeWidth: stroke,
      strokeDasharray: circumference + ' ' + circumference,
      style: {
        strokeDashoffset: strokeDashoffset
      },
      "stroke-width": stroke,
      r: normalizedRadius,
      cx: radius,
      cy: radius
    }));
  };

  return /*#__PURE__*/React.createElement(IconButton, {
    className: classes.button,
    "aria-selected": selected,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(ProgressCircle, {
    progress: value
  }), selected && value && /*#__PURE__*/React.createElement("b", {
    className: classes.value
  }, value) || /*#__PURE__*/React.createElement(Icon, {
    className: classes.icon
  }, icon));
};

export default FilterButton;