import React from "react";

var VignetteFilter = function VignetteFilter(_ref) {
  var id = _ref.id,
      imageRef = _ref.imageRef,
      cropboxRef = _ref.cropboxRef,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? 0 : _ref$value,
      _ref$top = _ref.top,
      top = _ref$top === void 0 ? 50 : _ref$top,
      _ref$left = _ref.left,
      left = _ref$left === void 0 ? 50 : _ref$left;
  var cropboxX = cropboxRef && cropboxRef.current && cropboxRef.current.offsetX;
  var cropboxY = cropboxRef && cropboxRef.current && cropboxRef.current.offsetY;
  var cropboxWidth = cropboxRef && cropboxRef.current && cropboxRef.current.offsetWidth;
  var cropboxHeight = cropboxRef && cropboxRef.current && cropboxRef.current.offsetHeight;
  var width = imageRef && imageRef.current && imageRef.current.offsetWidth;
  var height = imageRef && imageRef.current && imageRef.current.offsetHeight;
  var spotlightX = width * left / 100;
  var spotlightY = height * top / 100;
  var spotlightZ = width;
  var specularExponent = value;
  return /*#__PURE__*/React.createElement("filter", {
    id: id,
    x: cropboxX,
    y: cropboxY,
    width: cropboxWidth,
    height: cropboxHeight,
    "color-interpolation-filters": "sRGB"
  }, /*#__PURE__*/React.createElement("feFlood", {
    result: "blackfield",
    "flood-color": "#000000",
    "flood-opacity": "1"
  }), /*#__PURE__*/React.createElement("feSpecularLighting", {
    result: "spotlight",
    "lighting-color": "#FFFFFF",
    surfaceScale: "1",
    specularConstant: "1",
    specularExponent: specularExponent
  }, /*#__PURE__*/React.createElement("fePointLight", {
    x: spotlightX,
    y: spotlightY,
    z: spotlightZ
  })), /*#__PURE__*/React.createElement("feBlend", {
    result: "mask",
    in: "blackfield",
    in2: "spotlight",
    mode: "lighten"
  }), /*#__PURE__*/React.createElement("feBlend", {
    in: "mask",
    in2: "SourceGraphic",
    mode: "multiply",
    result: "vignette-result"
  }));
};

VignetteFilter.defaultProps = {};
export default VignetteFilter;