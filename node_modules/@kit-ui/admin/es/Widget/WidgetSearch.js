import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import ButtonBase from '@material-ui/core/ButtonBase';
import CloseIcon from '@material-ui/icons/Close';
import SearchIcon from '@material-ui/icons/Search';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      zIndex: 2,
      position: "relative",
      backgroundColor: "transparent",
      color: "black",
      height: "36px",
      overflow: "hidden",
      fontFamily: "Akkurat, sans-serif",
      margin: "12px"
    },
    searchInput: {
      backgroundColor: "white",
      flexBasis: "100%",
      padding: "9px 42px",
      border: "1px solid",
      borderColor: "#ccc",
      borderRadius: "18px",
      fontFamily: "inherit",
      fontSize: "14px",
      lineHeight: "18px",
      color: "inherit",
      outline: "none",
      "&:focus + *:first-child": {
        opacity: 1
      }
    },
    searchIcon: {
      position: "absolute",
      pointerEvents: "none",
      zIndex: 2,
      top: "0",
      left: "0",
      fontSize: "20px",
      lineHeight: "24px",
      width: '20px',
      height: '20px',
      padding: "0",
      margin: "8px 13px",
      opacity: ".5"
    },
    resetButton: {
      position: "absolute",
      zIndex: 3,
      top: theme.spacing(1),
      right: theme.spacing(1)
    },
    resetIcon: {
      width: '20px',
      height: '20px'
    }
  };
});

var SearchReset = function SearchReset(_ref) {
  var onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.resetButton,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(CloseIcon, {
    className: classes.resetIcon
  }));
};

var WidgetSearch = function WidgetSearch(_ref2) {
  var className = _ref2.className,
      _ref2$placeholder = _ref2.placeholder,
      placeholder = _ref2$placeholder === void 0 ? "Search" : _ref2$placeholder,
      q = _ref2.q,
      onChange = _ref2.onChange,
      onReset = _ref2.onReset;

  var _useState = useState(q),
      value = _useState[0],
      setValue = _useState[1];

  useEffect(function () {
    setValue(q);
  }, [q]);
  var classes = useStyles();

  var handleChange = function handleChange(event) {
    setValue(event.target.value);

    if (onChange) {
      onChange(event.target.value, event);
    }
  };

  var handleReset = function handleReset(event) {
    setValue("");

    if (onReset) {
      onReset(event);
    } else if (onChange) {
      onChange("", event);
    }
  };

  return /*#__PURE__*/React.createElement("nav", {
    className: className || classes.root
  }, /*#__PURE__*/React.createElement("input", {
    className: classes.searchInput,
    type: "text",
    value: value,
    placeholder: placeholder,
    onChange: handleChange
  }), /*#__PURE__*/React.createElement(SearchIcon, {
    className: classes.searchIcon
  }), value && /*#__PURE__*/React.createElement(SearchReset, {
    className: classes.buttonReset,
    onClick: handleReset
  }));
};

WidgetSearch.propTypes = process.env.NODE_ENV !== "production" ? {
  placeholder: PropTypes.string,
  q: PropTypes.string,
  onChange: PropTypes.func,
  onReset: PropTypes.func
} : {};
export default WidgetSearch;