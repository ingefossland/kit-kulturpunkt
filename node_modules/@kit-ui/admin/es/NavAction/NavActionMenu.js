function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from 'prop-types';
import MenuList from "./NavActionMenuList";
import MenuItem from "./NavActionMenuItem";
import MenuLink from "./NavActionMenuLink";
/** Menu component. Takes */

var NavMenu = function NavMenu(_ref) {
  var className = _ref.className,
      _ref$menu = _ref.menu,
      menu = _ref$menu === void 0 ? [] : _ref$menu,
      menuByUrl = _ref.menuByUrl,
      currentUrl = _ref.currentUrl,
      onSelect = _ref.onSelect,
      onToggle = _ref.onToggle;

  var handleSelect = function handleSelect(item, event) {
    onSelect && onSelect(item);
  };

  var handleToggle = function handleToggle(item, event) {
    onToggle && onToggle(item);
  };

  var renderLink = function renderLink(item) {
    var selected = item.selected,
        url = item.url,
        icon = item.icon,
        title = item.title,
        label = item.label,
        count = item.count;
    return /*#__PURE__*/React.createElement(MenuLink, {
      selected: selected,
      url: url,
      icon: icon,
      label: label || title,
      count: count,
      onClick: function onClick(event) {
        return handleSelect(item, event);
      }
    });
  };

  var renderItem = function renderItem(item, index) {
    if (item.url && menuByUrl && menuByUrl[item.url]) {
      item = _extends({}, item, menuByUrl[item.url]);
    }

    if (item.url && currentUrl && item.url === currentUrl) {
      item.expanded = true;
      item.selected = true;
    }

    if (item.url && currentUrl && currentUrl.startsWith(item.url)) {
      item.expanded = true;
    }

    var _item = item,
        role = _item.role,
        children = _item.children,
        hidden = _item.hidden,
        selected = _item.selected;
    var expanded = true;

    if (hidden) {
      return /*#__PURE__*/React.createElement(MenuItem, {
        key: index,
        role: role
      }, /*#__PURE__*/React.createElement(MenuList, {
        role: role
      }, children && children.map(renderItem)));
    }

    if (children) {
      return /*#__PURE__*/React.createElement(MenuItem, {
        key: index,
        role: role || "treeitem",
        selected: selected,
        expanded: expanded,
        onToggle: function onToggle(event) {
          return handleToggle(item, event);
        }
      }, renderLink(item), children && expanded && /*#__PURE__*/React.createElement(MenuList, {
        role: "tree"
      }, children && children.map(renderItem)));
    }

    return /*#__PURE__*/React.createElement(MenuItem, _extends({}, item, {
      key: index,
      role: role || "none"
    }), renderLink(item));
  };

  if (!menu || !menu.length) {
    return false;
  }

  return /*#__PURE__*/React.createElement("nav", {
    className: className
  }, /*#__PURE__*/React.createElement(MenuList, {
    role: "tree"
  }, menu.map(renderItem)));
};

NavMenu.defaultProps = {
  menu: [],
  menuByUrl: {}
};
NavMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  /** ClassName */
  className: PropTypes.string,

  /** The menu array */
  menu: PropTypes.array,

  /** Menu items, indexed by url */
  menuByUrl: PropTypes.object,

  /** Current URL selected */
  currentUrl: PropTypes.string,

  /** Select function */
  onSelect: PropTypes.func,

  /** Toggle function */
  onToggle: PropTypes.func
} : {};
export default NavMenu;