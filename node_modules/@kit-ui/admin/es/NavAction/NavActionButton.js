function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useRef, forwardRef } from 'react';
import DropDownIcon from '@material-ui/icons/ArrowDropDown';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import Button from '@material-ui/core/Button';
import Icon from '@material-ui/core/Icon';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      fontFamily: "Akkurat, sans-serif",
      fontWeight: "bold",
      textTransform: "none",
      borderRadius: 1
    },
    icon: {
      marginRight: theme.spacing(1),
      marginLeft: theme.spacing(-.5)
    },
    toggle: {
      borderRadius: 0,
      width: theme.spacing(5)
    }
  };
});

var ActionButton = function ActionButton(_ref) {
  var className = _ref.className,
      forwardedRef = _ref.forwardedRef,
      icon = _ref.icon,
      role = _ref.role,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "large" : _ref$size,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "contained" : _ref$variant,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      disabled = _ref.disabled,
      expanded = _ref.expanded,
      controls = _ref.controls,
      children = _ref.children,
      onClick = _ref.onClick,
      onToggle = _ref.onToggle,
      item = _objectWithoutPropertiesLoose(_ref, ["className", "forwardedRef", "icon", "role", "size", "variant", "color", "disabled", "expanded", "controls", "children", "onClick", "onToggle"]);

  var label = item.label,
      title = item.title;
  var classes = useStyles();

  if (onClick && onToggle) {
    var _React$createElement;

    return /*#__PURE__*/React.createElement(ButtonGroup, {
      "aria-label": "action",
      color: color,
      ref: forwardedRef
    }, /*#__PURE__*/React.createElement(Button, {
      size: size,
      variant: variant,
      className: className || classes.root,
      disabled: disabled,
      onClick: onClick
    }, icon && /*#__PURE__*/React.createElement(Icon, {
      className: classes.icon
    }, icon), label || title), /*#__PURE__*/React.createElement(Button, (_React$createElement = {
      size: size,
      variant: variant,
      disabled: disabled,
      className: classes.toggle
    }, _React$createElement["size"] = "small", _React$createElement["aria-controls"] = expanded ? controls : undefined, _React$createElement["aria-expanded"] = expanded ? 'true' : undefined, _React$createElement["aria-label"] = "options", _React$createElement["aria-haspopup"] = "menu", _React$createElement.onClick = onToggle, _React$createElement), /*#__PURE__*/React.createElement(DropDownIcon, null)));
  }

  if (onToggle) {
    return /*#__PURE__*/React.createElement(Button, {
      size: size,
      variant: variant,
      color: color,
      className: className || classes.root,
      disabled: disabled,
      onClick: onToggle,
      ref: forwardedRef
    }, icon && /*#__PURE__*/React.createElement(Icon, {
      className: classes.icon
    }, icon), label || title, /*#__PURE__*/React.createElement(DropDownIcon, null));
  }

  return /*#__PURE__*/React.createElement(Button, {
    size: size,
    variant: variant,
    color: color,
    className: className || classes.root,
    disabled: disabled,
    onClick: onClick
  }, icon && /*#__PURE__*/React.createElement(Icon, {
    className: classes.icon
  }, icon), label || title);
};

export default ActionButton;