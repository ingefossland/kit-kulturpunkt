function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from "prop-types";
import NavToolbarOptions from "./NavToolbarOptions";
import NavToolbarSettings from "./NavToolbarSettings";
import NavToolbarButton from "./NavToolbarButton";
import getToolbar from "./getToolbar";
var useStyles = makeStyles(function (theme) {
  return {
    toolbar: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexWrap: "nowrap"
    }
  };
});
/** NavToolbar renders buttons and options based on capabilities. */

var NavToolbar = function NavToolbar(_ref) {
  var className = _ref.className,
      toolbar = _ref.toolbar,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "toolbar"]);

  var classes = useStyles();

  if (!toolbar) {
    toolbar = getToolbar(props);
  }

  if (!toolbar.length) {
    return false;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.toolbar
  }, toolbar && toolbar.map(function (button, index) {
    var value = button.value,
        options = button.options;

    if (value) {
      return /*#__PURE__*/React.createElement(NavToolbarSettings, button);
    }

    if (options) {
      return /*#__PURE__*/React.createElement(NavToolbarOptions, button);
    }

    return /*#__PURE__*/React.createElement(NavToolbarButton, button);
  }));
};

NavToolbar.propTypes = process.env.NODE_ENV !== "production" ? {
  toolbar: PropTypes.array,
  hideable: PropTypes.bool,
  hidden: PropTypes.bool,
  onHide: PropTypes.func,
  onUnhide: PropTypes.func,
  editable: PropTypes.bool,
  editing: PropTypes.bool,
  onEdit: PropTypes.func,
  deletable: PropTypes.bool,
  deleted: PropTypes.bool,
  onDelete: PropTypes.func,
  erasable: PropTypes.bool,
  erased: PropTypes.bool,
  onErase: PropTypes.func,
  restorable: PropTypes.bool,
  restored: PropTypes.bool,
  onRestore: PropTypes.func,
  removable: PropTypes.bool,
  removed: PropTypes.bool,
  onRemove: PropTypes.func
} : {};
export default NavToolbar;