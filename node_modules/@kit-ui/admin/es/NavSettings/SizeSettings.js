function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useState, useEffect, useRef } from 'react';
import SettingsButton from "./SettingsButton";
import SettingsDropdown from "./SettingsDropdown";
import _ from "lodash";
import GridSettingsList from "./GridSettingsList";
var sizes = {
  "xlarge": "4:4",
  "xl": "4:4",
  "large": "4:3",
  "l": "4:3",
  "l-m": "4:2",
  "m-l": "2:4",
  "medium": "2:2",
  "m": "2:2",
  "m-s": "2:1",
  "s-m": "1:2",
  "small": "1:1",
  "s": "1:1",
  "xsmall": "0.5:0.5",
  "xs": "0.5:0.5"
};

var getOptions = function getOptions(_ref) {
  var _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options;
  var _cols = 0,
      _rows = 0,
      _options = [],
      _byValue = {};
  options.map(function (item, index) {
    if (typeof item === "string") {
      item = {
        label: item,
        value: item
      };
    }

    var size = sizes[item.value];
    var grid = size.split(':');
    var cols = grid[0] * 1;
    var rows = grid[1] * 1;

    if (cols > _cols) {
      _cols = cols;
    }

    if (rows > _rows) {
      _rows = rows;
    }

    item = _extends({}, item, {
      order: cols * rows,
      size: size,
      cols: cols,
      rows: rows
    });

    _options.push(item);

    _byValue[item.value] = item;
  });
  _options = _.orderBy(_options, 'order', 'desc');
  return {
    byValue: _byValue,
    options: _options,
    cols: _cols,
    rows: _rows
  };
};

var SettingsButtonRef = forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(SettingsButton, _extends({}, props, {
    forwardedRef: ref
  }));
});

var SettingsSize = function SettingsSize(_ref2) {
  var _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? "grid" : _ref2$type,
      name = _ref2.name,
      label = _ref2.label,
      value = _ref2.value,
      onChange = _ref2.onChange,
      props = _objectWithoutPropertiesLoose(_ref2, ["type", "name", "label", "value", "onChange"]);

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _getOptions = getOptions(props),
      options = _getOptions.options,
      byValue = _getOptions.byValue,
      cols = _getOptions.cols,
      rows = _getOptions.rows;

  var current = byValue[value] || options[0];

  var onToggle = function onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var onSelect = function onSelect(item) {
    if (onChange) {
      onChange(name, item.value);
    }

    setExpanded(false);
  };

  var onCollapse = function onCollapse() {
    setExpanded(false);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SettingsButtonRef, _extends({}, current, {
    type: type,
    onToggle: onToggle,
    expanded: expanded,
    ref: anchorRef
  })), /*#__PURE__*/React.createElement(SettingsDropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onCollapse: onCollapse
  }, /*#__PURE__*/React.createElement(GridSettingsList, {
    value: value,
    cols: cols,
    rows: rows,
    options: options,
    onSelect: onSelect
  })));
};

export default SettingsSize;