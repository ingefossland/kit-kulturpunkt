function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from "prop-types";
import ListSettings from "./ListSettings";
import GridSettings from "./GridSettings";
var templates = {
  "list": ListSettings,
  "grid": GridSettings
};
var useStyles = makeStyles(function (theme) {
  return {
    settings: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexWrap: "nowrap",
      "& > * + *": {
        marginLeft: theme.spacing(-1)
      }
    }
  };
});
/** NavSettings renders settings with options. Each setting should have an onChange function. */

var NavSettings = function NavSettings(_ref) {
  var className = _ref.className,
      _ref$settings = _ref.settings,
      settings = _ref$settings === void 0 ? [] : _ref$settings;
  var classes = useStyles();

  if (!settings.length) {
    return false;
  }

  var renderSettings = function renderSettings(_ref2, index) {
    var template = _ref2.template,
        props = _objectWithoutPropertiesLoose(_ref2, ["template"]);

    var SettingsTemplate;

    if (template && typeof template === "function") {
      SettingsTemplate = template;
    } else if (template && templates[template]) {
      SettingsTemplate = templates[template];
    } else {
      SettingsTemplate = ListSettings;
    }

    return /*#__PURE__*/React.createElement(SettingsTemplate, _extends({}, props, {
      key: index
    }));
  };

  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.settings
  }, settings && settings.map(function (settingsProps, index) {
    return renderSettings(settingsProps);
  }));
};

NavSettings.propTypes = process.env.NODE_ENV !== "production" ? {
  settings: PropTypes.array
} : {};
export default NavSettings;