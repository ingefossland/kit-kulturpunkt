function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import _ from "lodash";
import SettingsButton from "./PathButton";
import SettingsDropdown from "./PathDropdown";
import SettingsList from "./PathFiltersList";

var getOptions = function getOptions(_ref) {
  var _ref$filters = _ref.filters,
      filters = _ref$filters === void 0 ? [] : _ref$filters;
  var _options = [],
      _byValue = {};
  filters.map(function (item, index) {
    if (typeof item === "string") {
      item = {
        label: item,
        value: item
      };
    }

    _options.push(item);

    _byValue[item.value] = item;
  });
  return {
    options: _options,
    byValue: _byValue
  };
};

var SettingsButtonRef = React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(SettingsButton, _extends({}, props, {
    forwardedRef: ref
  }));
});

var SettingsOptions = function SettingsOptions(_ref2) {
  var name = _ref2.name,
      label = _ref2.label,
      _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? "options" : _ref2$type,
      onSelect = _ref2.onSelect,
      children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["name", "label", "type", "onSelect", "children"]);

  var _React$useState = React.useState(props.value),
      value = _React$useState[0],
      setValue = _React$useState[1];

  var _React$useState2 = React.useState(false),
      expanded = _React$useState2[0],
      setExpanded = _React$useState2[1];

  var anchorRef = React.useRef(null);

  var _getOptions = getOptions(props),
      options = _getOptions.options,
      byValue = _getOptions.byValue;

  var current = byValue[value] || options[0];

  var handleToggle = function handleToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var handleSelect = function handleSelect(item) {
    onSelect && onSelect(item);
    setValue(item.value);
    setExpanded(false);
  };

  var handleCollapse = function handleCollapse() {
    setExpanded(false);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SettingsButtonRef, _extends({}, current, {
    value: value,
    type: type,
    onToggle: handleToggle,
    expanded: expanded,
    ref: anchorRef
  })), /*#__PURE__*/React.createElement(SettingsDropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onCollapse: handleCollapse
  }, /*#__PURE__*/React.createElement(SettingsList, {
    value: current && current.value,
    options: options,
    onSelect: handleSelect
  })));
};

export default SettingsOptions;