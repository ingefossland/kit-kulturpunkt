function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { Component } from 'react';
import ButtonBase from '@material-ui/core/ButtonBase';
import Icon from '@material-ui/core/Icon';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      backgroundColor: "inherit",
      display: "flex",
      margin: theme.spacing(-0.5)
    },
    button: {
      padding: theme.spacing(0.5)
    },
    icon: {
      fontSize: "18px",
      marginRight: theme.spacing(1)
    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      fontWeight: "bold"
    }
  };
});

var ToolbarButton = function ToolbarButton(_ref) {
  var icon = _ref.icon,
      label = _ref.label,
      title = _ref.title,
      onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.button,
    onClick: onClick
  }, icon && /*#__PURE__*/React.createElement("i", {
    className: classes.icon
  }, /*#__PURE__*/React.createElement(Icon, null, icon)), /*#__PURE__*/React.createElement("b", {
    className: classes.label
  }, label || title));
};

var FinderToolbar = function FinderToolbar(_ref2) {
  var _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? [] : _ref2$buttons;
  var classes = useStyles();

  if (!buttons.length) {
    return null;
  }

  return /*#__PURE__*/React.createElement("nav", {
    className: classes.root
  }, buttons.map(function (button, index) {
    return /*#__PURE__*/React.createElement(ToolbarButton, _extends({}, button, {
      key: index
    }));
  }));
};

export default FinderToolbar;