function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useRef, forwardRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import ClickAwayListener from '@material-ui/core/ClickAwayListener';
import Popper from '@material-ui/core/Popper';
import Paper from '@material-ui/core/Paper';
import DropDownIcon from '@material-ui/icons/ArrowDropDown';
import MenuList from '@material-ui/core/MenuList';
import MenuItem from '@material-ui/core/MenuItem';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import Button from '@material-ui/core/Button';
import ButtonBase from '@material-ui/core/ButtonBase';
import EditIcon from '@material-ui/icons/Edit';
import ViewIcon from '@material-ui/icons/RemoveRedEye';
import NavAction from "../NavAction/NavAction";
var useStyles = makeStyles(function (theme) {
  var _iconButton;

  return {
    root: {
      fontSize: "14px",
      marginLeft: theme.spacing(1),
      marginRight: theme.spacing(1)
    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "inherit",
      fontWeight: "bold",
      marginLeft: theme.spacing(2),
      marginRight: theme.spacing(2)
    },
    primaryButton: {
      borderRadius: 0,
      minWidth: theme.spacing(7),
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      height: theme.spacing(5),
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontWeight: "bold"
    },
    primaryToggle: {
      borderRadius: 0,
      width: theme.spacing(5),
      height: theme.spacing(5)
    },
    iconButton: (_iconButton = {
      fontSize: "inherit",
      minWidth: theme.spacing(5),
      minHeight: theme.spacing(5),
      border: "1px solid",
      borderColor: "rgba(0,0,0,.25)"
    }, _iconButton[theme.breakpoints.down('xs')] = {
      border: "none"
    }, _iconButton),
    icon: {
      fontSize: "18px"
    }
  };
});

var PrimaryButton = function PrimaryButton(_ref) {
  var disabled = _ref.disabled,
      label = _ref.label,
      onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    color: "primary",
    className: classes.primaryButton,
    disabled: disabled,
    onClick: onClick
  }, label);
};

var PrimaryComboButton = function PrimaryComboButton(_ref2) {
  var forwardedRef = _ref2.forwardedRef,
      disabled = _ref2.disabled,
      expanded = _ref2.expanded,
      controls = _ref2.controls,
      label = _ref2.label,
      onClick = _ref2.onClick,
      onToggle = _ref2.onToggle;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(ButtonGroup, {
    "aria-label": "action",
    color: "primary",
    ref: forwardedRef
  }, /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    className: classes.primaryButton,
    disabled: disabled,
    onClick: onClick
  }, label), /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    className: classes.primaryToggle,
    size: "small",
    "aria-controls": expanded ? controls : undefined,
    "aria-expanded": expanded ? 'true' : undefined,
    "aria-label": "options",
    "aria-haspopup": "menu",
    onClick: onToggle
  }, /*#__PURE__*/React.createElement(DropDownIcon, null)));
};

var PrimaryIconButton = function PrimaryIconButton(_ref3) {
  var onClick = _ref3.onClick,
      children = _ref3.children;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.iconButton,
    onClick: onClick
  }, children);
};

var EditorAction = function EditorAction(_ref4) {
  var className = _ref4.className,
      primaryAction = _ref4.primaryAction;

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);
  var classes = useStyles();

  if (!primaryAction) {
    return false;
  }

  var handleToggle = function handleToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var handleSelect = function handleSelect(_ref5) {
    var onClick = _ref5.onClick;
    onClick && onClick();
    setExpanded(false);
  }; //    const primaryAction = action && action[0]


  if (primaryAction && primaryAction.type === "view") {
    return /*#__PURE__*/React.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/React.createElement(PrimaryIconButton, primaryAction, /*#__PURE__*/React.createElement(ViewIcon, {
      className: classes.icon
    })));
  } else if (primaryAction && primaryAction.type === "edit") {
    return /*#__PURE__*/React.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/React.createElement(PrimaryIconButton, primaryAction, /*#__PURE__*/React.createElement(EditIcon, {
      className: classes.icon
    })));
  } // navAcswtion


  if (primaryAction) {
    return /*#__PURE__*/React.createElement(NavAction, {
      className: className || classes.root,
      primaryAction: primaryAction,
      placement: "bottom-end"
    });
  }

  if (primaryAction && primaryAction.children) {
    return /*#__PURE__*/React.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/React.createElement(PrimaryComboButton, _extends({}, primaryAction, {
      expanded: expanded,
      forwardedRef: anchorRef,
      onToggle: handleToggle
    })), /*#__PURE__*/React.createElement(Popper, {
      open: expanded,
      style: {
        zIndex: 2000
      },
      role: undefined,
      transition: true,
      anchorEl: anchorRef.current,
      placement: "bottom-start"
    }, /*#__PURE__*/React.createElement(ClickAwayListener, {
      onClickAway: handleToggle
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Paper, {
      elevation: 1,
      square: true,
      "aria-expanded": expanded
    }, /*#__PURE__*/React.createElement(MenuList, null, primaryAction.children.map(function (item, index) {
      return /*#__PURE__*/React.createElement(MenuItem, _extends({}, item, {
        key: index,
        onClick: function onClick() {
          return handleSelect(item);
        }
      }), item.label || item.title);
    })))))));
  }

  if (primaryAction) {
    return /*#__PURE__*/React.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/React.createElement(PrimaryButton, primaryAction));
  }
};

export default EditorAction;