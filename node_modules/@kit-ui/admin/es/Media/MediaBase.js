import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: function position(props) {
        return props.align && "absolute" || props.position || "relative";
      },
      top: function top(props) {
        return props.align && 0;
      },
      left: function left(props) {
        return props.align && props.align === "left" && 0;
      },
      right: function right(props) {
        return props.align && props.align === "right" && 0;
      },
      backgroundColor: function backgroundColor(props) {
        return props.backgroundColor;
      },
      color: function color(props) {
        return props.color;
      },
      "& .MuiFilledInput-root": {
        backgroundColor: function backgroundColor(props) {
          return props.color && props.color === "white" && "rgba(255,255,255,.5)";
        },
        "&.Mui-focused": {
          backgroundColor: function backgroundColor(props) {
            return props.color && props.color === "white" && "rgba(255,255,255,.9)";
          }
        }
      },
      "& + *": {
        marginLeft: function marginLeft(props) {
          if (props.align === "left") return props.minWidth + theme.spacing(props.spacing);
        },
        marginRight: function marginRight(props) {
          if (props.align === "right") return props.minWidth + theme.spacing(props.spacing);
        },
        marginBottom: function marginBottom(props) {
          return props.align && theme.spacing(props.spacing);
        },
        minHeight: function minHeight(props) {
          return props.align && props.minHeight;
        },
        width: function width(props) {
          return props.align && "auto !important";
        }
      },
      minWidth: function minWidth(props) {
        return props.minWidth;
      },
      minHeight: function minHeight(props) {
        return props.minHeight;
      },
      maxWidth: function maxWidth(props) {
        return props.maxWidth || props.minWidth || "100%";
      },
      maxHeight: function maxHeight(props) {
        return props.maxHeight;
      },
      margin: "auto"
    },
    ratio: {
      position: "relative",
      width: "100%",
      height: 0,
      paddingBottom: function paddingBottom(props) {
        return props.ratio && props.ratio * 100 + "%";
      },
      margin: "auto"
    }
  };
});

var MediaRatio = function MediaRatio(_ref) {
  var _ref$ratio = _ref.ratio,
      ratio = _ref$ratio === void 0 ? undefined : _ref$ratio,
      children = _ref.children;
  var classes = useStyles({
    ratio: ratio
  });

  if (ratio) {
    return /*#__PURE__*/React.createElement("div", {
      className: classes.ratio
    }, children);
  }

  return children;
};

var MediaBase = function MediaBase(_ref2) {
  var _ref2$name = _ref2.name,
      name = _ref2$name === void 0 ? undefined : _ref2$name,
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? undefined : _ref2$backgroundColor,
      _ref2$color = _ref2.color,
      color = _ref2$color === void 0 ? undefined : _ref2$color,
      _ref2$position = _ref2.position,
      position = _ref2$position === void 0 ? undefined : _ref2$position,
      _ref2$align = _ref2.align,
      align = _ref2$align === void 0 ? undefined : _ref2$align,
      _ref2$spacing = _ref2.spacing,
      spacing = _ref2$spacing === void 0 ? undefined : _ref2$spacing,
      _ref2$minWidth = _ref2.minWidth,
      minWidth = _ref2$minWidth === void 0 ? undefined : _ref2$minWidth,
      _ref2$minHeight = _ref2.minHeight,
      minHeight = _ref2$minHeight === void 0 ? undefined : _ref2$minHeight,
      _ref2$maxWidth = _ref2.maxWidth,
      maxWidth = _ref2$maxWidth === void 0 ? undefined : _ref2$maxWidth,
      _ref2$maxHeight = _ref2.maxHeight,
      maxHeight = _ref2$maxHeight === void 0 ? undefined : _ref2$maxHeight,
      _ref2$format = _ref2.format,
      format = _ref2$format === void 0 ? undefined : _ref2$format,
      children = _ref2.children;
  var ratio;

  if (format && format.includes(':')) {
    var size = format.split(":");
    var w = size[0];
    var h = size[1];
    ratio = h / w;
    minHeight = undefined;
    maxHeight = undefined;
  }

  var classes = useStyles({
    backgroundColor: backgroundColor,
    color: color,
    position: position,
    align: align,
    spacing: spacing,
    minWidth: minWidth,
    minHeight: minHeight,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    ratio: ratio
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root,
    "data-layout": "mediaBase",
    "data-name": name,
    "data-format": format,
    "data-align": align,
    "data-min-width": minWidth,
    "data-max-width": maxWidth,
    "data-min-height": minHeight,
    "data-max-height": maxHeight,
    "data-position": position
  }, /*#__PURE__*/React.createElement(MediaRatio, {
    ratio: ratio
  }, children));
};

MediaBase.defaultProps = {
  position: "relative",
  spacing: 2,
  minWidth: 256,
  minHeight: 256,
  maxWidth: "100%",
  maxHeight: "100%"
};
export default MediaBase;