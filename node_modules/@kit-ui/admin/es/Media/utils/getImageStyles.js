function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

//import svgDuotone from "../filters/duotone.svg"
//import svgVignette from "../filters/vignette.svg"
//import svgGrayscale from "../filters/grayscale.svg"
export var getImageFiltersStyle = function getImageFiltersStyle(_ref) {
  var imageFilters = _ref.imageFilters;

  if (!imageFilters) {
    return;
  }

  var brightness = imageFilters.brightness,
      contrast = imageFilters.contrast,
      saturation = imageFilters.saturation,
      opacity = imageFilters.opacity,
      blur = imageFilters.blur,
      duotone = imageFilters.duotone,
      vignette = imageFilters.vignette,
      grayscale = imageFilters.grayscale;
  var filters = [];
  /*
  if (duotone) {
      filters.push('url('+svgDuotone+'#filter)')
  }
   if (vignette) {
      filters.push('url('+svgVignette+'#filter)')
  }
   if (grayscale) {
      filters.push('url('+svgGrayscale+'#filter)')
  }
  */

  if (brightness) {
    brightness = brightness + 100;
    filters.push('brightness(' + brightness + '%)');
  }

  if (contrast) {
    contrast = contrast + 100;
    filters.push('contrast(' + contrast + '%)');
  }

  if (saturation) {
    saturation = saturation + 100;
    filters.push('saturate(' + saturation + '%)');
  }

  if (opacity) {
    filters.push('opacity(' + opacity + '%)');
  }

  if (blur) {
    filters.push('blur(' + blur + 'px)');
  }

  if (!filters) {
    return undefined;
  }

  return {
    filter: filters.join(' ')
  };
};
export var getImageContainStyle = function getImageContainStyle(_ref2) {
  var cropRatio = _ref2.cropRatio,
      cropWidth = _ref2.cropWidth,
      cropHeight = _ref2.cropHeight,
      cropX = _ref2.cropX,
      cropY = _ref2.cropY,
      parentRatio = _ref2.parentRatio,
      parentWidth = _ref2.parentWidth,
      parentHeight = _ref2.parentHeight,
      imageRatio = _ref2.imageRatio,
      imageWidth = _ref2.imageWidth,
      imageHeight = _ref2.imageHeight;
  // horiz or vert
  var cropboxStyle = {};

  if (cropRatio > parentRatio) {
    return {
      width: "100%",
      height: parentWidth / cropWidth * cropHeight + "px"
    };
  } else {
    return {
      width: parentHeight / cropHeight * cropWidth + "px",
      height: "100%"
    };
  }
};
export var getImageCoverStyle = function getImageCoverStyle(_ref3) {
  var cropRatio = _ref3.cropRatio,
      cropWidth = _ref3.cropWidth,
      cropHeight = _ref3.cropHeight,
      cropX = _ref3.cropX,
      cropY = _ref3.cropY,
      parentRatio = _ref3.parentRatio,
      parentWidth = _ref3.parentWidth,
      parentHeight = _ref3.parentHeight,
      imageRatio = _ref3.imageRatio,
      imageWidth = _ref3.imageWidth,
      imageHeight = _ref3.imageHeight;
  // cropbox
  var coverRatio, cropboxStyle;

  if (cropRatio > parentRatio) {
    coverRatio = cropRatio / parentRatio;
    return {
      width: coverRatio * 100 + "%",
      height: "100%",
      marginLeft: (coverRatio * 100 - 100) / 2 * -1 + "%"
    };
  } else {
    coverRatio = parentRatio / cropRatio;
    return {
      width: "100%",
      height: coverRatio * 100 + "%"
    };
  }
};
export var getImageCropStyle = function getImageCropStyle(_ref4) {
  var imageWidth = _ref4.imageWidth,
      imageHeight = _ref4.imageHeight,
      cropX = _ref4.cropX,
      cropY = _ref4.cropY,
      cropWidth = _ref4.cropWidth,
      cropHeight = _ref4.cropHeight;
  var cropImageWidth = imageWidth / cropWidth * 100;
  var cropImageHeight = imageHeight / cropHeight * 100;
  var cropImageX = cropX / imageWidth * 100 * -1;
  var cropImageY = cropY / imageHeight * 100 * -1;
  var imageTransform = 'translateX(' + cropImageX + '%) translateY(' + cropImageY + '%)';
  return {
    position: 'absolute',
    top: 0,
    right: 'auto',
    bottom: 'auto',
    left: 0,
    width: cropImageWidth + "%",
    height: 'auto',
    maxWidth: 'none',
    maxHeight: 'none',
    transformOrigin: 'top left',
    transform: imageTransform
  };
};
export var getImageStyles = function getImageStyles(_ref5) {
  var imageCropdata = _ref5.imageCropdata,
      imageFocalpoint = _ref5.imageFocalpoint,
      imageFilters = _ref5.imageFilters,
      _ref5$objectFit = _ref5.objectFit,
      objectFit = _ref5$objectFit === void 0 ? "contain" : _ref5$objectFit,
      parentRef = _ref5.parentRef,
      imageRef = _ref5.imageRef;
  var parent = parentRef && parentRef.current;
  var parentWidth = parent.offsetWidth;
  var parentHeight = parent.offsetHeight;
  var parentRatio = parentWidth / parentHeight;
  var image = imageRef && imageRef.current;
  var imageWidth = image.naturalWidth;
  var imageHeight = image.naturalHeight;
  var imageRatio = imageWidth / imageHeight;
  var cropX = imageCropdata && imageCropdata.x * imageWidth / 100 || 0;
  var cropY = imageCropdata && imageCropdata.y * imageHeight / 100 || 0;
  var cropWidth = imageCropdata && imageCropdata.width * imageWidth / 100 || imageWidth;
  var cropHeight = imageCropdata && imageCropdata.height * imageHeight / 100 || imageHeight;
  var cropRatio = cropWidth / cropHeight;
  var cropboxStyle = {},
      cropStyle = {},
      filterStyle = {};

  if (objectFit === "contain") {
    cropboxStyle = getImageContainStyle({
      parentWidth: parentWidth,
      parentHeight: parentHeight,
      parentRatio: parentRatio,
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      imageRatio: imageRatio,
      cropX: cropX,
      cropY: cropY,
      cropWidth: cropWidth,
      cropHeight: cropHeight,
      cropRatio: cropRatio
    });
    cropStyle = getImageCropStyle({
      parentWidth: parentWidth,
      parentHeight: parentHeight,
      parentRatio: parentRatio,
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      imageRatio: imageRatio,
      cropX: cropX,
      cropY: cropY,
      cropWidth: cropWidth,
      cropHeight: cropHeight,
      cropRatio: cropRatio
    });
  }

  if (objectFit === "cover") {
    cropboxStyle = getImageCoverStyle({
      parentWidth: parentWidth,
      parentHeight: parentHeight,
      parentRatio: parentRatio,
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      imageRatio: imageRatio,
      cropX: cropX,
      cropY: cropY,
      cropWidth: cropWidth,
      cropHeight: cropHeight,
      cropRatio: cropRatio
    });
    cropStyle = getImageCropStyle({
      parentWidth: parentWidth,
      parentHeight: parentHeight,
      parentRatio: parentRatio,
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      imageRatio: imageRatio,
      cropX: cropX,
      cropY: cropY,
      cropWidth: cropWidth,
      cropHeight: cropHeight,
      cropRatio: cropRatio
    });
  }

  if (imageFilters) {
    filterStyle = getImageFiltersStyle({
      imageFilters: imageFilters
    });
  }

  var imageStyle = _extends({}, cropStyle, filterStyle);

  return {
    cropbox: cropboxStyle,
    image: imageStyle
  };
};
export default getImageStyles;