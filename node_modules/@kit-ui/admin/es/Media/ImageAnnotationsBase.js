function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useRef, useEffect } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import ImageBase from "./ImageBase";
import MarkerDefault from "./ImageAnnotationsMarkerDefault";
import { withResizeDetector } from 'react-resize-detector';
import { getImagePointEvent } from "./utils/getImagePoint";
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    list: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  };
});

var ImageAnnotations = function ImageAnnotations(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      _ref$imageCropdata = _ref.imageCropdata,
      imageCropdata = _ref$imageCropdata === void 0 ? {} : _ref$imageCropdata,
      _ref$imageFocalpoint = _ref.imageFocalpoint,
      imageFocalpoint = _ref$imageFocalpoint === void 0 ? {} : _ref$imageFocalpoint,
      _ref$imageFilters = _ref.imageFilters,
      imageFilters = _ref$imageFilters === void 0 ? {} : _ref$imageFilters,
      _ref$imageAnnotations = _ref.imageAnnotations,
      imageAnnotations = _ref$imageAnnotations === void 0 ? [] : _ref$imageAnnotations,
      markerTemplate = _ref.markerTemplate,
      onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "imageUrl", "imageCropdata", "imageFocalpoint", "imageFilters", "imageAnnotations", "markerTemplate", "onChange"]);

  var _useState = useState(false),
      isDragging = _useState[0],
      setIsDragging = _useState[1];

  var _useState2 = useState(false),
      parentRef = _useState2[0],
      setParentRef = _useState2[1];

  var handleLoad = function handleLoad(_ref2) {
    var cropboxRef = _ref2.cropboxRef;
    setParentRef(cropboxRef);
  };

  var handleClick = function handleClick(event) {
    var point = getImagePointEvent(event);
    setIsDragging(false);
    var newFormData;

    if (imageAnnotations.length) {
      newFormData = [].concat(imageAnnotations, [point]);
    } else {
      newFormData = [point];
    }

    onChange && onChange(newFormData);
  };

  var handleIndexChange = function handleIndexChange(data, index) {
    var marker = _extends({}, imageAnnotations[index], data);

    var newFormData = imageAnnotations.map(function (item, i) {
      var jsonValue = typeof marker === "undefined" ? null : marker;
      return index === i ? jsonValue : item;
    });
    onChange && onChange(newFormData);
  };

  var MarkerTemplate;

  if (markerTemplate) {
    MarkerTemplate = markerTemplate;
  } else {
    MarkerTemplate = MarkerDefault;
  }

  var classes = useStyles();
  var MarkerList = withResizeDetector(function (_ref3) {
    var width = _ref3.width,
        height = _ref3.height;

    var handleStart = function handleStart(event, data, index) {
      setIsDragging(true);
    };

    var handleDrag = function handleDrag(event, data, index) {//        setIsDragging(true)
    };

    var handleStop = function handleStop(event, data, index) {
      var x = data.x;
      var y = data.y;
      var left = x / width * 100;
      var top = y / height * 100;
      var fx = (x / width - 0.5) * 2;
      var fy = (y / height - 0.5) * -2;
      var coords = {
        left: left,
        top: top,
        x: fx,
        y: fy
      };
      console.log('COORDS', coords);
      handleIndexChange(coords, index);
      setIsDragging(false);
    };

    return /*#__PURE__*/React.createElement("div", {
      className: classes.list,
      onClick: !isDragging ? onChange && handleClick : undefined
    }, imageAnnotations && imageAnnotations.length && imageAnnotations.map(function (marker, index) {
      var left = marker.left || 0;
      var top = marker.top || 0;
      var x = left * width / 100;
      var y = top * height / 100;

      if (!onChange) {
        return /*#__PURE__*/React.createElement(MarkerTemplate, _extends({}, marker, {
          index: index,
          key: index,
          position: {
            x: x,
            y: y
          }
        }));
      }

      return /*#__PURE__*/React.createElement(MarkerTemplate, _extends({}, marker, {
        index: index,
        key: index,
        position: {
          x: x,
          y: y
        },
        onStart: function onStart(event, data) {
          return handleStart(event, data, index);
        },
        onDrag: function onDrag(event, data) {
          return handleDrag(event, data, index);
        },
        onStop: function onStop(event, data) {
          return handleStop(event, data, index);
        }
      }));
    }) || "");
  });
  return /*#__PURE__*/React.createElement(ImageBase, _extends({
    className: className || classes.root
  }, props, {
    imageUrl: imageUrl,
    imageCropdata: imageCropdata,
    imageFocalpoint: imageFocalpoint,
    imageFilters: imageFilters,
    onLoad: handleLoad
  }), /*#__PURE__*/React.createElement(MarkerList, null));
};

export default ImageAnnotations;