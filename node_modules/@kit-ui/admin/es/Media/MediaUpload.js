function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import Dropzone from 'react-dropzone';
import { makeStyles } from '@material-ui/core/styles';
import ButtonGroup from "@material-ui/core/ButtonGroup";
import Button from '@material-ui/core/Button';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      border: "1px solid",
      borderColor: theme.palette.divider,
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    }
  };
});
/** Dropzone for media layouts */

var MediaUpload = function MediaUpload(_ref) {
  var className = _ref.className,
      mediaType = _ref.mediaType,
      buttons = _ref.buttons,
      uploadProgress = _ref.uploadProgress,
      multiple = _ref.multiple,
      accept = _ref.accept,
      onUpload = _ref.onUpload,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "mediaType", "buttons", "uploadProgress", "multiple", "accept", "onUpload"]);

  var classes = useStyles({
    mediaType: mediaType
  });

  if (uploadProgress) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, uploadProgress + "/100");
  }

  return /*#__PURE__*/React.createElement(Dropzone, {
    multiple: multiple,
    accept: accept,
    onDrop: onUpload
  }, function (_ref2) {
    var getRootProps = _ref2.getRootProps,
        getInputProps = _ref2.getInputProps;
    return /*#__PURE__*/React.createElement("div", _extends({}, getRootProps(), {
      className: className
    }), /*#__PURE__*/React.createElement("input", getInputProps()), "Upload");
  });
};

MediaUpload.defaultProps = {
  multiple: false,
  accept: "image/*, video/*, audio/*"
};
MediaUpload.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
export default MediaUpload;