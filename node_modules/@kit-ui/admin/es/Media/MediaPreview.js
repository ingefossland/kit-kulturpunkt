function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from "prop-types";
import ImagePreview from "./ImagePreview";
import VideoPreview from "./VideoPreview";
import AudioPreview from "./AudioPreview";
import SourcePreview from "./SourcePreview";
var templates = {
  "image": ImagePreview,
  "video": VideoPreview,
  "audio": AudioPreview
};
/** Media preview, based on mediaType or source */

var MediaPreview = function MediaPreview(_ref) {
  var mediaType = _ref.mediaType,
      source = _ref.source,
      media = _objectWithoutPropertiesLoose(_ref, ["mediaType", "source"]);

  if (!mediaType && !source) {
    return /*#__PURE__*/React.createElement("p", null, "No mediaType or source");
  }

  var PreviewTemplate = mediaType && templates[mediaType] || source && SourcePreview;

  if (!PreviewTemplate) {
    return /*#__PURE__*/React.createElement("p", null, "No template for mediaType: ", mediaType);
  }

  return /*#__PURE__*/React.createElement(PreviewTemplate, _extends({}, media, {
    source: source
  }));
};

MediaPreview.defaultProps = {
  mediaType: undefined,
  source: undefined
};
MediaPreview.propTypes = process.env.NODE_ENV !== "production" ? {
  mediaType: PropTypes.string,
  source: PropTypes.string
} : {};
export default MediaPreview;