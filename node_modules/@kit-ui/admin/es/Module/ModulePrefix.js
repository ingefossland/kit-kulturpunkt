import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from "prop-types";
import IconButton from "@material-ui/core/IconButton";
import Icon from "@material-ui/core/Icon"; //import ButtonDraggable from "../NavToolbar/ButtonDraggable"
//import ButtonCollapsible from "../NavToolbar/ButtonCollapsible"

import ButtonSelectable from "./ButtonSelect";

var ButtonDraggable = function ButtonDraggable() {
  return /*#__PURE__*/React.createElement("p", null, "drag");
};

var ButtonCollapsible = function ButtonCollapsible() {
  return /*#__PURE__*/React.createElement("p", null, "collapse");
};

var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    icon: {
      margin: theme.spacing(1.5)
    }
  };
});

var ModulePrefix = function ModulePrefix(_ref) {
  var className = _ref.className,
      startAdornment = _ref.startAdornment,
      icon = _ref.icon,
      onClick = _ref.onClick,
      selectable = _ref.selectable,
      selected = _ref.selected,
      onSelect = _ref.onSelect;
  var classes = useStyles();

  if (startAdornment) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, startAdornment);
  }

  if (selectable) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, selectable && /*#__PURE__*/React.createElement(ButtonSelectable, {
      selected: selected,
      onClick: onSelect
    }));
  }

  if (icon && onClick) {
    return /*#__PURE__*/React.createElement(IconButton, {
      className: className || classes.root,
      onClick: onClick
    }, /*#__PURE__*/React.createElement(Icon, null, icon));
  }

  if (icon) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, /*#__PURE__*/React.createElement(Icon, {
      className: classes.icon
    }, icon));
  }

  return false;
};

ModulePrefix.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  startAdornment: PropTypes.node,
  selectable: PropTypes.bool,
  selected: PropTypes.bool,
  onSelect: PropTypes.func,
  icon: PropTypes.string,
  onClick: PropTypes.func
} : {};
export default ModulePrefix;