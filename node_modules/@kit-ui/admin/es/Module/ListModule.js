function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ModuleBase from "./ModuleBase";
import ModulePrefix from "./ModulePrefix";
import ModuleMedia from './ModuleMedia';
import ModuleTitle from './ModuleTitle';
import ModuleLabel from './ModuleLabel';
import ModuleMetadata from './ModuleMetadata';
import ModuleDescription from './ModuleDescription';
import ModuleStatus from './ModuleStatus';
import ModuleByline from './ModuleByline';
import NavToolbar from "../NavToolbar/NavToolbar";
import NavSettings from "../NavSettings/NavSettings";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    module: {
      position: "relative",
      display: "flex",
      minHeight: theme.spacing(8),
      justifyContent: "flex-start",
      alignItems: "center",
      userSelect: "none",
      "&[aria-selected=true]": {
        backgroundColor: theme.palette.action.selected
      },
      "&[role=button]": {
        cursor: "pointer",
        "& *": {
          pointerEvents: "none"
        },
        "&[aria-selected=true]": {}
      },
      "&[data-elevated=true]": {
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1)
      },
      "& + $module": {
        borderTop: "1px solid",
        borderColor: theme.palette.divider
      },
      "&.sortable-helper": {
        borderTopColor: "transparent",
        boxShadow: theme.shadows[12],
        zIndex: 2000,
        "& $settings": {
          display: "none"
        },
        "& $toolbar": {
          display: "none"
        }
      },
      "&[data-status=erased]": {
        "& figure": {
          opacity: "0.5"
        },
        "& $content": {
          opacity: "0.5"
        }
      },
      "&[data-status=trash]": {
        "& figure": {
          opacity: "0.5"
        },
        "& $content": {
          opacity: "0.5"
        }
      }
    },
    primaryAction: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    settings: {
      zIndex: 3,
      display: "flex",
      flexWrap: "none",
      "& > * + *": {
        marginLeft: theme.spacing(-1)
      }
    },
    toolbar: {
      zIndex: 3,
      display: "flex",
      flexWrap: "none",
      "& > * + *": {
        marginLeft: theme.spacing(-1)
      },
      "& button": {
        opacity: .5,
        "&:hover": {
          opacity: 1
        }
      }
    },
    body: {},
    media: {
      display: "flex"
    },
    content: {
      flexGrow: 1,
      maxWidth: "100%",
      flexDirection: "column",
      overflow: "hidden",
      alignItems: "flex-start",
      justifyContent: "flex-start",
      margin: theme.spacing(1)
    },
    header: {
      width: "100%",
      maxWidth: "100%",
      overflow: "hidden",
      display: "flex",
      alignItems: "baseline",
      justifyContent: "flex-start",
      "& * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    footer: {
      width: "100%",
      maxWidth: "100%",
      overflow: "hidden",
      display: "flex",
      alignItems: "baseline",
      justifyContent: "flex-start",
      "& * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    uploadProgress: {
      position: "absolute",
      zIndex: 2,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    progress: {
      position: "absolute",
      backgroundColor: theme.palette.primary.main,
      //        opacity: 0.25,
      height: theme.spacing(.25),
      top: "auto",
      right: "auto",
      bottom: 0,
      left: 0,
      width: function width(props) {
        return props.uploadProgress + "%";
      }
    }
  };
});
/** ListModule for listing documents */

var ListModule = function ListModule(_ref) {
  var uploadProgress = _ref.uploadProgress,
      imageUrl = _ref.imageUrl,
      untitled = _ref.untitled,
      typeLabel = _ref.typeLabel,
      type = _ref.type,
      title = _ref.title,
      description = _ref.description,
      metadata = _ref.metadata,
      status = _ref.status,
      statusLabel = _ref.statusLabel,
      author = _ref.author,
      datetime = _ref.datetime,
      selected = _ref.selected,
      onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["uploadProgress", "imageUrl", "untitled", "typeLabel", "type", "title", "description", "metadata", "status", "statusLabel", "author", "datetime", "selected", "onClick"]);

  var classes = useStyles({
    uploadProgress: uploadProgress
  });
  return /*#__PURE__*/React.createElement(ModuleBase, _extends({}, props, {
    className: classes.module,
    role: onClick && "button",
    status: status,
    selected: selected,
    onClick: onClick
  }), /*#__PURE__*/React.createElement(ModulePrefix, _extends({
    className: classes.primaryAction,
    selected: selected
  }, props)), /*#__PURE__*/React.createElement("div", {
    className: classes.media
  }, /*#__PURE__*/React.createElement(ModuleMedia, {
    backgroundColor: "transparent",
    imageUrl: imageUrl,
    width: "48px",
    height: "48px"
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.content
  }, /*#__PURE__*/React.createElement("header", {
    className: classes.header
  }, /*#__PURE__*/React.createElement(ModuleTitle, {
    status: status,
    untitled: untitled,
    title: title,
    onClick: !onClick && props.onEdit
  }), /*#__PURE__*/React.createElement(ModuleStatus, {
    statusLabel: statusLabel,
    status: statusLabel || status
  }), /*#__PURE__*/React.createElement(ModuleByline, {
    author: author,
    datetime: datetime
  })), /*#__PURE__*/React.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/React.createElement(ModuleLabel, {
    label: typeLabel || type
  }), /*#__PURE__*/React.createElement(ModuleMetadata, {
    metadata: metadata
  }), /*#__PURE__*/React.createElement(ModuleDescription, {
    description: description
  }))), uploadProgress && /*#__PURE__*/React.createElement("div", {
    className: classes.uploadProgress
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.progress
  })), /*#__PURE__*/React.createElement(NavSettings, _extends({}, props, {
    className: classes.settings
  })), /*#__PURE__*/React.createElement(NavToolbar, _extends({}, props, {
    className: classes.toolbar
  })));
};

ListModule.propTypes = process.env.NODE_ENV !== "production" ? {
  selectable: PropTypes.bool,
  selected: PropTypes.bool,
  onSelect: PropTypes.func,
  editable: PropTypes.bool,
  onEdit: PropTypes.func,
  deletable: PropTypes.bool,
  onDelete: PropTypes.func,
  restorable: PropTypes.bool,
  onRestore: PropTypes.func,
  imageUrl: PropTypes.string,
  title: PropTypes.string,
  description: PropTypes.string,
  type: PropTypes.string,
  typeLabel: PropTypes.string,
  metadata: PropTypes.array,
  status: PropTypes.string,
  statusLabel: PropTypes.string,
  author: PropTypes.string,
  datetime: PropTypes.string,

  /** Whole object is clickable, will override any other onClick events */
  onClick: PropTypes.func
} : {};
ListModule.defaultProps = {
  //    size: "small",
  editable: false,
  selectable: false,
  selected: false,
  deletable: false,
  restorable: false
};
export default ListModule;