function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import ButtonGroup from "@material-ui/core/ButtonGroup";
import Button from '@material-ui/core/Button';
import Icon from '@material-ui/core/Icon';
var useStyles = makeStyles(function (theme) {
  return {
    buttongroup: {
      width: "100%",
      overflowX: "scroll",
      borderRadius: 0,
      "& > * + *": {
        marginLeft: theme.spacing(1)
      }
    },
    button: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      fontWeight: "bold",
      textTransform: "none",
      letterSpacing: 0,
      borderRadius: 1,
      minWidth: theme.spacing(12),
      minHeight: theme.spacing(7)
    },
    icon: {
      marginRight: theme.spacing(1),
      "& + $label": {
        marginRight: theme.spacing(1)
      }
    },
    label: {}
  };
});

var ModuleButtons = function ModuleButtons(_ref) {
  var className = _ref.className,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 1 : _ref$spacing,
      _ref$buttons = _ref.buttons,
      buttons = _ref$buttons === void 0 ? [] : _ref$buttons;
  var classes = useStyles({
    spacing: spacing
  });

  if (!buttons.length) {
    return false;
  }

  var ModuleButton = function ModuleButton(_ref2) {
    var icon = _ref2.icon,
        title = _ref2.title,
        _ref2$color = _ref2.color,
        color = _ref2$color === void 0 ? "primary" : _ref2$color,
        _ref2$variant = _ref2.variant,
        variant = _ref2$variant === void 0 ? "outlined" : _ref2$variant,
        _ref2$size = _ref2.size,
        size = _ref2$size === void 0 ? "large" : _ref2$size,
        props = _objectWithoutPropertiesLoose(_ref2, ["icon", "title", "color", "variant", "size"]);

    return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
      type: "button",
      "data-size": size,
      "data-variant": variant,
      disableElevation: true,
      color: color,
      variant: variant,
      size: size,
      className: classes.button
    }), icon && /*#__PURE__*/React.createElement(Icon, {
      className: classes.icon
    }, icon), /*#__PURE__*/React.createElement("b", {
      className: classes.label
    }, title));
  };

  return /*#__PURE__*/React.createElement(ButtonGroup, {
    color: "primary",
    className: className || classes.buttongroup
  }, buttons && buttons.map(function (button, index) {
    return /*#__PURE__*/React.createElement(ModuleButton, _extends({}, button, {
      className: classes.button,
      key: index
    }));
  }));
};

export default ModuleButtons;