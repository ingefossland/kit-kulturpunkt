import React, { useState, useEffect, useRef } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from 'prop-types';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import SearchIcon from '@material-ui/icons/Search';
var useStyles = makeStyles(function (theme) {
  var _$field, _$input, _$resetButton;

  return {
    search: {
      position: "relative",
      backgroundColor: theme.palette.background.default,
      minHeight: theme.spacing(8),
      "&[aria-expanded=false]": {
        "& $field": (_$field = {
          position: "absolute",
          right: 0,
          height: theme.spacing(5),
          margin: theme.spacing(1.5),
          borderRadius: theme.spacing(2.5),
          display: "flex",
          justifyContent: "flex-start",
          width: theme.spacing(18)
        }, _$field[theme.breakpoints.down('xs')] = {
          width: theme.spacing(5)
        }, _$field.overflow = "hidden", _$field.transition = ".125s ease-out", _$field),
        "& $input": (_$input = {
          fontSize: "16px",
          paddingLeft: theme.spacing(6),
          paddingRight: theme.spacing(3),
          overflow: "hidden",
          textOverflow: "ellipsis"
        }, _$input[theme.breakpoints.down('xs')] = {
          display: "none"
        }, _$input["& + button"] = {
          display: "none"
        }, _$input),
        "& $resetButton": (_$resetButton = {
          width: "100%",
          height: theme.spacing(6),
          borderRadius: theme.spacing(3),
          marginTop: theme.spacing(-.5),
          marginRight: theme.spacing(.5),
          marginBottom: theme.spacing(-.5),
          marginLeft: theme.spacing(.5)
        }, _$resetButton[theme.breakpoints.down('xs')] = {
          margin: theme.spacing(-.5)
        }, _$resetButton.display = "flex", _$resetButton.justifyContent = "flex-start", _$resetButton)
      },
      "&[aria-expanded=true]": {
        "& $field": {
          width: "100%",
          height: theme.spacing(8),
          margin: 0,
          borderRadius: 0
        },
        "& $input": {
          paddingLeft: theme.spacing(8),
          paddingRight: theme.spacing(8)
        }
      }
    },
    input: {
      backgroundColor: "transparent",
      flexBasis: "100%",
      height: "100%",
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      lineHeight: "1",
      color: "inherit",
      border: "none",
      outline: "none",
      "&:focus + *": {
        opacity: 1
      }
    },
    field: {
      backgroundColor: "white",
      color: theme.palette.text.primary,
      "&[aria-expanded=true]": {
        width: "100%",
        "& button": {
          width: theme.spacing(6),
          height: theme.spacing(6),
          margin: theme.spacing(1)
        },
        "& input": {
          fontSize: "18px",
          paddingLeft: theme.spacing(8),
          paddingRight: theme.spacing(8),
          "& + button": {
            display: "block"
          }
        }
      }
    }
  };
});

var AppSearchGrowing = function AppSearchGrowing(_ref) {
  var _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? false : _ref$expanded,
      value = _ref.value,
      placeholder = _ref.placeholder,
      onToggle = _ref.onToggle,
      onChange = _ref.onChange,
      onReset = _ref.onReset;
  var classes = useStyles();
  var inputRef = useRef(null);

  var ButtonToggle = function ButtonToggle(_ref2) {
    var className = _ref2.className,
        disabled = _ref2.disabled,
        onClick = _ref2.onClick;
    return /*#__PURE__*/React.createElement(IconButton, {
      disableRipple: true,
      className: className,
      disabled: disabled,
      onClick: onClick
    }, /*#__PURE__*/React.createElement(SearchIcon, null));
  };

  var ButtonReset = function ButtonReset(_ref3) {
    var className = _ref3.className,
        disabled = _ref3.disabled,
        onClick = _ref3.onClick;
    return /*#__PURE__*/React.createElement(IconButton, {
      disableRipple: true,
      className: className,
      disabled: disabled,
      onClick: onClick
    }, /*#__PURE__*/React.createElement(CloseIcon, null));
  };

  return /*#__PURE__*/React.createElement("div", {
    className: classes.search,
    "aria-expanded": expanded
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.field
  }, /*#__PURE__*/React.createElement(SearchIcon, {
    className: classes.inputIcon
  }), /*#__PURE__*/React.createElement("input", {
    ref: inputRef,
    className: classes.input,
    type: "text",
    value: value,
    placeholder: placeholder,
    onChange: onChange
  }), /*#__PURE__*/React.createElement(ButtonReset, {
    className: classes.resetButton,
    onClick: onReset
  })));
};

AppSearchGrowing.defaultProps = {
  expanded: true,
  placeholder: "Search"
};
AppSearchGrowing.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Expanded */
  expanded: PropTypes.bool,

  /** Placeholder */
  placeholder: PropTypes.string,

  /** Query */
  q: PropTypes.string,

  /** onChange */
  onChange: PropTypes.func,

  /** onToggle */
  onToggle: PropTypes.func,

  /** onReset */
  onReset: PropTypes.func
} : {};
export default AppSearchGrowing;