import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import ButtonBase from '@material-ui/core/ButtonBase';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import SearchIcon from '@material-ui/icons/Search';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    search: {
      display: "flex",
      position: "relative",
      backgroundColor: "white",
      color: "black",
      width: "100%",
      height: "64px",
      overflow: "hidden",
      "& $field": {
        display: "none"
      },
      "&[aria-expanded=true] & $field": {
        display: "flex"
      }
    },
    field: {},
    input: {
      backgroundColor: "transparent",
      flexBasis: "100%",
      height: "100%",
      paddingLeft: theme.spacing(8),
      paddingRight: theme.spacing(8),
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      lineHeight: "1",
      color: "inherit",
      border: "none",
      outline: "none",
      "&:focus + *": {
        opacity: 1
      }
    },
    toggleButton: {
      position: "absolute",
      zIndex: "2",
      top: "0",
      left: "0",
      margin: theme.spacing(1),
      "&[disabled]": {
        color: theme.palette.text.secondary
      }
    },
    resetButton: {
      position: "absolute",
      zIndex: "2",
      top: "0",
      right: "0",
      margin: theme.spacing(1)
    }
  };
});

var ButtonReset = function ButtonReset(_ref) {
  var className = _ref.className,
      onClick = _ref.onClick;
  return /*#__PURE__*/React.createElement(IconButton, {
    className: className,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(CloseIcon, null));
};

var ButtonToggle = function ButtonToggle(_ref2) {
  var className = _ref2.className,
      disabled = _ref2.disabled,
      onClick = _ref2.onClick;
  return /*#__PURE__*/React.createElement(IconButton, {
    disableRipple: true,
    className: className,
    disabled: disabled,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(SearchIcon, null));
};

var NavSearch = function NavSearch(_ref3) {
  var className = _ref3.className,
      variant = _ref3.variant,
      _ref3$expanded = _ref3.expanded,
      expanded = _ref3$expanded === void 0 ? true : _ref3$expanded,
      _ref3$placeholder = _ref3.placeholder,
      placeholder = _ref3$placeholder === void 0 ? "Search" : _ref3$placeholder,
      q = _ref3.q,
      onFocus = _ref3.onFocus,
      onChange = _ref3.onChange,
      onToggle = _ref3.onToggle,
      onReset = _ref3.onReset;

  var _useState = useState(q),
      value = _useState[0],
      setValue = _useState[1];

  var inputRef = useRef(null);
  var classes = useStyles();

  var handleToggle = function handleToggle(event) {
    onToggle && onToggle(event);

    if (!expanded) {
      inputRef.current.focus();
    }
  };

  var handleChange = function handleChange(event) {
    onChange && onChange(event.target.value, event) || setValue(event.target.value);
    onFocus && onFocus(event);
  };

  var handleReset = function handleReset(event) {
    setValue("");

    if (onReset) {
      onReset(event);
    } else if (onChange) {
      onChange("", event);
    }
  };

  useEffect(function () {
    setValue(q);
  }, [q]);
  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.search,
    "aria-expanded": expanded
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.field
  }, /*#__PURE__*/React.createElement(ButtonToggle, {
    className: classes.toggleButton,
    onClick: handleToggle,
    disabled: !onToggle && true || false
  }), /*#__PURE__*/React.createElement("input", {
    ref: inputRef,
    className: classes.input,
    type: "text",
    value: value,
    placeholder: placeholder,
    onChange: handleChange
  }), /*#__PURE__*/React.createElement(ButtonReset, {
    className: classes.resetButton,
    onClick: handleReset
  })));
};

NavSearch.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Placeholder */
  placeholder: PropTypes.string,

  /** Query */
  q: PropTypes.string,

  /** onChange */
  onChange: PropTypes.func,

  /** onToggle */
  onToggle: PropTypes.func,

  /** onReset */
  onReset: PropTypes.func
} : {};
export default NavSearch;