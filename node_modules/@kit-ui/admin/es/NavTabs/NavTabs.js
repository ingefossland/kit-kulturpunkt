function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { Component } from 'react';
import { makeStyles, withStyles } from '@material-ui/core/styles';
import Tabs from '@material-ui/core/Tabs';
import Tab from '@material-ui/core/Tab';
import ButtonTab from "./ButtonTab"; //import "./NavTabs.scss";

var useStyles = makeStyles({});
var StyledTabs = withStyles({
  root: {
    padding: 0,
    margin: 0,
    minHeight: "36px"
  },
  indicator: {
    backgroundColor: '#666'
  }
})(Tabs);
var StyledTab = withStyles(function (theme) {
  return {
    root: {
      textTransform: 'none',
      minWidth: 0,
      minHeight: "36px",
      paddingLeft: 0,
      paddingRight: 0,
      marginLeft: 0,
      marginRight: theme.spacing(2),
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      fontWeight: "bold",
      letterSpacing: 0,
      color: "inherit",
      '&:hover': {
        color: "inherit",
        opacity: 1
      },
      '&$selected': {
        opacity: 1
      },
      '&:focus': {
        opacity: 1
      }
    },
    selected: {}
  };
})(function (props) {
  return /*#__PURE__*/React.createElement(Tab, _extends({
    disableRipple: true
  }, props));
});

var NavTabs = function NavTabs(_ref) {
  var className = _ref.className,
      _ref$tabs = _ref.tabs,
      tabs = _ref$tabs === void 0 ? [] : _ref$tabs;
  var classes = useStyles();

  var _React$useState = React.useState(0),
      value = _React$useState[0],
      setValue = _React$useState[1];

  var onTabIndex = function onTabIndex(event, index) {
    setValue(index);

    if (tabs[index].onClick) {
      tabs[index].onClick();
    }
  };

  return /*#__PURE__*/React.createElement("nav", {
    className: className || classes.root
  }, /*#__PURE__*/React.createElement(StyledTabs, {
    value: value,
    onChange: onTabIndex,
    indicatorColor: "primary",
    textColor: "inherit"
  }, tabs && tabs.map(function (tab, index) {
    return /*#__PURE__*/React.createElement(StyledTab, {
      label: tab.label || tab.title,
      value: index,
      key: index
    });
  })));
};

export default NavTabs;