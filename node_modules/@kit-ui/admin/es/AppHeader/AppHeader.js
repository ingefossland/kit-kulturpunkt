function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import PropTypes from "prop-types";
import AppBar from '@material-ui/core/AppBar';
import AppSearch from "../AppSearch/AppSearch";
import AppIdentifier from "./AppHeaderIdentifier";
import AppSubview from "./AppHeaderSubview";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  var _search;

  return {
    header: {
      position: "relative",
      width: "100%",
      height: theme.spacing(8),
      overflow: "hidden"
    },
    identifer: {
      position: "relative",
      width: "100%",
      height: theme.spacing(8),
      marginTop: theme.spacing(-8),
      transition: ".125s ease-out",
      "&[aria-expanded=true]": {
        marginTop: 0
      }
    },
    subview: {
      backgroundColor: theme.palette.background.default,
      color: theme.palette.text.primary,
      position: "relative",
      width: "100%",
      height: theme.spacing(8),
      marginTop: theme.spacing(-8),
      transition: ".125s ease-out",
      "&[aria-expanded=true]": {
        marginTop: 0
      }
    },
    search: (_search = {
      position: "relative",
      height: theme.spacing(8),
      transition: ".125s ease-out",
      display: "flex"
    }, _search["position"] = "relative", _search.backgroundColor = "white", _search.color = theme.palette.text.primary, _search.width = "100%", _search["height"] = theme.spacing(8), _search.overflow = "hidden", _search.fontFamily = "Akkurat, sans-serif", _search["&[aria-expanded=true]"] = {
      marginTop: theme.spacing(-8)
    }, _search)
  };
});

var AppHeader = function AppHeader(_ref) {
  var className = _ref.className,
      _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? true : _ref$expanded,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === void 0 ? 2 : _ref$elevation,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      title = _ref.title,
      subtitle = _ref.subtitle,
      menu = _ref.menu,
      search = _ref.search,
      subview = _ref.subview,
      children = _ref.children;
  var classes = useStyles({
    color: color,
    search: search
  }); //    const classesSearch = search && search.variant === "grow" && classes.growingSearch || classes.search
  //    const justifyContent = search && search.variant === "grow" && "flex-start" || "center"

  return /*#__PURE__*/React.createElement(AppBar, {
    position: "absolute",
    className: className || classes.header,
    component: "header",
    "aria-expanded": expanded,
    elevation: expanded && elevation
  }, subview && /*#__PURE__*/React.createElement(AppSubview, _extends({}, subview, {
    className: classes.subview,
    expanded: subview && subview.expanded
  })), /*#__PURE__*/React.createElement(AppIdentifier, {
    className: classes.identifer,
    menu: menu,
    search: search,
    title: title,
    subtitle: subtitle,
    expanded: search && search.expanded && false || true
  }), search && /*#__PURE__*/React.createElement(AppSearch, _extends({}, search, {
    className: classes.search
  })), children);
};

AppHeader.defaultProps = {
  expanded: true,
  search: undefined,
  subview: undefined
};
AppHeader.propTypes = process.env.NODE_ENV !== "production" ? {
  expanded: PropTypes.bool,
  elevation: PropTypes.number,
  color: PropTypes.string,
  title: PropTypes.string,
  subtitle: PropTypes.string,
  search: PropTypes.shape({
    expanded: PropTypes.bool,
    placeholder: PropTypes.string
  }),
  subview: PropTypes.shape({
    expanded: PropTypes.bool,
    title: PropTypes.string,
    subtitle: PropTypes.string
  })
} : {};
export default AppHeader;