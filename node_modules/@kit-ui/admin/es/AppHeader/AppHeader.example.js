function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from "react";
import AppHeader from "./AppHeader";
export var AppHeaderExample = function AppHeaderExample(props) {
  // search
  var _useState = useState(props.search),
      search = _useState[0],
      setSearch = _useState[1];

  var _useState2 = useState(null),
      searchQ = _useState2[0],
      setSearchQ = _useState2[1];

  var searchChange = function searchChange(q) {
    setSearchQ(q);
  };

  var resetSearch = function resetSearch() {
    setSearchQ(null);

    if (!searchQ) {
      toggleSearch();
    }
  };

  var toggleSearch = function toggleSearch() {
    setSearch(_extends({}, search, {
      expanded: !search.expanded
    }));
  };

  var searchState = search && _extends({}, search, {
    onChange: searchChange,
    onToggle: toggleSearch,
    onReset: resetSearch,
    q: searchQ
  }); // subview


  var _useState3 = useState(props.subview),
      subview = _useState3[0],
      setSubview = _useState3[1];

  var toggleSubview = function toggleSubview() {
    setSubview(_extends({}, subview, {
      expanded: !subview.expanded
    }));
  };

  var subviewState = subview && _extends({}, subview, {
    onToggle: toggleSubview
  });

  return /*#__PURE__*/React.createElement(AppHeader, _extends({}, props, {
    search: searchState,
    subview: subviewState
  }));
};
export default AppHeaderExample;