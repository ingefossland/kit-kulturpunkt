function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "relative",
      width: "100%",
      padding: function padding(props) {
        return theme.spacing(props.padding || 0);
      },
      display: "flex",
      "& > * + *": {
        flexGrow: 1,
        marginLeft: function marginLeft(props) {
          return theme.spacing(props.spacing || 0);
        }
      },
      "& > *:first-child": {
        flexGrow: 0,
        flexShrink: 0,
        flexBasis: function flexBasis(props) {
          return props.minWidth;
        },
        minHeight: function minHeight(props) {
          return props.minHeight;
        }
      }
    }
  };
});

var LayoutThumbnail = function LayoutThumbnail(_ref) {
  var _ref$minWidth = _ref.minWidth,
      minWidth = _ref$minWidth === void 0 ? 164 : _ref$minWidth,
      _ref$minHeight = _ref.minHeight,
      minHeight = _ref$minHeight === void 0 ? 164 : _ref$minHeight,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 0 : _ref$padding,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 2 : _ref$spacing,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["minWidth", "minHeight", "padding", "spacing", "children"]);

  var classes = useStyles({
    minWidth: minWidth,
    padding: padding,
    spacing: spacing
  });
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, children);
};

export default LayoutThumbnail;