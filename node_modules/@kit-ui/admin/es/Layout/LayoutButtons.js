function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from "prop-types";
import ButtonGroup from "@material-ui/core/ButtonGroup";
import Button from '@material-ui/core/Button';
import Icon from '@material-ui/core/Icon';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      borderRadius: 0,
      margin: function margin(props) {
        return theme.spacing(-1 * props.spacing / 2);
      }
    },
    group: {
      flexDirection: function flexDirection(props) {
        return props.flexDirection;
      },
      alignItems: function alignItems(props) {
        return props.alignItems;
      }
    },
    button: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      fontWeight: "bold",
      textTransform: "none",
      letterSpacing: 0,
      borderRadius: 1,
      minWidth: theme.spacing(12),
      minHeight: theme.spacing(5),
      margin: function margin(props) {
        return theme.spacing(props.spacing / 2);
      },
      "&[data-size=large]": {
        minHeight: theme.spacing(7)
      },
      "&[data-variant=text]": {
        fontWeight: "normal"
      }
    },
    icon: {
      marginRight: theme.spacing(1),
      "& + $label": {
        marginRight: theme.spacing(1)
      }
    },
    label: {}
  };
});

var DefaultButton = function DefaultButton(_ref) {
  var icon = _ref.icon,
      label = _ref.label,
      title = _ref.title,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      spacing = _ref.spacing,
      _ref$disableElevation = _ref.disableElevation,
      disableElevation = _ref$disableElevation === void 0 ? true : _ref$disableElevation,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "outlined" : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "large" : _ref$size,
      props = _objectWithoutPropertiesLoose(_ref, ["icon", "label", "title", "color", "spacing", "disableElevation", "variant", "size"]);

  var classes = useStyles({
    spacing: spacing
  });
  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {
    type: "button",
    "data-size": size,
    "data-variant": variant,
    disableElevation: disableElevation,
    color: color,
    variant: variant,
    size: size,
    className: classes.button
  }), icon && /*#__PURE__*/React.createElement(Icon, {
    className: classes.icon
  }, icon), /*#__PURE__*/React.createElement("b", {
    className: classes.label
  }, label || title));
};

var LayoutButtons = function LayoutButtons(_ref2) {
  var className = _ref2.className,
      buttonGroupProps = _ref2.buttonGroupProps,
      buttonTemplate = _ref2.buttonTemplate,
      buttonProps = _ref2.buttonProps,
      _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? [] : _ref2$buttons,
      props = _objectWithoutPropertiesLoose(_ref2, ["className", "buttonGroupProps", "buttonTemplate", "buttonProps", "buttons"]);

  var spacing = buttonGroupProps.spacing || props.spacing;
  var flexDirection = buttonGroupProps.flexDirection || props.flexDirection;
  var alignItems = buttonGroupProps.alignItems || props.alignItems;
  buttonGroupProps = _extends({}, buttonGroupProps, {
    spacing: spacing,
    fullWidth: props.fullWidth || buttonGroupProps.fullWidth
  });
  buttonProps = _extends({}, buttonProps, {
    spacing: spacing,
    variant: props.variant || buttonProps.variant || buttonGroupProps.variant,
    size: props.size || buttonProps.size || buttonGroupProps.size
  });
  var classes = useStyles({
    spacing: spacing,
    flexDirection: flexDirection,
    alignItems: alignItems
  });

  if (!buttons.length) {
    return null;
  }

  var ButtonTemplate;

  if (buttonTemplate) {
    ButtonTemplate = buttonTemplate;
  } else {
    ButtonTemplate = DefaultButton;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.root
  }, /*#__PURE__*/React.createElement(ButtonGroup, _extends({}, buttonGroupProps, {
    color: "primary",
    className: classes.group
  }), buttons && buttons.map(function (button, index) {
    return /*#__PURE__*/React.createElement(ButtonTemplate, _extends({}, buttonProps, button, {
      key: index
    }));
  })));
};

LayoutButtons.defaultProps = {
  buttonGroupProps: {
    "fullWidth": false,
    "variant": "outlined",
    "size": "large",
    "spacing": 1
  },
  buttonProps: {
    "variant": "outlined",
    "size": "large",
    "spacing": 1
  }
};
LayoutButtons.propTypes = process.env.NODE_ENV !== "production" ? {
  buttons: PropTypes.array,
  buttonGroupProps: PropTypes.object,
  buttonProps: PropTypes.object
} : {};
export default LayoutButtons;