function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import moment from 'moment';
import { getCalendar } from "../utils/";
var useStyles = makeStyles(function (theme) {
  return {
    root: {},
    table: {
      width: "100%",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      "& thead": {
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start"
      },
      "& tbody": {
        display: "flex",
        flexDirection: "column",
        alignItems: "flex-start"
      },
      "& tr": {
        display: "flex",
        alignItems: "flex-start",
        width: "100%",
        "& > *": {
          width: theme.spacing(4)
        }
      }
    },
    weekday: {
      display: "flex",
      width: theme.spacing(4),
      height: theme.spacing(4),
      alignItems: "center",
      justifyContent: "center",
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      lineHeight: 1
    },
    date: {
      width: theme.spacing(4),
      height: theme.spacing(4),
      margin: 0,
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      color: theme.palette.text.disabled,
      lineHeight: 1,
      "&[data-month=true]": {
        color: theme.palette.text.primary
      },
      "&[data-today=true]": {
        border: "1px solid",
        borderColor: theme.palette.primary.main
      },
      "&[data-selected=true]": {
        backgroundColor: theme.palette.secondary.main,
        color: theme.palette.secondary.contrastText
      }
    }
  };
});

var NavCalendarWeekday = function NavCalendarWeekday(_ref) {
  var datetime = _ref.datetime;
  var weekday = moment(datetime).format('dd').substr(0, 1).toUpperCase();
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("div", {
    className: classes.weekday
  }, weekday);
};

var NavCalendarDate = function NavCalendarDate(_ref2) {
  var datetime = _ref2.datetime,
      date = _ref2.date,
      monthStart = _ref2.monthStart,
      monthEnd = _ref2.monthEnd,
      onChange = _ref2.onChange;
  var classes = useStyles();
  var selected = date === datetime;
  var dtMonth = moment(datetime).isSameOrAfter(monthStart, 'day') && moment(datetime).isSameOrBefore(monthEnd, 'day');
  return /*#__PURE__*/React.createElement(IconButton, {
    className: classes.date,
    onClick: function onClick(event) {
      return onChange && onChange(datetime, event);
    },
    "data-selected": selected,
    "data-month": dtMonth
  }, moment(datetime).format('D'));
};

var NavCalendar = function NavCalendar(_ref3) {
  var className = _ref3.className,
      _ref3$format = _ref3.format,
      format = _ref3$format === void 0 ? "YYYY-MM-DD" : _ref3$format,
      today = _ref3.today,
      date = _ref3.date,
      startDate = _ref3.startDate,
      endDate = _ref3.endDate,
      onChange = _ref3.onChange;
  var classes = useStyles();
  today = today && moment(today, format, true).isValid() && date || moment().format(format);
  date = date && moment(date, format, true).isValid() && date || today;
  startDate = startDate && moment(startDate, format, true).isValid() && startDate || date;
  endDate = endDate && moment(endDate, format, true).isValid() && endDate || startDate;
  var monthStart = moment(date).startOf('month').format('YYYY-MM-DD');
  var monthEnd = moment(date).endOf('month').format('YYYY-MM-DD');

  var _getCalendar = getCalendar({
    date: startDate
  }),
      rows = _getCalendar.rows;

  return /*#__PURE__*/React.createElement("table", {
    className: className || classes.table
  }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, rows[0].map(function (col, c) {
    return /*#__PURE__*/React.createElement("th", {
      key: c
    }, /*#__PURE__*/React.createElement(NavCalendarWeekday, col));
  }))), /*#__PURE__*/React.createElement("tbody", null, rows.map(function (row, r) {
    return /*#__PURE__*/React.createElement("tr", {
      key: r
    }, row.map(function (col, c) {
      return /*#__PURE__*/React.createElement("td", {
        key: c
      }, /*#__PURE__*/React.createElement(NavCalendarDate, _extends({}, col, {
        date: date,
        today: today,
        monthStart: monthStart,
        monthEnd: monthEnd,
        onChange: onChange
      })));
    }));
  })));
};

export default NavCalendar;