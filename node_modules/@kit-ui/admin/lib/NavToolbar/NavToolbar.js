"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _NavToolbarOptions = _interopRequireDefault(require("./NavToolbarOptions"));

var _NavToolbarSettings = _interopRequireDefault(require("./NavToolbarSettings"));

var _NavToolbarButton = _interopRequireDefault(require("./NavToolbarButton"));

var _getToolbar = _interopRequireDefault(require("./getToolbar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    toolbar: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexWrap: "nowrap",
      "& > * + *": {
        marginLeft: theme.spacing(-1)
      }
    }
  };
});
/** NavToolbar renders buttons and options based on capabilities. */

var NavToolbar = function NavToolbar(_ref) {
  var className = _ref.className,
      toolbar = _ref.toolbar,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "toolbar"]);

  var classes = useStyles();

  if (!toolbar) {
    toolbar = (0, _getToolbar.default)(props);
  }

  if (!toolbar.length) {
    return false;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: className || classes.toolbar
  }, toolbar && toolbar.map(function (button, index) {
    var value = button.value,
        options = button.options;

    if (value) {
      return /*#__PURE__*/_react.default.createElement(_NavToolbarSettings.default, button);
    }

    if (options) {
      return /*#__PURE__*/_react.default.createElement(_NavToolbarOptions.default, button);
    }

    return /*#__PURE__*/_react.default.createElement(_NavToolbarButton.default, button);
  }));
};

NavToolbar.propTypes = process.env.NODE_ENV !== "production" ? {
  toolbar: _propTypes.default.array,
  hideable: _propTypes.default.bool,
  hidden: _propTypes.default.bool,
  onHide: _propTypes.default.func,
  onUnhide: _propTypes.default.func,
  editable: _propTypes.default.bool,
  editing: _propTypes.default.bool,
  onEdit: _propTypes.default.func,
  deletable: _propTypes.default.bool,
  deleted: _propTypes.default.bool,
  onDelete: _propTypes.default.func,
  erasable: _propTypes.default.bool,
  erased: _propTypes.default.bool,
  onErase: _propTypes.default.func,
  restorable: _propTypes.default.bool,
  restored: _propTypes.default.bool,
  onRestore: _propTypes.default.func,
  removable: _propTypes.default.bool,
  removed: _propTypes.default.bool,
  onRemove: _propTypes.default.func
} : {};
var _default = NavToolbar;
exports.default = _default;
module.exports = exports.default;