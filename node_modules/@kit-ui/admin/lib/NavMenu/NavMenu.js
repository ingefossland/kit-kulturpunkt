"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _NavMenuList = _interopRequireDefault(require("./NavMenuList"));

var _NavMenuItem = _interopRequireDefault(require("./NavMenuItem"));

var _NavMenuLink = _interopRequireDefault(require("./NavMenuLink"));

var _NavMenuLabel = _interopRequireDefault(require("./NavMenuLabel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var NavMenuCalendar = function NavMenuCalendar() {
  return /*#__PURE__*/_react.default.createElement("p", null, "cal");
};
/** Menu component. Takes */


var NavMenu = function NavMenu(_ref) {
  var className = _ref.className,
      _ref$icons = _ref.icons,
      icons = _ref$icons === void 0 ? {} : _ref$icons,
      _ref$menu = _ref.menu,
      menu = _ref$menu === void 0 ? [] : _ref$menu,
      menuByUrl = _ref.menuByUrl,
      currentUrl = _ref.currentUrl,
      onSelect = _ref.onSelect,
      onToggle = _ref.onToggle;

  var _onSelect = function _onSelect(item, event) {
    onSelect && onSelect(item);
  };

  var _onToggle = function _onToggle(item, event) {
    onToggle && onToggle(item);
  };

  var renderLink = function renderLink(item) {
    var selected = item.selected,
        url = item.url,
        icon = item.icon,
        title = item.title,
        label = item.label,
        count = item.count;
    return /*#__PURE__*/_react.default.createElement(_NavMenuLink.default, {
      selected: selected,
      url: url,
      icon: icon,
      label: label || title,
      count: count,
      onClick: function onClick(event) {
        return _onSelect(item, event);
      }
    });
  };

  var renderLabel = function renderLabel(item) {
    var selected = item.selected,
        url = item.url,
        icon = item.icon,
        title = item.title,
        label = item.label,
        count = item.count;
    return /*#__PURE__*/_react.default.createElement(_NavMenuLabel.default, {
      selected: selected,
      url: url,
      icon: icon,
      label: label || title,
      count: count,
      onClick: function onClick(event) {
        return _onSelect(item, event);
      }
    });
  };

  var renderItem = function renderItem(item, index) {
    if (item.url && menuByUrl && menuByUrl[item.url]) {
      item = _extends({}, menuByUrl[item.url], item);
    }

    if (item.icon && icons[item.icon]) {
      item = _extends({}, item, {
        icon: icons[item.icon]
      });
    }

    if (item.url && currentUrl && item.url === currentUrl) {
      item = _extends({}, item, {
        expanded: true,
        selected: true
      });
    }

    if (item.url && currentUrl && currentUrl.startsWith(item.url)) {
      item = _extends({}, item, {
        expanded: true
      });
    }

    var _item = item,
        role = _item.role,
        calendar = _item.calendar,
        children = _item.children,
        hidden = _item.hidden,
        selected = _item.selected,
        expanded = _item.expanded;

    if (role === "section") {
      return /*#__PURE__*/_react.default.createElement(_NavMenuItem.default, {
        key: index,
        role: "group"
      }, renderLabel(item), children && /*#__PURE__*/_react.default.createElement(_NavMenuList.default, {
        role: "group"
      }, children && children.map(function (item, index) {
        return renderItem(_extends({}, item, {
          role: ''
        }), index);
      })));
    }

    if (hidden) {
      return /*#__PURE__*/_react.default.createElement(_NavMenuItem.default, {
        key: index,
        role: role
      }, /*#__PURE__*/_react.default.createElement(_NavMenuList.default, {
        role: role
      }, children && children.map(renderItem)));
    }

    if (calendar) {
      return /*#__PURE__*/_react.default.createElement(_NavMenuItem.default, {
        key: index,
        role: role || "treeitem",
        selected: selected,
        expanded: expanded,
        onToggle: function onToggle(event) {
          return _onToggle(item, event);
        }
      }, renderLink(item), expanded && /*#__PURE__*/_react.default.createElement(NavMenuCalendar, calendar));
    }

    if (children && children.length) {
      return /*#__PURE__*/_react.default.createElement(_NavMenuItem.default, {
        key: index,
        role: role || "treeitem",
        selected: selected,
        expanded: expanded,
        onToggle: function onToggle(event) {
          return _onToggle(item, event);
        }
      }, renderLink(item), children && expanded && /*#__PURE__*/_react.default.createElement(_NavMenuList.default, {
        role: "tree"
      }, children && children.map(renderItem)));
    }

    return /*#__PURE__*/_react.default.createElement(_NavMenuItem.default, _extends({}, item, {
      key: index,
      role: role || "none"
    }), renderLink(item));
  };

  if (!menu || !menu.length) {
    return false;
  }

  return /*#__PURE__*/_react.default.createElement("nav", {
    className: className
  }, /*#__PURE__*/_react.default.createElement(_NavMenuList.default, {
    role: "tree"
  }, menu.map(renderItem)));
};

NavMenu.defaultProps = {
  menu: [],
  menuByUrl: {}
};
NavMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  /** ClassName */
  className: _propTypes.default.string,

  /** The menu array */
  menu: _propTypes.default.array,

  /** Menu items, indexed by url */
  menuByUrl: _propTypes.default.object,

  /** Current URL selected */
  currentUrl: _propTypes.default.string,

  /** Select function */
  onSelect: _propTypes.default.func,

  /** Toggle function */
  onToggle: _propTypes.default.func
} : {};
var _default = NavMenu;
exports.default = _default;
module.exports = exports.default;