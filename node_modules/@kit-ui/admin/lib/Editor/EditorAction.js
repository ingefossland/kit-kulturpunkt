"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _ClickAwayListener = _interopRequireDefault(require("@material-ui/core/ClickAwayListener"));

var _Popper = _interopRequireDefault(require("@material-ui/core/Popper"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _ArrowDropDown = _interopRequireDefault(require("@material-ui/icons/ArrowDropDown"));

var _MenuList = _interopRequireDefault(require("@material-ui/core/MenuList"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _ButtonGroup = _interopRequireDefault(require("@material-ui/core/ButtonGroup"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

var _Edit = _interopRequireDefault(require("@material-ui/icons/Edit"));

var _RemoveRedEye = _interopRequireDefault(require("@material-ui/icons/RemoveRedEye"));

var _NavAction = _interopRequireDefault(require("../NavAction/NavAction"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _iconButton;

  return {
    root: {
      fontSize: "14px",
      marginLeft: theme.spacing(1),
      marginRight: theme.spacing(1)
    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "inherit",
      fontWeight: "bold",
      marginLeft: theme.spacing(2),
      marginRight: theme.spacing(2)
    },
    primaryButton: {
      borderRadius: 0,
      minWidth: theme.spacing(7),
      paddingLeft: theme.spacing(2),
      paddingRight: theme.spacing(2),
      height: theme.spacing(5),
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontWeight: "bold"
    },
    primaryToggle: {
      borderRadius: 0,
      width: theme.spacing(5),
      height: theme.spacing(5)
    },
    iconButton: (_iconButton = {
      fontSize: "inherit",
      minWidth: theme.spacing(5),
      minHeight: theme.spacing(5),
      border: "1px solid",
      borderColor: "rgba(0,0,0,.25)"
    }, _iconButton[theme.breakpoints.down('xs')] = {
      border: "none"
    }, _iconButton),
    icon: {
      fontSize: "18px"
    }
  };
});

var PrimaryButton = function PrimaryButton(_ref) {
  var disabled = _ref.disabled,
      label = _ref.label,
      onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    color: "primary",
    className: classes.primaryButton,
    disabled: disabled,
    onClick: onClick
  }, label);
};

var PrimaryComboButton = function PrimaryComboButton(_ref2) {
  var forwardedRef = _ref2.forwardedRef,
      disabled = _ref2.disabled,
      expanded = _ref2.expanded,
      controls = _ref2.controls,
      label = _ref2.label,
      onClick = _ref2.onClick,
      onToggle = _ref2.onToggle;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_ButtonGroup.default, {
    "aria-label": "action",
    color: "primary",
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    className: classes.primaryButton,
    disabled: disabled,
    onClick: onClick
  }, label), /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    className: classes.primaryToggle,
    size: "small",
    "aria-controls": expanded ? controls : undefined,
    "aria-expanded": expanded ? 'true' : undefined,
    "aria-label": "options",
    "aria-haspopup": "menu",
    onClick: onToggle
  }, /*#__PURE__*/_react.default.createElement(_ArrowDropDown.default, null)));
};

var PrimaryIconButton = function PrimaryIconButton(_ref3) {
  var onClick = _ref3.onClick,
      children = _ref3.children;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.iconButton,
    onClick: onClick
  }, children);
};

var EditorAction = function EditorAction(_ref4) {
  var className = _ref4.className,
      primaryAction = _ref4.primaryAction;

  var _useState = (0, _react.useState)(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = (0, _react.useRef)(null);
  var classes = useStyles();

  if (!primaryAction) {
    return false;
  }

  var handleToggle = function handleToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var handleSelect = function handleSelect(_ref5) {
    var onClick = _ref5.onClick;
    onClick && onClick();
    setExpanded(false);
  }; //    const primaryAction = action && action[0]


  if (primaryAction && primaryAction.type === "view") {
    return /*#__PURE__*/_react.default.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/_react.default.createElement(PrimaryIconButton, primaryAction, /*#__PURE__*/_react.default.createElement(_RemoveRedEye.default, {
      className: classes.icon
    })));
  } else if (primaryAction && primaryAction.type === "edit") {
    return /*#__PURE__*/_react.default.createElement("nav", {
      className: className || classes.root
    }, /*#__PURE__*/_react.default.createElement(PrimaryIconButton, primaryAction, /*#__PURE__*/_react.default.createElement(_Edit.default, {
      className: classes.icon
    })));
  } // NavAction


  if (primaryAction) {
    return /*#__PURE__*/_react.default.createElement(_NavAction.default, {
      className: className || classes.root,
      menu: [primaryAction],
      placement: "bottom-end"
    });
  }
  /*
   if (primaryAction && primaryAction.children) {
       return (
          <nav className={className || classes.root}>
              <PrimaryComboButton {...primaryAction} expanded={expanded} forwardedRef={anchorRef} onToggle={handleToggle} />
              <Popper open={expanded} style={{zIndex: 2000}}
                      role={undefined} transition anchorEl={anchorRef.current} placement="bottom-start">
                      <ClickAwayListener onClickAway={handleToggle}>
                          <div>
                          <Paper elevation={1} square={true} aria-expanded={expanded}>
                              <MenuList>
                                  {primaryAction.children.map((item, index) => (
                                      <MenuItem {...item} key={index} onClick={() => handleSelect(item)}>
                                          { item.label || item.title }
                                      </MenuItem>
                                  ))}
                              </MenuList>
                          </Paper>
                          </div>
                      </ClickAwayListener>
              </Popper>
          </nav>
      )
      
  }
   if (primaryAction) {
      return (
          <nav className={className || classes.root}>
              <PrimaryButton {...primaryAction} />
          </nav>
      )
  }
   */

};

var _default = EditorAction;
exports.default = _default;
module.exports = exports.default;