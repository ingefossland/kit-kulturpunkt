"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _icons = require("@kit-ui/icons");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      "&[data-is-loading=true]": {
        pointerEvents: "none"
      }
    },
    loader: {
      position: "absolute",
      zIndex: 2000,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      backgroundColor: "white",
      color: "black",
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      justifyContent: "center",
      opacity: 0,
      transition: ".5s ease-out",
      pointerEvents: "none",
      "[data-is-loading=true] &": {
        opacity: 1
      }
    },
    icon: {
      "& > svg": {
        fontSize: "64px"
      },
      "& > img": {
        width: theme.spacing(8),
        height: theme.spacing(8)
      },
      transition: ".5s ease-out",
      transform: "scale(3)",
      opacity: 0,
      "[data-is-loading=true] &": {
        opacity: 1,
        transform: "scale(1)"
      }
    },
    content: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      "& * + *": {
        margin: theme.spacing(.5)
      }
    },
    title: {
      fontFamily: "Akkurat, sans-serif",
      fontWeight: "bold",
      fontSize: "16px",
      color: theme.palette.text.primary
    },
    description: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      color: theme.palette.text.secondary
    }
  };
});

var AppLoader = function AppLoader(_ref) {
  var className = _ref.className,
      _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? true : _ref$isLoading,
      icon = _ref.icon,
      imageUrl = _ref.imageUrl,
      title = _ref.title,
      description = _ref.description,
      children = _ref.children;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-is-loading": isLoading
  }, !isLoading && children, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.loader
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.icon
  }, icon || imageUrl && /*#__PURE__*/_react.default.createElement("img", {
    src: imageUrl
  }) || /*#__PURE__*/_react.default.createElement(_icons.AppIcon, null)), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.content
  }, /*#__PURE__*/_react.default.createElement("h2", {
    className: classes.title
  }, title), /*#__PURE__*/_react.default.createElement("p", {
    className: classes.description
  }, description))));
};

AppLoader.defaultProps = {
  title: "App",
  description: "Loading app"
};
AppLoader.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Wheter app is loading or not, if not */
  isLoading: _propTypes.default.bool,

  /** SVG icon */
  icon: _propTypes.default.node,

  /** ImageUrl, displayed if no icon is present */
  imageUrl: _propTypes.default.string,

  /** Loading title, normally the title of the app that is loading */
  title: _propTypes.default.string,

  /** Description. Consider changing this on load progress */
  description: _propTypes.default.string
} : {};
var _default = AppLoader;
exports.default = _default;
module.exports = exports.default;