"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ArrowDropDown = _interopRequireDefault(require("@material-ui/icons/ArrowDropDown"));

var _ButtonGroup = _interopRequireDefault(require("@material-ui/core/ButtonGroup"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      fontFamily: "Akkurat, sans-serif",
      fontWeight: "bold",
      textTransform: "none",
      borderRadius: 1
    },
    icon: {
      marginRight: theme.spacing(1),
      marginLeft: theme.spacing(-.5)
    },
    toggle: {
      borderRadius: 0,
      width: theme.spacing(5)
    }
  };
});

var ActionButton = function ActionButton(_ref) {
  var className = _ref.className,
      forwardedRef = _ref.forwardedRef,
      icon = _ref.icon,
      role = _ref.role,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "large" : _ref$size,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "contained" : _ref$variant,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      disabled = _ref.disabled,
      expanded = _ref.expanded,
      controls = _ref.controls,
      children = _ref.children,
      onClick = _ref.onClick,
      onToggle = _ref.onToggle,
      item = _objectWithoutPropertiesLoose(_ref, ["className", "forwardedRef", "icon", "role", "size", "variant", "color", "disabled", "expanded", "controls", "children", "onClick", "onToggle"]);

  var label = item.label,
      title = item.title;
  var classes = useStyles();

  if (onClick && onToggle) {
    var _React$createElement;

    return /*#__PURE__*/_react.default.createElement(_ButtonGroup.default, {
      "aria-label": "action",
      color: color,
      ref: forwardedRef
    }, /*#__PURE__*/_react.default.createElement(_Button.default, {
      size: size,
      variant: variant,
      className: className || classes.root,
      disabled: disabled,
      onClick: onClick
    }, icon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
      className: classes.icon
    }, icon), label || title), /*#__PURE__*/_react.default.createElement(_Button.default, (_React$createElement = {
      size: size,
      variant: variant,
      disabled: disabled,
      className: classes.toggle
    }, _React$createElement["size"] = "small", _React$createElement["aria-controls"] = expanded ? controls : undefined, _React$createElement["aria-expanded"] = expanded ? 'true' : undefined, _React$createElement["aria-label"] = "options", _React$createElement["aria-haspopup"] = "menu", _React$createElement.onClick = onToggle, _React$createElement), /*#__PURE__*/_react.default.createElement(_ArrowDropDown.default, null)));
  }

  if (onToggle) {
    return /*#__PURE__*/_react.default.createElement(_Button.default, {
      size: size,
      variant: variant,
      color: color,
      className: className || classes.root,
      disabled: disabled,
      onClick: onToggle,
      ref: forwardedRef
    }, icon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
      className: classes.icon
    }, icon), label || title, /*#__PURE__*/_react.default.createElement(_ArrowDropDown.default, null));
  }

  return /*#__PURE__*/_react.default.createElement(_Button.default, {
    size: size,
    variant: variant,
    color: color,
    className: className || classes.root,
    disabled: disabled,
    onClick: onClick
  }, icon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
    className: classes.icon
  }, icon), label || title);
};

var _default = ActionButton;
exports.default = _default;
module.exports = exports.default;