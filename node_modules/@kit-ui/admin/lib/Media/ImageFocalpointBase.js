"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _ImageBase = _interopRequireDefault(require("./ImageBase"));

var _ImageFocalpointReticle = _interopRequireDefault(require("./ImageFocalpointReticle"));

var _getImagePoint = require("./utils/getImagePoint");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {}
  };
});

var ImageFocalpoint = function ImageFocalpoint(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      imageCropdata = _ref.imageCropdata,
      imageFilters = _ref.imageFilters,
      _ref$imageFocalpoint = _ref.imageFocalpoint,
      imageFocalpoint = _ref$imageFocalpoint === void 0 ? {
    x: 0,
    y: 0,
    left: 50,
    top: 50
  } : _ref$imageFocalpoint,
      onChange = _ref.onChange;

  var _useState = (0, _react.useState)(imageFocalpoint),
      focalpoint = _useState[0],
      setFocalpoint = _useState[1];

  var handleClick = function handleClick(event) {
    imageFocalpoint = (0, _getImagePoint.getImagePointEvent)(event);
    setFocalpoint(imageFocalpoint);
    onChange && onChange(imageFocalpoint);
  };

  var classes = useStyles();

  if (!imageUrl) {
    return /*#__PURE__*/_react.default.createElement("p", null, "No imageUrl for focalpoint");
  }

  return /*#__PURE__*/_react.default.createElement(_ImageBase.default, {
    imageUrl: imageUrl,
    imageCropdata: imageCropdata,
    imageFilters: imageFilters,
    onClick: handleClick
  }, /*#__PURE__*/_react.default.createElement(_ImageFocalpointReticle.default, focalpoint));
};

var _default = ImageFocalpoint;
exports.default = _default;
module.exports = exports.default;