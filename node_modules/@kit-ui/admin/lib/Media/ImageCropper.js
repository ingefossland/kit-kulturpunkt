"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

var _Crop = _interopRequireDefault(require("@material-ui/icons/Crop"));

var _styles = require("@material-ui/core/styles");

var _ImageCropperBase = _interopRequireDefault(require("./ImageCropperBase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    cropper: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      marginBottom: theme.spacing(6),
      "& .cropper-container": {
        backgroundImage: "none"
      },
      "& .cropper-modal": {
        backgroundColor: "inherit"
      }
    },
    footer: {
      position: "absolute",
      top: "auto",
      right: 0,
      left: 0,
      bottom: 0,
      height: theme.spacing(6),
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    button: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "12px",
      fontWeight: "bold",
      textTransform: "none",
      textAlign: "center",
      minWidth: theme.spacing(5),
      color: "inherit",
      "&[aria-selected=true]": {
        color: theme.palette.primary.main
      }
    },
    icon: {
      fontSize: "16px"
    }
  };
});

var ImageCropper = function ImageCropper(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      _ref$imageCropdata = _ref.imageCropdata,
      imageCropdata = _ref$imageCropdata === void 0 ? {} : _ref$imageCropdata,
      formats = _ref.formats,
      onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "imageUrl", "imageCropdata", "formats", "onChange"]);

  var classes = useStyles();

  var handleChange = function handleChange(imageCropdata) {
    onChange && onChange(imageCropdata);
  };

  var _useState = (0, _react.useState)(null),
      formatSelected = _useState[0],
      setFormatSelected = _useState[1];

  var _useState2 = (0, _react.useState)(null),
      aspectRatio = _useState2[0],
      setAspectRatio = _useState2[1];

  var resetFormat = function resetFormat() {
    setFormatSelected(null);
    setAspectRatio(null);
  };

  var handleFormat = function handleFormat(format) {
    var ratio = format.split(':');
    setFormatSelected(format);
    setAspectRatio(ratio[0] / ratio[1]);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: className || classes.root
  }, /*#__PURE__*/_react.default.createElement(_ImageCropperBase.default, {
    className: classes.cropper,
    imageUrl: imageUrl,
    imageCropdata: imageCropdata,
    aspectRatio: aspectRatio,
    onChange: handleChange
  }), /*#__PURE__*/_react.default.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.button,
    "aria-selected": !formatSelected,
    onClick: function onClick() {
      return resetFormat(undefined);
    }
  }, /*#__PURE__*/_react.default.createElement(_Crop.default, {
    className: classes.icon
  })), formats && formats.map(function (format, index) {
    return /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
      "aria-selected": formatSelected === format,
      className: classes.button,
      size: "small",
      onClick: function onClick() {
        return handleFormat(format);
      }
    }, format);
  })));
};

ImageCropper.defaultProps = {
  imageUrl: undefined,

  /* ImageCropdata defined as percentages */
  imageCropdata: {
    "x": 0,
    "y": 0,
    "width": undefined,
    "height": undefined,
    "rotate": 0
  },
  formats: ["16:9", "4:3", "3:2", "1:1", "2:3"]
};
var _default = ImageCropper;
exports.default = _default;
module.exports = exports.default;