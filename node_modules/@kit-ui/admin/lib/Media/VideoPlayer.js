"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _VideoControls = _interopRequireDefault(require("./VideoControls"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    player: {
      backgroundColor: "black",
      color: "white",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    video: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "block",
      width: "100%",
      height: "auto",
      maxWidth: "100%",
      maxHeight: "100%",
      margin: "auto"
    },
    controls: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between",
      margin: theme.spacing(1)
    }
  };
});

var VideoPlayer = function VideoPlayer(_ref) {
  var className = _ref.className,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "absolute" : _ref$position,
      _ref$minHeight = _ref.minHeight,
      minHeight = _ref$minHeight === void 0 ? undefined : _ref$minHeight,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? undefined : _ref$maxWidth,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? undefined : _ref$maxHeight,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? undefined : _ref$format,
      title = _ref.title,
      description = _ref.description,
      _ref$imageUrl = _ref.imageUrl,
      imageUrl = _ref$imageUrl === void 0 ? undefined : _ref$imageUrl,
      _ref$videoUrl = _ref.videoUrl,
      videoUrl = _ref$videoUrl === void 0 ? undefined : _ref$videoUrl,
      _ref$videoType = _ref.videoType,
      videoType = _ref$videoType === void 0 ? undefined : _ref$videoType,
      _ref$videoSources = _ref.videoSources,
      videoSources = _ref$videoSources === void 0 ? [] : _ref$videoSources,
      _ref$resources = _ref.resources,
      resources = _ref$resources === void 0 ? {} : _ref$resources,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "position", "minHeight", "maxWidth", "maxHeight", "format", "title", "description", "imageUrl", "videoUrl", "videoType", "videoSources", "resources"]);

  //    size = size === "large" && 32 || size === "medium" && 24 || size === "small" && 12
  var playerRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      buffered = _useState[0],
      setBuffered = _useState[1];

  var _useState2 = (0, _react.useState)(0),
      currentTime = _useState2[0],
      setCurrentTime = _useState2[1];

  var _useState3 = (0, _react.useState)(0),
      duration = _useState3[0],
      setDuration = _useState3[1];

  var _useState4 = (0, _react.useState)(null),
      seeking = _useState4[0],
      setSeeking = _useState4[1];

  var _useState5 = (0, _react.useState)(true),
      paused = _useState5[0],
      setPaused = _useState5[1];

  var _useState6 = (0, _react.useState)(true),
      volume = _useState6[0],
      setVolume = _useState6[1];

  var _useState7 = (0, _react.useState)(true),
      muted = _useState7[0],
      setMuted = _useState7[1];

  var _useState8 = (0, _react.useState)(null),
      videoWidth = _useState8[0],
      setVideoWidth = _useState8[1];

  var _useState9 = (0, _react.useState)(null),
      videoHeight = _useState9[0],
      setVideoHeight = _useState9[1];

  var _useState10 = (0, _react.useState)(null),
      videoRatio = _useState10[0],
      setVideoRatio = _useState10[1]; //    const [maxWidth, setMaxWidth] = useState(null)


  var _useState11 = (0, _react.useState)(null),
      scale = _useState11[0],
      setScale = _useState11[1];

  var _useState12 = (0, _react.useState)(null),
      ratio = _useState12[0],
      setRatio = _useState12[1];

  var classes = useStyles();
  (0, _react.useEffect)(function () {
    if (format && format.includes(":")) {
      var wh = format.split(":");
      setRatio(wh[1] / wh[0]);
    } else if (videoWidth && videoHeight) {
      setRatio(videoHeight / videoWidth);
    }
  }, [format, videoWidth, videoHeight]);
  (0, _react.useEffect)(function () {
    if (!playerRef.current) {
      return;
    }

    playerRef.current.addEventListener('loadedmetadata', function (event) {
      var offsetWidth = event.target.offsetWidth;
      var videoWidth = event.target.videoWidth;
      var videoHeight = event.target.videoHeight;
      var scale = offsetWidth / videoWidth;
      var duration = event.target.duration;
      console.log('event', event);
      setVideoWidth(videoWidth);
      setVideoHeight(videoHeight);
      setVideoRatio(videoHeight / videoWidth);
      setBuffered(event.target.buffered);
      setDuration(event.target.duration);
      setCurrentTime(event.target.currentTime);
      setPaused(event.target.paused);
      setMuted(event.target.muted);
      setVolume(event.target.volume);
      props.onMetadata && props.onMetadata({
        videoWidth: videoWidth,
        videoHeight: videoHeight,
        duration: duration
      });
    });
    playerRef.current.addEventListener('canplay', function (event) {
      /*
      setBuffered(event.target.buffered)
      setDuration(event.target.duration)
      setCurrentTime(event.target.currentTime)
      setPaused(event.target.paused)
      setMuted(event.target.muted)
      setVolume(event.target.volume)
      */
    });
    playerRef.current.addEventListener('timeupdate', function (event) {
      setDuration(event.target.duration);
      setCurrentTime(event.target.currentTime);
    });
    playerRef.current.addEventListener('seeking', function (event) {
      setCurrentTime(event.target.currentTime);
      setSeeking(true);
    });
    playerRef.current.addEventListener('seeked', function (event) {
      setCurrentTime(event.target.currentTime);
      setSeeking(false);
    });
    playerRef.current.addEventListener('volumechange', function (event) {
      setVolume(event.target.volume);
    });
    playerRef.current.addEventListener('play', function (event) {
      setPaused(event.target.paused);
    });
    playerRef.current.addEventListener('pause', function (event) {
      setPaused(event.target.paused);
    });
  }, [playerRef.current]);

  var handlePlayPause = function handlePlayPause() {
    var paused = playerRef.current.paused;

    if (paused) {
      playerRef.current.play();
    } else {
      playerRef.current.pause();
    }

    setPaused(!paused);
  };

  var handleSeek = function handleSeek(value) {
    playerRef.current.currentTime = value;
  };

  var handleVolume = function handleVolume(value) {
    playerRef.current.volume = value;
  };

  var handleMute = function handleMute() {
    var mute = playerRef.current.mute;
    playerRef.current.mute = !mute;
    setMuted(!mute);
  };

  if (!videoSources.length && resources) {
    Object.values(resources).map(function (source) {
      var mimeType = source.mimeType,
          url = source.url;

      if (mimeType.startsWith('video') && url) {
        videoSources.push({
          src: url,
          type: mimeType
        });
      }
    });
  }

  if (!videoSources.length) {
    return /*#__PURE__*/_react.default.createElement("p", null, "No video sources");
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.player,
    "data-layout": "videoPlayer"
  }, /*#__PURE__*/_react.default.createElement("video", {
    ref: playerRef,
    className: classes.video,
    poster: imageUrl
  }, videoSources.map(function (_ref2) {
    var src = _ref2.src,
        type = _ref2.type;
    return /*#__PURE__*/_react.default.createElement("source", {
      src: src,
      type: type
    });
  }), "Your browser does not support the video tag."), duration && /*#__PURE__*/_react.default.createElement(_VideoControls.default, {
    className: classes.controls,
    title: title,
    description: description,
    paused: paused,
    onPlayPause: handlePlayPause,
    duration: duration,
    currentTime: currentTime,
    onSeek: handleSeek
  }));
};

VideoPlayer.propTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes.default.string,
  untitled: _propTypes.default.string,
  title: _propTypes.default.string,
  description: _propTypes.default.string,

  /** Video sources */
  videoSources: _propTypes.default.array,

  /** Resources object */
  resources: _propTypes.default.node,

  /** Poster image */
  imageUrl: _propTypes.default.string
} : {};
var _default = VideoPlayer;
exports.default = _default;
module.exports = exports.default;