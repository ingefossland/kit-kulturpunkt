"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _ButtonGroup = _interopRequireDefault(require("@material-ui/core/ButtonGroup"));

var _ImageBase = _interopRequireDefault(require("../Media/ImageBase"));

var _SvgFilterButton = _interopRequireDefault(require("../SvgFilters/SvgFilterButton"));

var _SvgFilters = require("../SvgFilters/");

var _getImagePoint = require("./utils/getImagePoint");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var controls = {
  "brightness": _SvgFilters.BrightnessControls,
  "contrast": _SvgFilters.ContrastControls,
  "vignette": _SvgFilters.VignetteControls,
  "blur": _SvgFilters.BlurControls,
  "opacity": _SvgFilters.OpacityControls,
  "saturation": _SvgFilters.SaturationControls,
  "duotone": _SvgFilters.DuotoneControls,
  "colorMatrix": _SvgFilters.ColorMatrixControls
};
var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    preview: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      marginBottom: theme.spacing(8)
    },
    controls: {
      position: "absolute",
      top: "auto",
      right: 0,
      bottom: 0,
      left: 0,
      height: theme.spacing(4),
      margin: theme.spacing(1, 2),
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      "& + *": {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(7)
      }
    },
    footer: {
      position: "absolute",
      top: "auto",
      right: 0,
      left: 0,
      bottom: 0,
      height: theme.spacing(8),
      overflowY: "visible"
    },
    header: {
      position: "absolute",
      top: "auto",
      right: 0,
      left: 0,
      bottom: theme.spacing(14),
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    title: {
      fontFamily: "Akkurat, sans-serif",
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText,
      padding: theme.spacing(.5, 1.5)
    },
    buttongroup: {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-start",
      flexWrap: "nowrap",
      paddingLeft: "50%",
      paddingRight: theme.spacing(1),
      transition: ".125s ease-out",
      overflowX: "scroll",
      marginLeft: function marginLeft(props) {
        return theme.spacing(7 * props.index * -1) - theme.spacing(7 / 2);
      }
    },
    button: {
      marginLeft: theme.spacing(.5),
      marginRight: theme.spacing(.5)
    }
  };
});

var ImageFilters = function ImageFilters(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      _ref$imageCropdata = _ref.imageCropdata,
      imageCropdata = _ref$imageCropdata === void 0 ? {} : _ref$imageCropdata,
      _ref$imageFilters = _ref.imageFilters,
      imageFilters = _ref$imageFilters === void 0 ? {} : _ref$imageFilters,
      _ref$filterOptions = _ref.filterOptions,
      filterOptions = _ref$filterOptions === void 0 ? [] : _ref$filterOptions,
      onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "imageUrl", "imageCropdata", "imageFilters", "filterOptions", "onChange"]);

  var _useState = (0, _react.useState)(0),
      index = _useState[0],
      setIndex = _useState[1];

  var _useState2 = (0, _react.useState)(filterOptions[0].name),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var classes = useStyles({
    index: index
  });

  var currentFilter = selected && _extends({}, imageFilters[selected], {
    name: selected
  });

  var changeFocalpoint = function changeFocalpoint(event) {
    var _extends2;

    var focalpoint;

    if (event.shiftKey) {
      focalpoint = {
        x: 0,
        y: 0,
        top: 50,
        left: 50
      };
    } else {
      focalpoint = (0, _getImagePoint.getImagePointEvent)(event);
    }

    currentFilter && currentFilter.focalpoint && onChange && onChange(_extends({}, imageFilters, (_extends2 = {}, _extends2[selected] = _extends({}, imageFilters[selected], focalpoint), _extends2)));
  };

  var selectFilter = function selectFilter(_ref2, event) {
    var name = _ref2.name,
        index = _ref2.index;
    setSelected(name);
    setIndex(index);

    if (event.shiftKey) {
      changeFilter({
        name: name,
        undefined: undefined
      });
    }
  };

  var changeFilter = function changeFilter(_ref3) {
    var _extends3;

    var name = _ref3.name,
        filter = _ref3.filter;
    onChange && onChange(_extends({}, imageFilters, (_extends3 = {}, _extends3[name] = filter, _extends3)));
  };

  var FilterNav = function FilterNav() {
    return /*#__PURE__*/_react.default.createElement(_ButtonGroup.default, {
      className: classes.buttongroup
    }, filterOptions.map(function (option, index) {
      var name = option.name;

      var filter = _extends({}, imageFilters[name], {
        index: index,
        name: name
      });

      return /*#__PURE__*/_react.default.createElement(_SvgFilterButton.default, _extends({}, option, filter, {
        selected: selected === name,
        key: index,
        index: index,
        name: name,
        onClick: function onClick(event) {
          return selectFilter(filter, event);
        }
      }));
    }));
  };

  var FilterControls = function FilterControls(_ref4) {
    var name = _ref4.name;
    var ControlsTemplate = controls && controls[name];
    var filter = imageFilters && imageFilters[name];

    if (ControlsTemplate) {
      return /*#__PURE__*/_react.default.createElement(ControlsTemplate, _extends({}, filter, {
        className: classes.controls,
        onChange: function onChange(filter) {
          return changeFilter({
            name: name,
            filter: filter
          });
        }
      }));
    }

    return false;
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: className || classes.root
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.preview
  }, /*#__PURE__*/_react.default.createElement(FilterControls, {
    name: selected
  }), /*#__PURE__*/_react.default.createElement(_ImageBase.default, {
    imageCropdata: imageCropdata,
    imageFilters: imageFilters,
    imageUrl: imageUrl,
    onClick: changeFocalpoint
  })), /*#__PURE__*/_react.default.createElement("header", {
    className: classes.header
  }, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: classes.title
  }, currentFilter && currentFilter.name)), /*#__PURE__*/_react.default.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/_react.default.createElement(FilterNav, null)));
};

ImageFilters.defaultProps = {
  imageFilters: {
    brightness: {},
    contrast: {},
    vignette: {}
  },
  filterOptions: [{
    name: "brightness",
    icon: "wb_sunny"
  }, {
    name: "contrast",
    icon: "tonality"
  }, {
    name: "blur",
    icon: "blur_on"
  }, {
    name: "saturation",
    icon: "filter_tilt_shift"
  }, {
    name: "opacity",
    icon: "opacity"
  }, {
    name: "vignette",
    icon: "filter_vintage"
  }]
};
var _default = ImageFilters;
exports.default = _default;
module.exports = exports.default;