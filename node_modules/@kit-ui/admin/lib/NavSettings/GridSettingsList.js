"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var gridUnit = 56;
var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    list: {
      position: "relative",
      listStyle: "none",
      padding: 0,
      margin: 0,
      width: function width(props) {
        return props.cols * gridUnit + "px";
      },
      height: function height(props) {
        return props.rows * gridUnit + "px";
      }
    },
    item: {
      position: "absolute",
      display: "block",
      top: 0,
      left: 0,
      backgroundColor: "rgba(0,0,0,.125)"
    },
    button: {
      outline: "1px solid white",
      width: function width(props) {
        return props.cols * gridUnit + "px";
      },
      height: function height(props) {
        return props.rows * gridUnit + "px";
      },
      "&:hover": {
        backgroundColor: "rgba(0,0,0,.5)",
        color: "white"
      },
      "&[aria-selected=true]": {
        backgroundColor: "blue",
        color: "white"
      }
    },
    label: {
      position: "absolute",
      top: 'auto',
      right: 0,
      bottom: 0,
      left: 'auto',
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      padding: theme.spacing(0.5)
    }
  };
});

var GridItem = function GridItem(_ref) {
  var size = _ref.size,
      value = _ref.value,
      label = _ref.label,
      selected = _ref.selected,
      onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["size", "value", "label", "selected", "onClick"]);

  var classes = useStyles(props);
  return /*#__PURE__*/_react.default.createElement("li", {
    className: classes.item
  }, /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.button,
    "data-size": size,
    "aria-selected": selected,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("b", {
    className: classes.label
  }, label)));
};

var GridList = function GridList(_ref2) {
  var children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["children"]);

  var classes = useStyles(props);
  return /*#__PURE__*/_react.default.createElement("ul", {
    className: classes.list
  }, children);
};

var OptionsGrid = function OptionsGrid(_ref3) {
  var cols = _ref3.cols,
      rows = _ref3.rows,
      value = _ref3.value,
      _ref3$options = _ref3.options,
      options = _ref3$options === void 0 ? [] : _ref3$options,
      onSelect = _ref3.onSelect,
      props = _objectWithoutPropertiesLoose(_ref3, ["cols", "rows", "value", "options", "onSelect"]);

  return /*#__PURE__*/_react.default.createElement(GridList, {
    cols: cols,
    rows: rows
  }, options.map(function (item, index) {
    return /*#__PURE__*/_react.default.createElement(GridItem, _extends({}, item, {
      selected: item.value === value,
      key: index,
      onClick: function onClick() {
        return onSelect(item);
      }
    }), item.value);
  }));
};

var _default = OptionsGrid;
exports.default = _default;
module.exports = exports.default;