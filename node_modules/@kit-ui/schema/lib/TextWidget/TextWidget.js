"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _TextWidgetPrefix = _interopRequireDefault(require("./TextWidgetPrefix"));

var _TextWidgetSuffix = _interopRequireDefault(require("./TextWidgetSuffix"));

var _core = require("@rjsf/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getDisplayLabel = _core.utils.getDisplayLabel;

var TextWidget = function TextWidget(_ref) {
  var id = _ref.id,
      required = _ref.required,
      readonly = _ref.readonly,
      disabled = _ref.disabled,
      type = _ref.type,
      value = _ref.value,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      autofocus = _ref.autofocus,
      options = _ref.options,
      schema = _ref.schema,
      uiSchema = _ref.uiSchema,
      _ref$rawErrors = _ref.rawErrors,
      rawErrors = _ref$rawErrors === void 0 ? [] : _ref$rawErrors,
      formContext = _ref.formContext,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "required", "readonly", "disabled", "type", "value", "onChange", "onBlur", "onFocus", "autofocus", "options", "schema", "uiSchema", "rawErrors", "formContext"]);

  var _onChange = function _onChange(event) {
    return onChange(event.target.value === "" ? options.emptyValue : event.target.value);
  };

  var _onBlur = function _onBlur(event) {
    return onBlur(id, event.target.value);
  };

  var _onFocus = function _onFocus(event) {
    return onFocus(id, event.target.value);
  };

  var displayLabel = getDisplayLabel(schema, uiSchema
  /* TODO: , rootSchema */
  );
  var label = options.title || props.title || props.label || schema.title;
  var variant = options.variant || "filled";
  var size = options.size;
  var helperText = options.help || null;
  return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({}, props, {
    id: id,
    variant: variant,
    size: size,
    fullWidth: true,
    label: displayLabel && label,
    helperText: helperText,
    autoFocus: autofocus,
    required: required,
    disabled: disabled || readonly,
    type: type || schema.type,
    value: value || value === 0 ? value : "",
    error: rawErrors.length > 0,
    onChange: _onChange,
    onBlur: _onBlur,
    onFocus: _onFocus,
    InputProps: {
      startAdornment: /*#__PURE__*/_react.default.createElement(_TextWidgetPrefix.default, options),
      endAdornment: /*#__PURE__*/_react.default.createElement(_TextWidgetSuffix.default, options)
    }
  }));
};

var _default = TextWidget;
exports.default = _default;
module.exports = exports.default;