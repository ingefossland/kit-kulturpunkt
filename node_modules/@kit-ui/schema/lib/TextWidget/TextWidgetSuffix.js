"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _InputAdornment = _interopRequireDefault(require("@material-ui/core/InputAdornment"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _admin = require("@kit-ui/admin");

var _utils = require("../utils/");

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    settings: {
      display: "flex",
      flexWrap: "nowrap",
      "& > * + *": {
        marginLeft: theme.spacing(-1)
      }
    }
  };
});

var TextWidgetSuffix = function TextWidgetSuffix(_ref) {
  var endAdornment = _ref.endAdornment,
      suffix = _ref.suffix,
      toolbar = _ref.toolbar,
      settings = _ref.settings,
      _ref$uiSchema = _ref.uiSchema,
      uiSchema = _ref$uiSchema === void 0 ? {} : _ref$uiSchema,
      _ref$formContext = _ref.formContext,
      formContext = _ref$formContext === void 0 ? {} : _ref$formContext;
  var classes = useStyles();
  var parentSchema = formContext.parentSchema,
      parentFormData = formContext.parentFormData,
      onParentChange = formContext.onParentChange;

  if (parentSchema) {
    settings = (0, _utils.getParentUiSettings)({
      schema: parentSchema,
      formData: parentFormData,
      uiSchema: uiSchema,
      onChange: onParentChange
    });
  }

  if (!suffix && !toolbar && !settings && !endAdornment) {
    return false;
  }

  var WidgetToolbar = function WidgetToolbar(_ref2) {
    var _ref2$toolbar = _ref2.toolbar,
        toolbar = _ref2$toolbar === void 0 ? [] : _ref2$toolbar;

    if (!toolbar.length) {
      return false;
    }

    return toolbar.map(function (button, index) {
      var icon = button.icon,
          onClick = button.onClick;
      return /*#__PURE__*/_react.default.createElement(_IconButton.default, {
        onClick: onClick,
        key: index
      }, /*#__PURE__*/_react.default.createElement(_Icon.default, null, icon));
    });
  };

  return /*#__PURE__*/_react.default.createElement(_InputAdornment.default, {
    position: "end"
  }, suffix, /*#__PURE__*/_react.default.createElement(_admin.NavSettings, {
    settings: settings,
    className: classes.settings
  }), /*#__PURE__*/_react.default.createElement(WidgetToolbar, {
    toolbar: toolbar
  }), endAdornment);
};

var _default = TextWidgetSuffix;
exports.default = _default;
module.exports = exports.default;