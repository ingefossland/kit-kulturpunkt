"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@kit-ui/core");

var _utils = require("../utils");

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    button: {},
    icon: {
      fontSize: ".75em",
      width: "1em",
      height: "1em",
      border: "1px solid"
    }
  };
});

var LocalizedStringSettings = function LocalizedStringSettings(props) {
  var schema = props.schema,
      uiSchema = props.uiSchema,
      formData = props.formData,
      formContext = props.formContext;
  var uiOptions = (0, _utils.getUiOptions)(uiSchema);
  var languages = formContext.languages || ["en"];
  var defaultLocale = formContext.defaultLocale || languages[0];
  var currentLocale = formContext.currentLocale || defaultLocale;

  var _useState = (0, _react.useState)(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = (0, _react.useRef)(null);

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: classes.button,
    onClick: _onToggle,
    ref: anchorRef
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: classes.icon
  }, currentLocale)), /*#__PURE__*/_react.default.createElement(_core.Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, JSON.stringify(formData)));
};

LocalizedStringSettings.defaultProps = {};
LocalizedStringSettings.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
var _default = LocalizedStringSettings;
exports.default = _default;
module.exports = exports.default;