"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../utils");

var _LocalizedStringLayout = _interopRequireDefault(require("./LocalizedStringLayout"));

var _LocalizedStringSettings = _interopRequireDefault(require("./LocalizedStringSettings"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/** Localized string  */
var LocalizedStringField = function LocalizedStringField(props) {
  var schema = props.schema,
      uiSchema = props.uiSchema,
      formContext = props.formContext;
  var uiOptions = (0, _utils.getUiOptions)(uiSchema);
  var languages = formContext.languages || ["en"];
  var defaultLocale = formContext.defaultLocale || languages[0];
  var currentLocale = formContext.currentLocale || defaultLocale;

  var getUiSchema = function getUiSchema() {
    var localizedUiSchema = {
      "ui:fieldset": ["locale:" + currentLocale]
    };
    Object.keys(schema.properties).map(function (name) {
      var localeProps = name.split(':');
      var locale = localeProps[1];
      var title = uiOptions.title && uiOptions.title + ":" + locale;
      var help = uiOptions.help;
      localizedUiSchema[name] = {
        "ui:options": {
          "placeholder": uiOptions.placeholder,
          "widget": uiOptions.widget || "text",
          "title": title,
          "language": locale,
          "help": help,
          "endAdornment": /*#__PURE__*/_react.default.createElement(_LocalizedStringSettings.default, props)
        }
      };
    });
    return _extends({}, localizedUiSchema, {
      "ui:layout": _LocalizedStringLayout.default,
      "ui:collapsible": true,
      "ui:expanded": false
    });
  };

  var ObjectField = props.registry.fields.ObjectField;
  var newUiSchema = getUiSchema();
  return /*#__PURE__*/_react.default.createElement(ObjectField, _extends({}, props, {
    uiSchema: newUiSchema
  }));
};

var _default = LocalizedStringField;
exports.default = _default;
module.exports = exports.default;