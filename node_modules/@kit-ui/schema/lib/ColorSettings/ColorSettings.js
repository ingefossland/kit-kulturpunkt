"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@kit-ui/core");

var _ColorPicker = _interopRequireDefault(require("./ColorPicker"));

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Lens = _interopRequireDefault(require("@material-ui/icons/Lens"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _readOnlyError(name) { throw new Error("\"" + name + "\" is read-only"); }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    icon: {
      //        backgroundColor: props => { return props.backgroundColor },
      color: function color(props) {
        return props.color;
      }
    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: '0.75em',
      fontWeight: "bold",
      lineHeight: '1',
      textAlign: "center"
    }
  };
});

var ColorSettings = function ColorSettings(props) {
  var value = props.value,
      options = props.options,
      onChange = props.onChange;
  var variant = options.variant,
      enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;

  var _useState = (0, _react.useState)(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = (0, _react.useRef)(null);

  var _onChange = function _onChange(_ref) {
    var hex = _ref.hex;
    onChange && onChange(hex);
  };

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  }; // color swatches


  var colors = enumOptions.length && enumOptions.map(function (_ref2, index) {
    var value = _ref2.value;
    return value;
  });

  if (!value && colors.length) {
    value = (_readOnlyError("value"), colors[0]);
  } // color + contrast


  var primaryColor = (0, _tinycolor.default)(value);
  var color = primaryColor.toHexString();
  var contrastColor = primaryColor.isLight() && "black" || "white";
  var backgroundColor;

  if (variant === "text") {
    backgroundColor = options.backgroundColor || contrastColor;
  } else {
    backgroundColor = color;
  }

  var classes = useStyles({
    backgroundColor: backgroundColor,
    color: color,
    contrastColor: contrastColor
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    ref: anchorRef,
    onClick: _onToggle
  }, /*#__PURE__*/_react.default.createElement(_Lens.default, {
    className: classes.icon
  })), /*#__PURE__*/_react.default.createElement(_core.Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    backgroundColor: backgroundColor,
    onClickAway: _onCollapse
  }, /*#__PURE__*/_react.default.createElement(_ColorPicker.default, {
    backgroundColor: backgroundColor,
    color: color,
    colors: colors,
    onChange: _onChange
  })));
};

ColorSettings.defaultProps = {
  value: "#666"
};
ColorSettings.propTypes = process.env.NODE_ENV !== "production" ? {
  value: _propTypes.default.string,
  options: _propTypes.default.array
} : {};
var _default = ColorSettings;
exports.default = _default;
module.exports = exports.default;