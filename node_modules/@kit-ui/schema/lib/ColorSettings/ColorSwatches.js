"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Lens = _interopRequireDefault(require("@material-ui/icons/Lens"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    swatches: {
      display: "flex",
      flexWrap: "wrap",
      padding: theme.spacing(.5)
    },
    icon: {
      //        backgroundColor: props => { return props.backgroundColor },
      color: function color(props) {
        return props.color;
      }
    }
  };
});

var SwatchButton = function SwatchButton(_ref) {
  var color = _ref.color,
      backgroundColor = _ref.backgroundColor,
      contrastColor = _ref.contrastColor,
      onClick = _ref.onClick;
  var classes = useStyles({
    backgroundColor: backgroundColor,
    color: color
  });
  return /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_Lens.default, {
    className: classes.icon
  }));
};

var ColorSwatches = function ColorSwatches(_ref2) {
  var variant = _ref2.variant,
      backgroundColor = _ref2.backgroundColor,
      _ref2$colors = _ref2.colors,
      colors = _ref2$colors === void 0 ? [] : _ref2$colors,
      color = _ref2.color,
      onChange = _ref2.onChange;
  var classes = useStyles();

  var _onChange = function _onChange(hex, event) {
    onChange && onChange({
      hex: hex
    }, event);
  };

  if (!colors.length) {
    return false;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.swatches,
    "data-size": colors.length
  }, colors.map(function (color, index) {
    var primaryColor = (0, _color.default)(color);
    var contrastColor = primaryColor.isLight() && "black" || "white";
    return /*#__PURE__*/_react.default.createElement(SwatchButton, {
      color: color,
      backgroundColor: backgroundColor,
      contrastColor: contrastColor,
      key: index,
      onClick: function onClick(event) {
        return _onChange(color, event);
      }
    });
  }));
};

var _default = ColorSwatches;
exports.default = _default;
module.exports = exports.default;