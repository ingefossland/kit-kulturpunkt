"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ReferenceField = function ReferenceField(props) {
  var schema = props.schema,
      _props$uiSchema = props.uiSchema,
      uiSchema = _props$uiSchema === void 0 ? {} : _props$uiSchema,
      _props$formData = props.formData,
      formData = _props$formData === void 0 ? {} : _props$formData,
      formContext = props.formContext;
  var referenceId = formData.referenceId,
      _formData$reference = formData.reference,
      reference = _formData$reference === void 0 ? {} : _formData$reference;

  var getUiSchema = function getUiSchema() {
    var uiOptions = (0, _utils.getUiOptions)(uiSchema);
    var fieldset = uiOptions.fieldset || [];

    if (!uiOptions.fieldset && schema.properties) {
      Object.keys(schema.properties).map(function (name) {
        var type = schema.properties[name] && schema.properties[name].type || undefined;

        if (type === "object") {
          fieldset.push(name);
        }

        if (type === "array") {
          fieldset.push(name);
        }
      });
    }

    var uiReference, uiContent;

    if (fieldset && fieldset.includes('reference')) {
      var uiSchemaReference = uiSchema && uiSchema.reference;
      uiReference = _extends({
        "ui:title": "Reference"
      }, uiSchemaReference);
    }

    if (fieldset && fieldset.includes('content')) {
      var uiSchemaContent = uiSchema && uiSchema.content;
      uiContent = _extends({
        "ui:title": "Innhold"
      }, uiSchemaContent);
    }

    var layout = uiOptions.layout || "module";
    return _extends({
      "ui:editable": true,
      "ui:deletable": referenceId && true,
      "ui:restorable": referenceId && true,
      "ui:removable": !referenceId && true,
      "ui:layout": layout,
      "ui:fieldset": fieldset,
      "ui:buttons": (0, _utils.getReferenceButtons)(props),
      "ui:nav": "tabs",
      "reference": uiReference,
      "content": uiContent,
      "ui:preview": {
        "select": {
          "_action": "_action",
          "type": "type",
          "title": "title",
          "description": "description",
          "imageUrl": "imageUrl",
          "status": "status",
          "referenceId": "referenceId",
          "reference": "reference"
        },
        prepare: function prepare(_ref) {
          var _ref$formData = _ref.formData,
              formData = _ref$formData === void 0 ? {} : _ref$formData;
          var _action = formData._action,
              reference = formData.reference,
              referenceId = formData.referenceId;
          var status = reference && reference.status;

          if (_action === "delete") {
            status = "trash";
          }

          return {
            _action: _action,
            type: reference && reference.documentType,
            title: reference && reference.title,
            description: reference && reference.description,
            imageUrl: reference && reference.imageUrl,
            status: status,
            referenceId: referenceId,
            reference: reference
          };
        }
      }
    }, uiSchema);
  };

  var _onChange = function _onChange(formData) {
    var _action = formData._action,
        referenceId = formData.referenceId,
        _formData$reference2 = formData.reference,
        reference = _formData$reference2 === void 0 ? {} : _formData$reference2; // if no referenceId, action = "create"

    if (!referenceId) {
      formData._action = "create";
    } // if reference dont have a uniqueId, action = "create"


    if (!reference) {
      formData.reference = {};
    }

    if (!reference.uniqueId) {
      formData.reference._action = "create";
    }

    props.onChange && props.onChange(formData);
  };

  var ObjectField = props.registry.fields.ObjectField;
  var newUiSchema = getUiSchema();
  return /*#__PURE__*/_react.default.createElement(ObjectField, _extends({}, props, {
    uiSchema: newUiSchema,
    onChange: _onChange
  }));
};

var _default = ReferenceField;
exports.default = _default;
module.exports = exports.default;