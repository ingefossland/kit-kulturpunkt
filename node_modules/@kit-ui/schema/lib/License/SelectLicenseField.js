"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Autocomplete = _interopRequireWildcard(require("@material-ui/lab/Autocomplete"));

var _styles = require("@material-ui/core/styles");

var _reactI18next = require("react-i18next");

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _License = _interopRequireDefault(require("./License.data"));

var _LicenseIcon = _interopRequireDefault(require("./LicenseIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _root;

  return {
    root: (_root = {
      "& .MuiFormLabel-root": {
        fontFamily: "Akkurat, sans-serif"
      },
      "& .MuiInputBase-root": {
        fontFamily: "Akkurat, sans-serif",
        borderTopLeftRadius: "0",
        borderTopRightRadius: "0",
        paddingTop: theme.spacing(3),
        paddingBottom: theme.spacing(1)
      }
    }, _root["& .MuiFormLabel-root"] = {
      fontFamily: "Akkurat, sans-serif"
    }, _root["& .MuiAutocomplete-inputRoot[class*=MuiFilledInput-root] .MuiAutocomplete-input"] = {
      padding: theme.spacing(.25, .5)
    }, _root["& .MuiAutocomplete-tag"] = {
      margin: theme.spacing(.25)
    }, _root),
    option: {
      display: "flex",
      alignItems: "center",
      "& > * + *": {
        marginLeft: theme.spacing(1)
      }
    },
    icon: {
      display: "flex",
      alignItems: "center",
      whiteSpace: "nowrap",
      "& > * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    text: {
      fontFamily: "Akkurat, sans-serif",
      lineHeight: 1,
      "& > * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    label: {
      color: theme.palette.text.primary
    },
    value: {
      fontFamily: "Akkurat, sans-serif",
      color: theme.palette.text.secondary
    }
  };
});

var SelectLicenseFieldOption = function SelectLicenseFieldOption(_ref) {
  var value = _ref.value,
      label = _ref.label,
      system = _ref.system;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.option
  }, /*#__PURE__*/_react.default.createElement(_LicenseIcon.default, {
    className: classes.icon,
    license: value
  }), /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: classes.text
  }, /*#__PURE__*/_react.default.createElement("b", {
    className: classes.label
  }, label), /*#__PURE__*/_react.default.createElement("i", {
    className: classes.value
  }, "(", value, ")")));
};

var SelectLicense = function SelectLicense(_ref2) {
  var _React$createElement;

  var id = _ref2.id,
      _ref2$label = _ref2.label,
      label = _ref2$label === void 0 ? "Select icon" : _ref2$label,
      helperText = _ref2.helperText,
      value = _ref2.value,
      required = _ref2.required,
      disabled = _ref2.disabled,
      readonly = _ref2.readonly,
      multiple = _ref2.multiple,
      autofocus = _ref2.autofocus,
      onChange = _ref2.onChange,
      placeholder = _ref2.placeholder;

  var _useTranslation = (0, _reactI18next.useTranslation)(),
      t = _useTranslation.t,
      i18n = _useTranslation.i18n;

  var getOptions = function getOptions() {
    var options = _License.default.map(function (option) {
      var group = option.group,
          value = option.value;
      return _extends({}, option, {
        group: group && t("licenseGroup:" + group)
      });
    });

    options.sort(function (a, b) {
      return a.groupId > b.groupId ? 1 : -1;
    });
    return options;
  };

  var emptyValue = multiple ? [] : "";
  var options = getOptions();

  var handleChange = function handleChange(event, option) {
    onChange && onChange(option && option.value || emptyValue, event);
  };

  var renderGroup = function renderGroup(option) {
    return /*#__PURE__*/_react.default.createElement("p", null, JSON.stringify(option.group));
  };

  var renderOption = function renderOption(option, state) {
    return /*#__PURE__*/_react.default.createElement(SelectLicenseFieldOption, option);
  };

  var selected = value && options.filter(function (option) {
    return option.value == value;
  });

  if (!multiple && selected.length) {
    selected = selected[0];
  }

  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_Autocomplete.default, (_React$createElement = {
    className: classes.root,
    id: id,
    placeholder: placeholder,
    multiple: multiple,
    options: options,
    groupBy: function groupBy(option) {
      return option.group;
    },
    label: label,
    helperText: helperText,
    value: selected,
    required: required,
    disabled: disabled || readonly,
    autoFocus: autofocus
  }, _React$createElement["groupBy"] = function groupBy(option) {
    return option.group;
  }, _React$createElement.getOptionLabel = function getOptionLabel(option) {
    return options && option.label || "";
  }, _React$createElement.renderOption = renderOption, _React$createElement.renderInput = function renderInput(params) {
    return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({}, params, {
      className: classes.input,
      variant: "filled",
      label: label,
      placeholder: placeholder,
      helperText: helperText
    }));
  }, _React$createElement.onChange = handleChange, _React$createElement));
};

SelectLicense.defaultProps = {
  autofocus: false
};
SelectLicense.propTypes = process.env.NODE_ENV !== "production" ? {
  id: _propTypes.default.string.isRequired,
  label: _propTypes.default.string,
  helperText: _propTypes.default.string,
  value: _propTypes.default.any,
  required: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  readonly: _propTypes.default.bool,
  multiple: _propTypes.default.bool,
  autofocus: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func
} : {};
var _default = SelectLicense;
exports.default = _default;
module.exports = exports.default;