"use strict";

exports.__esModule = true;
exports.default = exports.getReferenceField = exports.getReferenceSchema = void 0;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getReferenceSchema = function getReferenceSchema(props) {
  var schema = props.schema;
  var documentType = schema.documentType,
      referenceType = schema.referenceType,
      _reverseReferenceType = schema._reverseReferenceType,
      _reverseReference = schema._reverseReference,
      content = schema.content; // default schema

  var defaultSchema = {
    "type": "object",
    "properties": {
      "referenceId": {
        "type": "string",
        "readonly": true
      },
      "referenceType": {
        "type": "string",
        "default": undefined,
        "readonly": true
      },
      "reference": {
        "type": "object",
        "properties": {
          "uniqueId": {
            "type": "string",
            "default": undefined,
            "readonly": true
          },
          "documentType": {
            "type": "string",
            "default": undefined,
            "readonly": true
          },
          "title": {
            "type": "string",
            "default": "Untitled"
          },
          "_action": {
            "type": "string",
            "readonly": true,
            "default": "update"
          }
        }
      },
      "_action": {
        "type": "string",
        "readonly": true,
        "default": "update"
      }
    }
  }; // referenceType

  if (referenceType) {
    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, {
        referenceType: _extends({}, defaultSchema.properties.referenceType, {
          default: referenceType
        })
      })
    });
  } // reference


  if (documentType) {
    var defaultType, defaultEnum;

    if (Array.isArray(documentType)) {
      defaultType = documentType[0];
      defaultEnum = documentType;
    } else {
      defaultType = documentType;
    }

    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, {
        reference: _extends({}, defaultSchema.properties.reference, {
          properties: _extends({}, defaultSchema.properties.reference.properties, {
            documentType: _extends({}, defaultSchema.properties.reference.properties.documentType, {
              default: defaultType,
              enum: defaultEnum
            }),
            title: _extends({}, defaultSchema.properties.reference.properties.title, {
              default: "Untitled " + defaultType
            })
          })
        })
      })
    });
  } // _reverseReferenceType


  if (_reverseReferenceType) {
    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, {
        _reverseReferenceType: {
          "type": "string",
          "default": _reverseReferenceType,
          "readonly": true
        }
      })
    });
  } // _reverseReference


  if (_reverseReference) {
    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, {
        _reverseReference: {
          "type": "string",
          "default": _reverseReference,
          "readonly": true
        }
      })
    });
  } // content


  if (content && content.properties) {
    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, {
        content: {
          "type": "object",
          "properties": content.properties
        }
      })
    });
  } // properties


  if (schema.properties) {
    defaultSchema = _extends({}, defaultSchema, {
      properties: _extends({}, defaultSchema.properties, schema.properties)
    });
  }

  return defaultSchema;
};

exports.getReferenceSchema = getReferenceSchema;

var getReferenceField = function getReferenceField(props) {
  var schema = getReferenceSchema(props);
  return _extends({}, props, {
    schema: schema,
    uiSchema: _extends({
      "ui:field": "reference"
    }, props.uiSchema)
  });
};

exports.getReferenceField = getReferenceField;
var _default = getReferenceField;
exports.default = _default;