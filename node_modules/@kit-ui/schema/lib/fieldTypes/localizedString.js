"use strict";

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getLocalizedString = function getLocalizedString(props) {
  var formData = props.formData,
      formContext = props.formContext;
  var languages = formContext && formContext.languages || ["en"];
  var defaultLocale = formContext && formContext.defaultLocale || languages[0];
  var currentLocale = formContext && formContext.currentLocale || defaultLocale;

  var getSchema = function getSchema() {
    var fieldSchema = {
      type: "object",
      properties: {}
    };
    languages.map(function (locale) {
      var localeId = "locale:" + locale;
      var title = props.name || props.title;
      fieldSchema.properties[localeId] = {
        title: title + ":" + locale,
        type: "string"
      };
    });
    return fieldSchema;
  };

  var getFormData = function getFormData(_ref) {
    var schema = _ref.schema;
    var newFormData = {};

    if (typeof formData === "string") {
      var defaultValue = formData;
      languages.map(function (locale) {
        var localeId = "locale:" + locale;
        var value = currentLocale === locale && defaultValue;
        newFormData[localeId] = value || "";
      });
    } else {
      languages.map(function (locale) {
        var localeId = "locale:" + locale;
        var value = formData && formData[localeId];
        newFormData[localeId] = value || "";
      });
    }

    return (0, _utils.getDefaultFormState)(schema, _extends({}, newFormData));
  };

  var schema = getSchema();
  return _extends({}, props, {
    schema: schema,
    uiSchema: _extends({
      "ui:field": "localizedString"
    }, props.uiSchema),
    formData: getFormData(_extends({}, props, {
      schema: schema
    }))
  });
};

var _default = getLocalizedString;
exports.default = _default;
module.exports = exports.default;