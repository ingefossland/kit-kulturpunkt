"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ButtonGroup = _interopRequireDefault(require("@material-ui/core/ButtonGroup"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    buttongroup: {
      margin: function margin(props) {
        return theme.spacing(props.spacing / 2 * -1);
      },
      "& > *": {
        margin: function margin(props) {
          return theme.spacing(props.spacing / 2);
        }
      }
    },
    button: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "14px",
      fontWeight: "bold",
      textTransform: "none",
      letterSpacing: 0,
      borderRadius: 1,
      minWidth: theme.spacing(12),
      minHeight: theme.spacing(7)
    },
    icon: {
      marginRight: theme.spacing(1),
      "& + $label": {
        marginRight: theme.spacing(1)
      }
    },
    label: {}
  };
});

var ArrayButton = function ArrayButton(_ref) {
  var icon = _ref.icon,
      title = _ref.title,
      _ref$color = _ref.color,
      color = _ref$color === void 0 ? "primary" : _ref$color,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "outlined" : _ref$variant,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? "large" : _ref$size,
      props = _objectWithoutPropertiesLoose(_ref, ["icon", "title", "color", "variant", "size"]);

  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_Button.default, _extends({}, props, {
    type: "button",
    "data-size": size,
    "data-variant": variant,
    disableElevation: true,
    color: color,
    variant: variant,
    size: size,
    className: classes.button
  }), icon && /*#__PURE__*/_react.default.createElement(_Icon.default, {
    className: classes.icon
  }, icon), /*#__PURE__*/_react.default.createElement("b", {
    className: classes.label
  }, title));
};

var ArrayButtons = function ArrayButtons(_ref2) {
  var className = _ref2.className,
      _ref2$spacing = _ref2.spacing,
      spacing = _ref2$spacing === void 0 ? 1 : _ref2$spacing,
      _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? [] : _ref2$buttons;
  var classes = useStyles({
    spacing: spacing
  });

  if (!buttons.length) {
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(_ButtonGroup.default, {
    color: "primary",
    className: className || classes.buttongroup
  }, buttons && buttons.map(function (button, index) {
    return /*#__PURE__*/_react.default.createElement(ArrayButton, _extends({}, button, {
      key: index
    }));
  }));
};

ArrayButtons.defaultProps = {
  "spacing": 1
};
ArrayButtons.propTypes = process.env.NODE_ENV !== "production" ? {
  buttons: _propTypes.default.array,
  buttonGroupProps: _propTypes.default.object,
  buttonProps: _propTypes.default.object
} : {};
var _default = ArrayButtons;
exports.default = _default;
module.exports = exports.default;