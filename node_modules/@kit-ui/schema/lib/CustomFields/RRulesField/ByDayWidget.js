"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _FormLabel = _interopRequireDefault(require("@material-ui/core/FormLabel"));

var _FormGroup = _interopRequireDefault(require("@material-ui/core/FormGroup"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _icon;

  return {
    weekdays: {
      display: "flex"
    },
    weekday: {
      "&[aria-checked=true]": {
        "& $icon": {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        }
      }
    },
    icon: (_icon = {
      display: "block",
      border: "1px solid",
      borderRadius: "100%",
      width: "3em",
      height: "3em",
      fontSize: ".5em"
    }, _icon["display"] = "flex", _icon.alignItems = "center", _icon.justifyContent = "center", _icon.margin = "-.5em", _icon)
  };
});

var WeekdayButton = function WeekdayButton(_ref) {
  var checked = _ref.checked,
      onClick = _ref.onClick,
      label = _ref.label;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    "aria-checked": checked,
    className: classes.weekday,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: classes.icon
  }, label.substr(0, 2)));
};

var selectValue = function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
};

var deselectValue = function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
};

var ByDayWidget = function ByDayWidget(_ref2) {
  var schema = _ref2.schema,
      id = _ref2.id,
      disabled = _ref2.disabled,
      options = _ref2.options,
      value = _ref2.value,
      autofocus = _ref2.autofocus,
      readonly = _ref2.readonly,
      required = _ref2.required,
      onChange = _ref2.onChange,
      onBlur = _ref2.onBlur,
      onFocus = _ref2.onFocus,
      props = _objectWithoutPropertiesLoose(_ref2, ["schema", "id", "disabled", "options", "value", "autofocus", "readonly", "required", "onChange", "onBlur", "onFocus"]);

  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;
  /*
  const _onChange = (option) => ({ target: { checked }}) => {
      const all = (enumOptions).map(({ value }) => value);
       if (checked) {
          onChange(selectValue(option.value, value, all));
      } else {
          onChange(deselectValue(option.value, value));
      }
  };
  */

  var _onToggle = function _onToggle(option) {
    var all = enumOptions.map(function (_ref3) {
      var value = _ref3.value;
      return value;
    });

    if (!option.checked) {
      onChange(selectValue(option.value, value, all));
    } else {
      onChange(deselectValue(option.value, value));
    }
  };

  var _onBlur = function _onBlur(_ref4) {
    var value = _ref4.target.value;
    return onBlur(id, value);
  };

  var _onFocus = function _onFocus(_ref5) {
    var value = _ref5.target.value;
    return onFocus(id, value);
  };

  var label = options.title || props.title || props.label || "checkboxes";
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_FormLabel.default, {
    required: required,
    htmlFor: id
  }, label || schema.title), /*#__PURE__*/_react.default.createElement(_FormGroup.default, {
    row: true
  }, enumOptions.map(function (option, index) {
    var checked = value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    option = _extends({}, option, {
      checked: checked,
      disabled: disabled || itemDisabled || readonly
    });
    return /*#__PURE__*/_react.default.createElement(WeekdayButton, _extends({}, option, {
      id: id + "_" + index,
      color: "primary",
      autoFocus: autofocus && index === 0,
      onClick: function onClick() {
        return _onToggle(option);
      },
      onBlur: _onBlur,
      onFocus: _onFocus
    }));
  })));
};

var _default = ByDayWidget;
exports.default = _default;
module.exports = exports.default;