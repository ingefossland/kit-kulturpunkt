"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _icon;

  return {
    weekdays: {
      display: "flex"
    },
    weekday: {
      "&[aria-checked=true]": {
        "& $icon": {
          backgroundColor: theme.palette.primary.main,
          color: theme.palette.primary.contrastText
        }
      }
    },
    icon: (_icon = {
      display: "block",
      border: "1px solid",
      borderRadius: "100%",
      width: "3em",
      height: "3em",
      fontSize: ".5em"
    }, _icon["display"] = "flex", _icon.alignItems = "center", _icon.justifyContent = "center", _icon.margin = "-.5em", _icon)
  };
});

var selectValue = function selectValue(value, selected, all) {
  var at = all.indexOf(value);
  var updated = selected.slice(0, at).concat(value, selected.slice(at)); // As inserting values at predefined index positions doesn't work with empty
  // arrays, we need to reorder the updated selection to match the initial order

  return updated.sort(function (a, b) {
    return all.indexOf(a) > all.indexOf(b);
  });
};

var deselectValue = function deselectValue(value, selected) {
  return selected.filter(function (v) {
    return v !== value;
  });
};

var WeekdaysWidget = function WeekdaysWidget(_ref) {
  var schema = _ref.schema,
      id = _ref.id,
      disabled = _ref.disabled,
      options = _ref.options,
      value = _ref.value,
      autofocus = _ref.autofocus,
      readonly = _ref.readonly,
      required = _ref.required,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      props = _objectWithoutPropertiesLoose(_ref, ["schema", "id", "disabled", "options", "value", "autofocus", "readonly", "required", "onChange", "onBlur", "onFocus"]);

  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled,
      inline = options.inline;
  var classes = useStyles();

  var Weekday = function Weekday(option) {
    var value = option.value,
        label = option.label,
        checked = option.checked;
    return /*#__PURE__*/_react.default.createElement(_IconButton.default, {
      "aria-checked": checked,
      className: classes.weekday,
      onClick: function onClick() {
        return _onToggle(option);
      }
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: classes.icon
    }, label.substr(0, 2)));
  };
  /*
  
  const _onChange = (option) => ({ target: { checked }}) => {
      const all = (enumOptions).map(({ value }) => value);
       if (checked) {
      onChange(selectValue(option.value, value, all));
      } else {
      onChange(deselectValue(option.value, value));
      }
  };
   */


  var _onBlur = function _onBlur(_ref2) {
    var value = _ref2.target.value;
    return onBlur(id, value);
  };

  var _onFocus = function _onFocus(_ref3) {
    var value = _ref3.target.value;
    return onFocus(id, value);
  };

  var label = options.title || props.title || props.label;

  var _onToggle = function _onToggle(option) {
    var all = enumOptions.map(function (_ref4) {
      var value = _ref4.value;
      return value;
    });

    if (!option.checked) {
      onChange(selectValue(option.value, value, all));
    } else {
      onChange(deselectValue(option.value, value));
    }
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.weekdays,
    row: true
  }, enumOptions.map(function (option, index) {
    var checked = value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) != -1;
    /*
    const checkbox = (
    <Checkbox
    id={`${id}_${index}`}
    color="primary"
    checked={checked}
    disabled={disabled || itemDisabled || readonly}
    autoFocus={autofocus && index === 0}
    onChange={_onChange(option)}
    onBlur={_onBlur}
    onFocus={_onFocus}
    />
    );
    */

    return /*#__PURE__*/_react.default.createElement(Weekday, _extends({}, option, {
      disabled: disabled || itemDisabled || readonly,
      checked: checked,
      key: index
    }));
  }));
};

var _default = WeekdaysWidget;
exports.default = _default;
module.exports = exports.default;