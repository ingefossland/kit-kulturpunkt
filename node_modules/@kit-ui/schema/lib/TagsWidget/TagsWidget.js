"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Chip = _interopRequireDefault(require("@material-ui/core/Chip"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _Autocomplete = _interopRequireWildcard(require("@material-ui/lab/Autocomplete"));

var _styles = require("@material-ui/core/styles");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var filter = (0, _Autocomplete.createFilterOptions)();
var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _root;

  return {
    root: (_root = {
      "& .MuiFormLabel-root": {
        fontFamily: "Akkurat, sans-serif"
      },
      "& .MuiInputBase-root": {
        fontFamily: "Akkurat, sans-serif",
        borderTopLeftRadius: "0",
        borderTopRightRadius: "0",
        paddingTop: theme.spacing(3),
        paddingBottom: theme.spacing(1)
      }
    }, _root["& .MuiFormLabel-root"] = {
      fontFamily: "Akkurat, sans-serif"
    }, _root["& .MuiAutocomplete-inputRoot[class*=MuiFilledInput-root] .MuiAutocomplete-input"] = {
      padding: theme.spacing(.25, .5)
    }, _root["& .MuiAutocomplete-tag"] = {
      margin: theme.spacing(.25)
    }, _root)
  };
});

var TagsChip = function TagsChip(_ref) {
  var label = _ref.label,
      disabled = _ref.disabled,
      props = _objectWithoutPropertiesLoose(_ref, ["label", "disabled"]);

  var classes = useStyles();

  if (disabled) {
    return /*#__PURE__*/_react.default.createElement(_Chip.default, {
      className: classes.chip,
      variant: "outlined",
      size: "small",
      label: label
    });
  }

  return /*#__PURE__*/_react.default.createElement(_Chip.default, _extends({
    className: classes.chip,
    variant: "outlined",
    size: "small",
    label: label
  }, props));
};

var TagsWidget = function TagsWidget(_ref2) {
  var id = _ref2.id,
      disabled = _ref2.disabled,
      readonly = _ref2.readonly,
      options = _ref2.options,
      _ref2$value = _ref2.value,
      value = _ref2$value === void 0 ? [] : _ref2$value,
      autofocus = _ref2.autofocus,
      onChange = _ref2.onChange,
      props = _objectWithoutPropertiesLoose(_ref2, ["id", "disabled", "readonly", "options", "value", "autofocus", "onChange"]);

  var label = options.title || props.title || props.label || "Tags";
  var placeholder = options.placeholder || null;
  var helperText = options.help || null;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;
  var autocompleteOptions = enumOptions && enumOptions.map(function (option, index) {
    //        const selected = value && value.indexOf(option.value) !== -1;
    var itemDisabled = enumDisabled && enumDisabled.indexOf(option.value) !== -1;
    return {
      label: option.label,
      value: option.value,
      disabled: disabled || itemDisabled || readonly
    };
  });
  var classes = useStyles();

  var renderTags = function renderTags(value, getTagProps) {
    return value.map(function (option, index) {
      return /*#__PURE__*/_react.default.createElement(TagsChip, _extends({
        label: option,
        disabled: disabled
      }, getTagProps({
        index: index
      })));
    });
  };

  var handleChange = function handleChange(event, value, reason) {
    var tags = value.map(function (option) {
      return getOptionLabel(option).toLowerCase();
    });
    onChange && onChange(tags);
  };

  var filterOptions = function filterOptions(options, params) {
    var filtered = filter(options, params); // Suggest the creation of a new value

    if (params.inputValue !== '') {
      filtered.push({
        value: params.inputValue,
        label: "+ \"" + params.inputValue + "\""
      });
    }

    return filtered;
  };

  var getOptionLabel = function getOptionLabel(option) {
    // Value selected with enter, right from the input
    if (typeof option === 'string') {
      return option;
    } // Regular option


    return option.value;
  };

  var renderOption = function renderOption(option) {
    if (typeof option === 'string') {
      return option;
    }

    return option.label;
  };

  return /*#__PURE__*/_react.default.createElement(_Autocomplete.default, {
    className: classes.root,
    multiple: true,
    id: id,
    options: autocompleteOptions,
    disabled: disabled,
    filterOptions: filterOptions,
    getOptionLabel: getOptionLabel,
    renderOption: renderOption,
    value: value,
    freeSolo: true,
    renderTags: renderTags,
    renderInput: function renderInput(params) {
      return /*#__PURE__*/_react.default.createElement(_TextField.default, _extends({}, params, {
        className: classes.input,
        variant: "filled",
        label: label,
        placeholder: placeholder,
        helperText: helperText
      }));
    },
    onChange: handleChange
  });
};

TagsWidget.defaultProps = {};
TagsWidget.propTypes = process.env.NODE_ENV !== "production" ? {
  schema: _propTypes.default.object.isRequired,
  id: _propTypes.default.string.isRequired,
  options: _propTypes.default.shape({
    enumOptions: _propTypes.default.array,
    inline: _propTypes.default.bool
  }).isRequired,
  value: _propTypes.default.any,
  required: _propTypes.default.bool,
  readonly: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  multiple: _propTypes.default.bool,
  autofocus: _propTypes.default.bool,
  onChange: _propTypes.default.func
} : {};
var _default = TagsWidget;
exports.default = _default;
module.exports = exports.default;