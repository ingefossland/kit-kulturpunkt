"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _includes = _interopRequireDefault(require("core-js/library/fn/array/includes"));

var _core = require("@rjsf/core");

var _shortid = _interopRequireDefault(require("shortid"));

var _FixedArrayFieldTemplate = _interopRequireDefault(require("./FixedArrayFieldTemplate"));

var _NormalArrayFieldTemplate = _interopRequireDefault(require("./NormalArrayFieldTemplate"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getWidget = _core.utils.getWidget,
    getDefaultFormState = _core.utils.getDefaultFormState,
    getUiOptions = _core.utils.getUiOptions,
    isMultiSelect = _core.utils.isMultiSelect,
    isFilesArray = _core.utils.isFilesArray,
    isFixedItems = _core.utils.isFixedItems,
    allowAdditionalItems = _core.utils.allowAdditionalItems,
    optionsList = _core.utils.optionsList,
    retrieveSchema = _core.utils.retrieveSchema,
    toIdSchema = _core.utils.toIdSchema,
    getDefaultRegistry = _core.utils.getDefaultRegistry;

function generateRowId() {
  return _shortid.default.generate();
}

function generateKeyedFormData(formData) {
  return !Array.isArray(formData) ? [] : formData.map(function (item) {
    return {
      key: generateRowId(),
      item: item
    };
  });
}

function keyedToPlainFormData(keyedFormData) {
  return keyedFormData.map(function (keyedItem) {
    return keyedItem.item;
  });
}

var ArrayField = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ArrayField, _Component);

  function ArrayField(props) {
    var _this;

    _this = _Component.call(this, props) || this;

    _defineProperty(_assertThisInitialized(_this), "_getNewFormDataRow", function (item) {
      if (item === void 0) {
        item = undefined;
      }

      var _this$props = _this.props,
          schema = _this$props.schema,
          _this$props$registry = _this$props.registry,
          registry = _this$props$registry === void 0 ? getDefaultRegistry() : _this$props$registry;
      var rootSchema = registry.rootSchema;
      var itemSchema = schema.items;

      if (isFixedItems(schema) && allowAdditionalItems(schema)) {
        itemSchema = schema.additionalItems;
      }

      return getDefaultFormState(itemSchema, item, rootSchema);
    });

    _defineProperty(_assertThisInitialized(_this), "onAddClick", function (event) {
      if (event) {
        event.preventDefault();
      }

      var onChange = _this.props.onChange;
      var newKeyedFormDataRow = {
        key: generateRowId(),
        item: _this._getNewFormDataRow()
      };
      var newKeyedFormData = [].concat(_this.state.keyedFormData, [newKeyedFormDataRow]);

      _this.setState({
        keyedFormData: newKeyedFormData,
        updatedKeyedFormData: true
      }, function () {
        return onChange(keyedToPlainFormData(newKeyedFormData));
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onAddItemClick", function (item) {
      var onChange = _this.props.onChange;
      var newKeyedFormDataRow = {
        key: generateRowId(),
        item: _this._getNewFormDataRow(item)
      };
      var newKeyedFormData = [].concat(_this.state.keyedFormData, [newKeyedFormDataRow]);

      _this.setState({
        keyedFormData: newKeyedFormData,
        updatedKeyedFormData: true
      }, function () {
        return onChange(keyedToPlainFormData(newKeyedFormData));
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onAddIndexClick", function (index) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        var onChange = _this.props.onChange;
        var newKeyedFormDataRow = {
          key: generateRowId(),
          item: _this._getNewFormDataRow()
        };
        var newKeyedFormData = [].concat(_this.state.keyedFormData);
        newKeyedFormData.splice(index, 0, newKeyedFormDataRow);

        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData));
        });
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onDropIndexClick", function (index) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        var onChange = _this.props.onChange;
        var keyedFormData = _this.state.keyedFormData; // refs #195: revalidate to ensure properly reindexing errors

        var newErrorSchema;

        if (_this.props.errorSchema) {
          newErrorSchema = {};
          var errorSchema = _this.props.errorSchema;

          for (var i in errorSchema) {
            i = parseInt(i);

            if (i < index) {
              newErrorSchema[i] = errorSchema[i];
            } else if (i > index) {
              newErrorSchema[i - 1] = errorSchema[i];
            }
          }
        }

        var newKeyedFormData = keyedFormData.filter(function (_, i) {
          return i !== index;
        });

        _this.setState({
          keyedFormData: newKeyedFormData,
          updatedKeyedFormData: true
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onReorderClick", function (index, newIndex) {
      return function (event) {
        if (event) {
          event.preventDefault();
          event.target.blur();
        }

        var onChange = _this.props.onChange;
        var newErrorSchema;

        if (_this.props.errorSchema) {
          newErrorSchema = {};
          var errorSchema = _this.props.errorSchema;

          for (var i in errorSchema) {
            if (i == index) {
              newErrorSchema[newIndex] = errorSchema[index];
            } else if (i == newIndex) {
              newErrorSchema[index] = errorSchema[newIndex];
            } else {
              newErrorSchema[i] = errorSchema[i];
            }
          }
        }

        var keyedFormData = _this.state.keyedFormData;

        function reOrderArray() {
          // Copy item
          var _newKeyedFormData = keyedFormData.slice(); // Moves item from index to newIndex


          _newKeyedFormData.splice(index, 1);

          _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);

          return _newKeyedFormData;
        }

        var newKeyedFormData = reOrderArray();

        _this.setState({
          keyedFormData: newKeyedFormData
        }, function () {
          return onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema);
        });
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onArrayChange", function (formData) {
      var onChange = _this.props.onChange;
      var newKeyedFormData = [];
      formData.map(function (item) {
        newKeyedFormData.push({
          key: generateRowId(),
          item: _this._getNewFormDataRow(item)
        });
      });

      _this.setState({
        keyedFormData: newKeyedFormData,
        updatedKeyedFormData: true
      }, function () {
        return onChange(keyedToPlainFormData(newKeyedFormData));
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onChangeForIndex", function (index) {
      return function (value, errorSchema) {
        var _extends2;

        var _this$props2 = _this.props,
            formData = _this$props2.formData,
            onChange = _this$props2.onChange;
        var newFormData = formData.map(function (item, i) {
          // We need to treat undefined items as nulls to have validation.
          // See https://github.com/tdegrunt/jsonschema/issues/206
          var jsonValue = typeof value === "undefined" ? null : value;
          return index === i ? jsonValue : item;
        });
        onChange(newFormData, errorSchema && _this.props.errorSchema && _extends({}, _this.props.errorSchema, (_extends2 = {}, _extends2[index] = errorSchema, _extends2)));
      };
    });

    _defineProperty(_assertThisInitialized(_this), "onSelectChange", function (value) {
      _this.props.onChange(value);
    });

    var _formData = props.formData;

    var _keyedFormData = generateKeyedFormData(_formData);

    _this.state = {
      keyedFormData: _keyedFormData,
      updatedKeyedFormData: false
    };
    return _this;
  }

  ArrayField.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
    // Don't call getDerivedStateFromProps if keyed formdata was just updated.
    if (prevState.updatedKeyedFormData) {
      return {
        updatedKeyedFormData: false
      };
    }

    var nextFormData = nextProps.formData;
    var previousKeyedFormData = prevState.keyedFormData;
    var newKeyedFormData = nextFormData.length === previousKeyedFormData.length ? previousKeyedFormData.map(function (previousKeyedFormDatum, index) {
      return {
        key: previousKeyedFormDatum.key,
        item: nextFormData[index]
      };
    }) : generateKeyedFormData(nextFormData);
    return {
      keyedFormData: newKeyedFormData
    };
  };

  var _proto = ArrayField.prototype;

  _proto.isItemRequired = function isItemRequired(itemSchema) {
    if (Array.isArray(itemSchema.type)) {
      // While we don't yet support composite/nullable jsonschema types, it's
      // future-proof to check for requirement against these.
      return !(0, _includes.default)(itemSchema.type, "null");
    } // All non-null array item types are inherently required by design


    return itemSchema.type !== "null";
  };

  _proto.canAddItem = function canAddItem(formItems) {
    var _this$props3 = this.props,
        schema = _this$props3.schema,
        uiSchema = _this$props3.uiSchema;

    var _getUiOptions = getUiOptions(uiSchema),
        addable = _getUiOptions.addable;

    if (addable !== false) {
      // if ui:options.addable was not explicitly set to false, we can add
      // another item if we have not exceeded maxItems yet
      if (schema.maxItems !== undefined) {
        addable = formItems.length < schema.maxItems;
      } else {
        addable = true;
      }
    }

    return addable;
  };

  _proto.render = function render() {
    var _this$props4 = this.props,
        schema = _this$props4.schema,
        uiSchema = _this$props4.uiSchema,
        idSchema = _this$props4.idSchema,
        _this$props4$registry = _this$props4.registry,
        registry = _this$props4$registry === void 0 ? getDefaultRegistry() : _this$props4$registry;
    var rootSchema = registry.rootSchema;

    if (!schema.hasOwnProperty("items")) {
      var fields = registry.fields;
      var UnsupportedField = fields.UnsupportedField;
      return /*#__PURE__*/_react.default.createElement(UnsupportedField, {
        schema: schema,
        idSchema: idSchema,
        reason: "Missing items definition"
      });
    }

    if (isFixedItems(schema)) {
      return this.renderFixedArray();
    }

    if (isFilesArray(schema, uiSchema, rootSchema)) {
      return this.renderFiles();
    }

    if (isMultiSelect(schema, rootSchema)) {
      return this.renderMultiSelect();
    }

    return this.renderNormalArray();
  };

  _proto.renderNormalArray = function renderNormalArray() {
    var _this2 = this;

    var _this$props5 = this.props,
        schema = _this$props5.schema,
        uiSchema = _this$props5.uiSchema,
        errorSchema = _this$props5.errorSchema,
        idSchema = _this$props5.idSchema,
        name = _this$props5.name,
        required = _this$props5.required,
        disabled = _this$props5.disabled,
        readonly = _this$props5.readonly,
        autofocus = _this$props5.autofocus,
        _this$props5$registry = _this$props5.registry,
        registry = _this$props5$registry === void 0 ? getDefaultRegistry() : _this$props5$registry,
        onBlur = _this$props5.onBlur,
        onFocus = _this$props5.onFocus,
        idPrefix = _this$props5.idPrefix,
        rawErrors = _this$props5.rawErrors;
    var title = schema.title === undefined ? name : schema.title;
    var ArrayFieldTemplate = registry.ArrayFieldTemplate,
        rootSchema = registry.rootSchema,
        fields = registry.fields,
        formContext = registry.formContext;
    var TitleField = fields.TitleField,
        DescriptionField = fields.DescriptionField;
    var itemsSchema = retrieveSchema(schema.items, rootSchema);
    var formData = keyedToPlainFormData(this.state.keyedFormData);
    var arrayProps = {
      canAdd: this.canAddItem(formData),
      items: this.state.keyedFormData.map(function (keyedItem, index) {
        var key = keyedItem.key,
            item = keyedItem.item;
        var itemSchema = retrieveSchema(schema.items, rootSchema, item);
        var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
        var itemIdPrefix = idSchema.$id + "_" + index;
        var itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, rootSchema, item, idPrefix);
        return _this2.renderArrayFieldItem({
          key: key,
          index: index,
          canMoveUp: index > 0,
          canMoveDown: index < formData.length - 1,
          itemSchema: itemSchema,
          itemIdSchema: itemIdSchema,
          itemErrorSchema: itemErrorSchema,
          itemData: item,
          itemUiSchema: uiSchema.items,
          autofocus: autofocus && index === 0,
          onBlur: onBlur,
          onFocus: onFocus
        });
      }),
      className: "field field-array field-array-of-" + itemsSchema.type,
      DescriptionField: DescriptionField,
      disabled: disabled,
      idSchema: idSchema,
      uiSchema: uiSchema,
      onChange: this.onArrayChange,
      onAddClick: this.onAddClick,
      onAddItemClick: function onAddItemClick(item) {
        return _this2.onAddItemClick(item);
      },
      readonly: readonly,
      required: required,
      schema: schema,
      title: title,
      TitleField: TitleField,
      formContext: formContext,
      formData: formData,
      rawErrors: rawErrors,
      registry: registry
    }; // Check if a custom render function was passed in

    var Component = uiSchema["ui:ArrayFieldTemplate"] || ArrayFieldTemplate || _NormalArrayFieldTemplate.default;
    return /*#__PURE__*/_react.default.createElement(Component, arrayProps);
  };

  _proto.renderMultiSelect = function renderMultiSelect() {
    var _this$props6 = this.props,
        schema = _this$props6.schema,
        idSchema = _this$props6.idSchema,
        uiSchema = _this$props6.uiSchema,
        formData = _this$props6.formData,
        disabled = _this$props6.disabled,
        readonly = _this$props6.readonly,
        required = _this$props6.required,
        label = _this$props6.label,
        placeholder = _this$props6.placeholder,
        autofocus = _this$props6.autofocus,
        onBlur = _this$props6.onBlur,
        onFocus = _this$props6.onFocus,
        _this$props6$registry = _this$props6.registry,
        registry = _this$props6$registry === void 0 ? getDefaultRegistry() : _this$props6$registry,
        rawErrors = _this$props6.rawErrors;
    var items = this.props.formData;
    var widgets = registry.widgets,
        rootSchema = registry.rootSchema,
        formContext = registry.formContext;
    var itemsSchema = retrieveSchema(schema.items, rootSchema, formData);
    var enumOptions = optionsList(itemsSchema);

    var _getUiOptions$enumOpt = _extends({}, getUiOptions(uiSchema), {
      enumOptions: enumOptions
    }),
        _getUiOptions$enumOpt2 = _getUiOptions$enumOpt.widget,
        widget = _getUiOptions$enumOpt2 === void 0 ? "select" : _getUiOptions$enumOpt2,
        options = _objectWithoutPropertiesLoose(_getUiOptions$enumOpt, ["widget"]);

    var Widget = getWidget(schema, widget, widgets);
    return /*#__PURE__*/_react.default.createElement(Widget, {
      id: idSchema && idSchema.$id,
      multiple: true,
      onChange: this.onSelectChange,
      onBlur: onBlur,
      onFocus: onFocus,
      options: options,
      schema: schema,
      registry: registry,
      value: items,
      disabled: disabled,
      readonly: readonly,
      required: required,
      label: label,
      placeholder: placeholder,
      formContext: formContext,
      autofocus: autofocus,
      rawErrors: rawErrors
    });
  };

  _proto.renderFiles = function renderFiles() {
    var _this$props7 = this.props,
        schema = _this$props7.schema,
        uiSchema = _this$props7.uiSchema,
        idSchema = _this$props7.idSchema,
        name = _this$props7.name,
        disabled = _this$props7.disabled,
        readonly = _this$props7.readonly,
        autofocus = _this$props7.autofocus,
        onBlur = _this$props7.onBlur,
        onFocus = _this$props7.onFocus,
        _this$props7$registry = _this$props7.registry,
        registry = _this$props7$registry === void 0 ? getDefaultRegistry() : _this$props7$registry,
        rawErrors = _this$props7.rawErrors;
    var title = schema.title || name;
    var items = this.props.formData;
    var widgets = registry.widgets,
        formContext = registry.formContext;

    var _getUiOptions2 = getUiOptions(uiSchema),
        _getUiOptions2$widget = _getUiOptions2.widget,
        widget = _getUiOptions2$widget === void 0 ? "files" : _getUiOptions2$widget,
        options = _objectWithoutPropertiesLoose(_getUiOptions2, ["widget"]);

    var Widget = getWidget(schema, widget, widgets);
    return /*#__PURE__*/_react.default.createElement(Widget, {
      options: options,
      id: idSchema && idSchema.$id,
      multiple: true,
      onChange: this.onSelectChange,
      onBlur: onBlur,
      onFocus: onFocus,
      schema: schema,
      title: title,
      value: items,
      disabled: disabled,
      readonly: readonly,
      formContext: formContext,
      autofocus: autofocus,
      rawErrors: rawErrors
    });
  };

  _proto.renderFixedArray = function renderFixedArray() {
    var _this3 = this;

    var _this$props8 = this.props,
        schema = _this$props8.schema,
        uiSchema = _this$props8.uiSchema,
        formData = _this$props8.formData,
        errorSchema = _this$props8.errorSchema,
        idPrefix = _this$props8.idPrefix,
        idSchema = _this$props8.idSchema,
        name = _this$props8.name,
        required = _this$props8.required,
        disabled = _this$props8.disabled,
        readonly = _this$props8.readonly,
        autofocus = _this$props8.autofocus,
        _this$props8$registry = _this$props8.registry,
        registry = _this$props8$registry === void 0 ? getDefaultRegistry() : _this$props8$registry,
        onBlur = _this$props8.onBlur,
        onFocus = _this$props8.onFocus,
        rawErrors = _this$props8.rawErrors;
    var title = schema.title || name;
    var items = this.props.formData;
    var ArrayFieldTemplate = registry.ArrayFieldTemplate,
        rootSchema = registry.rootSchema,
        fields = registry.fields,
        formContext = registry.formContext;
    var TitleField = fields.TitleField;
    var itemSchemas = schema.items.map(function (item, index) {
      return retrieveSchema(item, rootSchema, formData[index]);
    });
    var additionalSchema = allowAdditionalItems(schema) ? retrieveSchema(schema.additionalItems, rootSchema, formData) : null;

    if (!items || items.length < itemSchemas.length) {
      // to make sure at least all fixed items are generated
      items = items || [];
      items = items.concat(new Array(itemSchemas.length - items.length));
    } // These are the props passed into the render function


    var arrayProps = {
      canAdd: this.canAddItem(items) && additionalSchema,
      className: "field field-array field-array-fixed-items",
      disabled: disabled,
      idSchema: idSchema,
      formData: formData,
      items: this.state.keyedFormData.map(function (keyedItem, index) {
        var key = keyedItem.key,
            item = keyedItem.item;
        var additional = index >= itemSchemas.length;
        var itemSchema = additional ? retrieveSchema(schema.additionalItems, rootSchema, item) : itemSchemas[index];
        var itemIdPrefix = idSchema.$id + "_" + index;
        var itemIdSchema = toIdSchema(itemSchema, itemIdPrefix, rootSchema, item, idPrefix);
        var itemUiSchema = additional ? uiSchema.additionalItems || {} : Array.isArray(uiSchema.items) ? uiSchema.items[index] : uiSchema.items || {};
        var itemErrorSchema = errorSchema ? errorSchema[index] : undefined;
        return _this3.renderArrayFieldItem({
          key: key,
          index: index,
          canRemove: additional,
          canMoveUp: index >= itemSchemas.length + 1,
          canMoveDown: additional && index < items.length - 1,
          itemSchema: itemSchema,
          itemData: item,
          itemUiSchema: itemUiSchema,
          itemIdSchema: itemIdSchema,
          itemErrorSchema: itemErrorSchema,
          autofocus: autofocus && index === 0,
          onBlur: onBlur,
          onFocus: onFocus
        });
      }),
      onChange: this.onArrayChange,
      onAddClick: this.onAddClick,
      onAddItemClick: function onAddItemClick(item) {
        return _this3.onAddItemClick(item);
      },
      readonly: readonly,
      required: required,
      schema: schema,
      uiSchema: uiSchema,
      title: title,
      TitleField: TitleField,
      formContext: formContext,
      rawErrors: rawErrors
    }; // Check if a custom template template was passed in

    var Template = uiSchema["ui:ArrayFieldTemplate"] || ArrayFieldTemplate || _FixedArrayFieldTemplate.default;
    return /*#__PURE__*/_react.default.createElement(Template, arrayProps);
  };

  _proto.renderArrayFieldItem = function renderArrayFieldItem(props) {
    var key = props.key,
        index = props.index,
        _props$canRemove = props.canRemove,
        canRemove = _props$canRemove === void 0 ? true : _props$canRemove,
        _props$canMoveUp = props.canMoveUp,
        canMoveUp = _props$canMoveUp === void 0 ? true : _props$canMoveUp,
        _props$canMoveDown = props.canMoveDown,
        canMoveDown = _props$canMoveDown === void 0 ? true : _props$canMoveDown,
        itemSchema = props.itemSchema,
        itemData = props.itemData,
        itemUiSchema = props.itemUiSchema,
        itemIdSchema = props.itemIdSchema,
        itemErrorSchema = props.itemErrorSchema,
        autofocus = props.autofocus,
        onBlur = props.onBlur,
        onFocus = props.onFocus,
        rawErrors = props.rawErrors;
    var _this$props9 = this.props,
        disabled = _this$props9.disabled,
        readonly = _this$props9.readonly,
        uiSchema = _this$props9.uiSchema,
        _this$props9$registry = _this$props9.registry,
        registry = _this$props9$registry === void 0 ? getDefaultRegistry() : _this$props9$registry;
    var SchemaField = registry.fields.SchemaField;

    var _orderable$removable$ = _extends({
      orderable: true,
      removable: true
    }, uiSchema["ui:options"]),
        orderable = _orderable$removable$.orderable,
        removable = _orderable$removable$.removable;

    var has = {
      moveUp: orderable && canMoveUp,
      moveDown: orderable && canMoveDown,
      remove: removable && canRemove
    };
    has.toolbar = Object.keys(has).some(function (key) {
      return has[key];
    });
    return {
      children: /*#__PURE__*/_react.default.createElement(SchemaField, {
        index: index,
        schema: itemSchema,
        uiSchema: itemUiSchema,
        formData: itemData,
        errorSchema: itemErrorSchema,
        idSchema: itemIdSchema,
        required: this.isItemRequired(itemSchema),
        onChange: this.onChangeForIndex(index),
        onBlur: onBlur,
        onFocus: onFocus,
        registry: this.props.registry,
        disabled: this.props.disabled,
        readonly: this.props.readonly,
        autofocus: autofocus,
        rawErrors: rawErrors
      }),
      className: "array-item",
      disabled: disabled,
      hasToolbar: has.toolbar,
      hasMoveUp: has.moveUp,
      hasMoveDown: has.moveDown,
      hasRemove: has.remove,
      index: index,
      key: key,
      onAddIndexClick: this.onAddIndexClick,
      onDropIndexClick: this.onDropIndexClick,
      onReorderClick: this.onReorderClick,
      readonly: readonly
    };
  };

  _createClass(ArrayField, [{
    key: "itemTitle",
    get: function get() {
      var schema = this.props.schema;
      return schema.items.title || schema.items.description || "Item";
    }
  }]);

  return ArrayField;
}(_react.Component);

_defineProperty(ArrayField, "defaultProps", {
  uiSchema: {},
  formData: [],
  idSchema: {},
  required: false,
  disabled: false,
  readonly: false,
  autofocus: false
});

var _default = ArrayField;
exports.default = _default;
module.exports = exports.default;