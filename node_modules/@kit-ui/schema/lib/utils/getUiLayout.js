"use strict";

exports.__esModule = true;
exports.default = exports.getUiLayout = void 0;

var _ = require("./");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var isExpanded = function isExpanded(props) {
  var idSchema = props.idSchema,
      uiOptions = props.uiOptions,
      formContext = props.formContext;
  var id = idSchema && idSchema.$id;
  var collapsible = uiOptions.collapsible,
      editable = uiOptions.editable,
      expanded = uiOptions.expanded;
  var currentId = formContext && formContext.currentId;

  if (editable && expanded && !currentId) {
    return true;
  } else if (editable && currentId && currentId.startsWith(id)) {
    return true;
  } else if (editable) {
    return false;
  } else if (collapsible && expanded && !currentId) {
    return true;
  } else if (collapsible && currentId && currentId.startsWith(id)) {
    return true;
  } else if (collapsible) {
    return false;
  }

  return;
};

var isEditing = function isEditing(props) {
  var idSchema = props.idSchema,
      uiOptions = props.uiOptions,
      formContext = props.formContext;
  var id = idSchema && idSchema.$id;
  var editable = uiOptions.editable,
      expanded = uiOptions.expanded;
  var currentId = formContext && formContext.currentId;

  if (editable && expanded) {
    return true;
  } else if (editable && currentId && currentId.startsWith(id)) {
    return true;
  }

  return false;
};

var isHidden = function isHidden(props) {
  var formData = props.formData;

  if (formData && formData.hidden) {
    return true;
  }

  return false;
};

var isDeleted = function isDeleted(props) {
  var formData = props.formData;

  if (formData && formData._action && formData._action === "delete") {
    return true;
  }

  return false;
};

var isRestored = function isRestored(props) {
  var formData = props.formData;

  if (formData && formData._action && formData._action === "restore") {
    return true;
  }

  return false;
};

var getUiLayout = function getUiLayout(_ref) {
  var _ref$schema = _ref.schema,
      schema = _ref$schema === void 0 ? {} : _ref$schema,
      _ref$uiSchema = _ref.uiSchema,
      uiSchema = _ref$uiSchema === void 0 ? {} : _ref$uiSchema,
      props = _objectWithoutPropertiesLoose(_ref, ["schema", "uiSchema"]);

  var idPrefix = props.idPrefix,
      name = props.name,
      idSchema = props.idSchema,
      formData = props.formData;
  var uiOptions = (0, _.getUiOptions)(uiSchema); // layout

  var layout = uiOptions.layout,
      widget = uiOptions.widget; // title, description, summary, help

  var title = uiOptions.title,
      description = uiOptions.description,
      help = uiOptions.help;
  title = title && typeof title === "string" && title || schema.title || name || formData && formData.title && typeof formData.title === "string" && formData.title || undefined;
  description = description && typeof description === "string" && description || undefined;
  help = description && typeof description === "string" && description || uiOptions.help || undefined; // disabled, readonly, autofocus

  var disabled = Boolean(props.disabled || uiSchema["ui:disabled"]);
  var readonly = Boolean(props.readonly || uiSchema["ui:readonly"]);
  var autofocus = Boolean(props.autofocus || uiSchema["ui:autofocus"]); // editable, editing

  var editable = uiOptions.editable && Boolean(uiOptions.editable) || false;
  var editing = isEditing(_extends({}, props, {
    uiOptions: uiOptions
  })); // collapsible + expanded

  var collapsible = uiOptions.collapsible && Boolean(uiOptions.collapsible) || false;
  var expanded = isExpanded(_extends({}, props, {
    uiOptions: uiOptions
  })); // hideable + hidden

  var hideable = Boolean(uiOptions.hideable);
  var hidden = isHidden(props); // deletable + deleted

  var deletable = Boolean(uiOptions.deletable);
  var deleted = isDeleted(props); // restorable + restored

  var restorable = Boolean(uiOptions.restorable);
  var restored = isRestored(props); // hideable, deletable, restorable
  //    let hideable = Boolean(uiOptions.hideable);
  //    let deletable = Boolean(uiOptions.deletable);
  // orderable

  var orderable;

  if (uiOptions.orderable === false) {
    orderable = false;
  } else {
    orderable = true;
  } // addable + removable


  var addable, removable;

  if (uiOptions.addable === false) {
    addable = false;
  } else {
    addable = Boolean(uiOptions.addable);
  }

  if (uiOptions.removable === false) {
    removable = false;
  } else {
    removable = Boolean(uiOptions.removable) || props.isArrayItem && props.hasRemove;
  }
  /*
   // default array layout
   if (!layout && schema.type === "array") {
      layout = "array"
  }
   if (!layout && schema.type === "object") {
      layout = "object"
  }
  
  // simple layouts
   if (!layout && (
      schema.type === "string" ||
      schema.type === "number" ||
      schema.type === "integer" ||
      schema.type === "boolean")
  ) {
      layout = "field"
  }
   */
  // show label?


  var label;

  if (uiOptions.label === false) {
    label = false;
  } else if (schema.type === "object") {
    label = schema.title && true || uiOptions.title && true || false;
  } else if (schema.type === "boolean" && (widget === "select" || widget === "radio")) {
    label = true;
  } else if (schema.type === "boolean") {
    label = false;
  } else {
    label = true;
  } // show header?


  var header;

  if (!label) {
    header = false;
  } // show footer?


  var footer;

  if (schema.type == "object" && !uiOptions.buttons) {
    footer = false;
  }

  return _extends({}, uiOptions, {
    name: name,
    id: idSchema && idSchema.$id,
    idPrefix: idPrefix,
    header: header,
    footer: footer,
    collapsible: collapsible,
    expanded: expanded,
    editable: editable,
    editing: editing,
    hideable: hideable,
    hidden: hidden,
    deletable: deletable,
    deleted: deleted,
    restorable: restorable,
    restored: restored,
    addable: addable,
    removable: removable,
    disabled: disabled,
    readonly: readonly,
    autofocus: autofocus,
    label: label,
    title: title || undefined,
    description: description,
    help: help,
    layout: layout || "default"
  });
};

exports.getUiLayout = getUiLayout;
var _default = getUiLayout;
exports.default = _default;