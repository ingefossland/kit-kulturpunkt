"use strict";

exports.__esModule = true;
exports.default = exports.getReferenceButtons = void 0;

var _ = require("./");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getReferenceButtons = function getReferenceButtons(props) {
  var formContext = props.formContext,
      idSchema = props.idSchema;

  var buttonProps = _extends({}, props, {
    id: idSchema && idSchema.$id
  });

  var uiOptions = (0, _.getUiOptions)(props.uiSchema);
  var onSave = formContext.onSave,
      onEditReference = formContext.onEditReference,
      onDialog = formContext.onDialog,
      onUpload = formContext.onUpload; // default buttons

  var buttons = uiOptions.buttons || ["save", "edit"];
  var uiButtons = []; // ui buttons

  if (buttons) {
    buttons.map(function (button) {
      if (typeof button === "string") {
        button = {
          type: button,
          title: button.charAt(0).toUpperCase() + button.slice(1)
        };
      }

      var _button = button,
          _button$type = _button.type,
          type = _button$type === void 0 ? "button" : _button$type;

      if (type === "save") {
        button.onClick = function () {
          return onSave && onSave(buttonProps);
        };
      } else if (type === "edit") {
        button.onClick = function () {
          return onEditReference && onEditReference(buttonProps);
        };
      }
      /*
      if (type === "dialog" || type === "sidebar") {
          button.onClick = () => onDialog && onDialog(buttonProps)
      } else if (type === "upload") {
          button.onClick = () => onUpload && onUpload(buttonProps)
      }
      */


      button = _extends({}, button, {
        type: "button",
        disabled: props.disabled || props.readonly
      });
      uiButtons.push(button);
    });
  }

  return uiButtons;
};

exports.getReferenceButtons = getReferenceButtons;
var _default = getReferenceButtons;
exports.default = _default;