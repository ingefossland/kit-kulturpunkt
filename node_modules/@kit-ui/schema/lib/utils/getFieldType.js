"use strict";

exports.__esModule = true;
exports.default = exports.getFieldType = void 0;

var _fieldTypes = _interopRequireDefault(require("../fieldTypes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getFieldType = function getFieldType(props) {
  var schema = props && props.schema;
  var schemaType = schema && schema.type;
  var itemSchema = props && props.schema && props.schema.items;
  var itemType = itemSchema && itemSchema.type;
  var field = {};

  if (schemaType && schemaType in _fieldTypes.default) {
    var convertFieldType = _fieldTypes.default[schemaType];
    field = convertFieldType(_extends({}, props));
    field.schema = _extends({}, field.schema, {
      _type: schemaType
    });
  } else if (schemaType === "array" && itemType && itemType in _fieldTypes.default) {
    console.log("convert item", itemSchema);
    var convertItemType = _fieldTypes.default[itemType];
    var itemField = convertItemType({
      schema: itemSchema,
      uiSchema: props.uiSchema && props.uiSchema.items
    });
    console.log("new item", itemField);
    field = _extends({}, props, {
      schema: _extends({}, schema, {
        items: _extends({}, itemField.schema, {
          _type: itemType
        })
      }),
      uiSchema: _extends({}, props.uiSchema, {
        items: _extends({}, itemField.uiSchema)
      })
    });
  } else {
    field = props;
  }

  return field;
};

exports.getFieldType = getFieldType;
var _default = getFieldType;
exports.default = _default;