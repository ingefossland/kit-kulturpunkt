"use strict";

exports.__esModule = true;
exports.getPreviewLocalizedString = getPreviewLocalizedString;
exports.getPreviewFilters = getPreviewFilters;
exports.getPreviewData = getPreviewData;
exports.default = exports.getUiPreview = void 0;

var _ = require("./");

function getPreviewLocalizedString(localizedString, props) {
  var formContext = props.formContext;
  var currentLocale = formContext && formContext.currentLocale || formContext && formContext.languages && formContext.languages[0];

  if (!currentLocale) {
    return;
  }

  var localeId = "locale:" + currentLocale;
  return localizedString && localizedString[localeId];
}

function getPreviewFilters(value, props) {
  var schema = props.schema,
      formData = props.formData,
      index = props.index;

  if (schema && schema.type === "array" && formData && formData.length) {
    value = value && value.replace("{count}", formData.length);
  } else if (index) {
    value = value && value.replace("{count}", index + 1);
    value = value && value.replace("{index}", index);
  }

  return value;
}

function getPreviewData(preview, props) {
  var schema = props.schema,
      formData = props.formData;
  var select = preview.select,
      prepare = preview.prepare,
      single = preview.single,
      plural = preview.plural,
      empty = preview.empty;
  var selection;

  if (prepare && typeof prepare === "function") {
    selection = prepare(props);
  } else if (prepare) {
    selection = prepare;
  } else {
    selection = formData;
  }

  var data = {};

  if (select) {
    Object.keys(select).map(function (name) {
      var key = select[name] || name;
      var value = null;

      if (select.hasOwnProperty(key) && selection && selection[key]) {
        value = selection[key];
      }

      if (typeof value === "object" && value !== null && schema && schema.type === "array") {
        if (formData && formData.length && formData.length > 1 && value.plural) {
          value = value.plural;
        } else if (formData && formData.length && formData.length === 1 && value.single) {
          value = value.single;
        } else if (value.empty) {
          value = value.empty;
        }
      }
      /*
       if (typeof value === "object" && value !== null) {
          value = getPreviewLocalizedString(value, props)
      }
       */


      if (value && typeof value === "string") {
        value = getPreviewFilters(value, props);
      }

      if (name === "metadata" && selection[key]) {
        data[name] = selection[key];
      }

      if (value) {
        data[name] = value;
      }
    });
  }

  return data;
}

var getUiPreview = function getUiPreview(_ref) {
  var schema = _ref.schema,
      _ref$uiSchema = _ref.uiSchema,
      uiSchema = _ref$uiSchema === void 0 ? {} : _ref$uiSchema,
      formData = _ref.formData,
      formContext = _ref.formContext,
      index = _ref.index;
  var uiOptions = (0, _.getUiOptions)(uiSchema);
  var previewData = {
    schema: schema,
    formData: formData,
    formContext: formContext,
    index: index
  };

  if (uiOptions.preview) {
    return getPreviewData(uiOptions.preview, previewData);
  }
};

exports.getUiPreview = getUiPreview;
var _default = getUiPreview;
exports.default = _default;