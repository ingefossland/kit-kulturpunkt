"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@kit-ui/core");

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _List = _interopRequireDefault(require("@material-ui/core/List"));

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

var _ListItemIcon = _interopRequireDefault(require("@material-ui/core/ListItemIcon"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var sizes = {
  "xlarge": "4:4",
  "xl": "4:4",
  "large": "4:3",
  "l": "4:3",
  "l-m": "4:2",
  "m-l": "2:4",
  "medium": "2:2",
  "m": "2:2",
  "m-s": "2:1",
  "s-m": "1:2",
  "small": "1:1",
  "s": "1:1",
  "xsmall": "0.5:0.5",
  "xs": "0.5:0.5"
};
var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    list: {
      position: "relative",
      padding: 0,
      margin: 0,
      width: function width(props) {
        return props.cols * theme.spacing(7);
      },
      height: function height(props) {
        return props.rows * theme.spacing(7);
      }
    },
    listItem: {
      position: "absolute",
      display: "block",
      top: 0,
      left: 0,
      backgroundColor: "rgba(0,0,0,.125)",
      zIndex: function zIndex(props) {
        return props.zIndex;
      },
      outline: "1px solid white",
      width: function width(props) {
        return props.cols * theme.spacing(7);
      },
      height: function height(props) {
        return props.rows * theme.spacing(7);
      },
      "&:hover": {
        backgroundColor: "rgba(0,0,0,.5)",
        color: "white"
      },
      "&[aria-selected=true]": {
        backgroundColor: theme.palette.primary.main,
        color: "white"
      }
    },
    label: {
      position: "absolute",
      top: 'auto',
      right: 0,
      bottom: 0,
      left: 'auto',
      fontFamily: "Akkurat, sans-serif",
      textTransform: "uppercase",
      fontSize: '12px',
      padding: theme.spacing(0.5)
    }
  };
});

var SizeSettingsOptions = function SizeSettingsOptions(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange;

  if (!value) {
    value = options[0].value;
  }

  var _onSelect = function _onSelect(value) {
    onChange && onChange(value);
  };

  var maxRows = 4;
  var maxCols = 4;

  var ListOption = function ListOption(option) {
    var label = option.label,
        value = option.value,
        selected = option.selected;
    var grid = sizes && sizes[value] && sizes[value].split(':') || [4, 4];
    var cols = grid[0];
    var rows = grid[1];
    var zIndex = maxRows * maxCols - cols * rows;
    var classes = useStyles({
      cols: cols,
      rows: rows,
      zIndex: zIndex
    });
    return /*#__PURE__*/_react.default.createElement("li", {
      className: classes.listItem,
      "aria-selected": selected,
      onClick: function onClick() {
        return _onSelect(value);
      }
    }, /*#__PURE__*/_react.default.createElement("b", {
      className: classes.label
    }, label || value));
  };

  var classes = useStyles({
    cols: maxCols,
    rows: maxRows
  });
  return /*#__PURE__*/_react.default.createElement("ul", {
    className: classes.list
  }, options && options.map(function (option, index) {
    return /*#__PURE__*/_react.default.createElement(ListOption, _extends({}, option, {
      key: index,
      selected: option.value === value
    }));
  }));
};

SizeSettingsOptions.defaultProps = {};
SizeSettingsOptions.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
var _default = SizeSettingsOptions;
exports.default = _default;
module.exports = exports.default;