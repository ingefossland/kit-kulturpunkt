"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _admin = require("@kit-ui/admin");

var _MediaButtons = _interopRequireDefault(require("./MediaButtons"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    media: {},
    header: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: "auto",
      left: 0,
      display: "flex",
      zIndex: 2,
      alignItems: "center",
      justifyContent: "flex-end",
      height: theme.spacing(6),
      marginLeft: theme.spacing(1),
      //        marginRight: theme.spacing(1),
      color: "inherit",
      "& + [role=tablist] > [role=tab] > *": {
        zIndex: 1,
        marginTop: theme.spacing(6)
      },
      "& + [role=tablist] > [role=tab][data-name=media] > *": {
        zIndex: 1,
        marginTop: 0
      }
    },
    tabs: {
      flexGrow: 1,
      marginLeft: theme.spacing(1),
      color: "white"
    },
    settings: {
      display: "flex"
    },
    toolbar: {
      display: "flex",
      color: "white",
      "& > button": {
        color: "inherit"
      }
    }
  };
});

var MediaHeader = function MediaHeader(_ref) {
  var menu = _ref.menu,
      toolbar = _ref.toolbar,
      settings = _ref.settings;
  var classes = useStyles();
  toolbar = toolbar && toolbar.map(function (item) {
    if (item.name === "edit") {
      return false;
    }

    return item;
  });
  return /*#__PURE__*/_react.default.createElement("header", {
    className: classes.header
  }, menu && /*#__PURE__*/_react.default.createElement(_admin.NavTabs, {
    className: classes.tabs,
    tabs: menu
  }), settings && /*#__PURE__*/_react.default.createElement(_admin.NavSettings, {
    className: classes.settings,
    settings: settings
  }), toolbar && /*#__PURE__*/_react.default.createElement(_admin.NavToolbar, {
    className: classes.toolbar,
    toolbar: toolbar
  }));
};

var MediaLayout = function MediaLayout(_ref2) {
  var mediaId = _ref2.mediaId,
      media = _ref2.media,
      minWidth = _ref2.minWidth,
      minHeight = _ref2.minHeight,
      backgroundColor = _ref2.backgroundColor,
      color = _ref2.color,
      upload = _ref2.upload,
      uploadProgress = _ref2.uploadProgress,
      menu = _ref2.menu,
      _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? [] : _ref2$buttons,
      children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["mediaId", "media", "minWidth", "minHeight", "backgroundColor", "color", "upload", "uploadProgress", "menu", "buttons", "children"]);

  var mediaType = media && media.mediaType;

  if (mediaType === "image") {
    backgroundColor = "#333";
    color = "white";
  }

  if (mediaType === "video") {
    backgroundColor = "black";
    color = "white";
  }

  if (mediaType === "audio") {
    backgroundColor = "white";
  }

  var baseProps = _extends({}, props, {
    minWidth: minWidth,
    minHeight: minHeight,
    backgroundColor: backgroundColor,
    color: color
  });

  if (uploadProgress && uploadProgress < 100) {
    return /*#__PURE__*/_react.default.createElement(_admin.MediaBase, baseProps, /*#__PURE__*/_react.default.createElement(MediaHeader, props), /*#__PURE__*/_react.default.createElement(_admin.MediaUpload, _extends({}, props, {
      mediaType: mediaType,
      uploadProgress: uploadProgress
    })));
  }

  if (!mediaId && buttons) {
    return /*#__PURE__*/_react.default.createElement(_admin.MediaBase, baseProps, /*#__PURE__*/_react.default.createElement(_MediaButtons.default, {
      buttons: buttons
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_admin.MediaBase, baseProps, /*#__PURE__*/_react.default.createElement(MediaHeader, _extends({}, props, {
    menu: menu
  })), children);
};

MediaLayout.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
MediaLayout.defaultProps = {
  minWidth: 0,
  minHeight: 256
};
var _default = MediaLayout;
exports.default = _default;
module.exports = exports.default;