"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var MediaField = function MediaField(props) {
  var schema = props.schema,
      _props$uiSchema = props.uiSchema,
      uiSchema = _props$uiSchema === void 0 ? {} : _props$uiSchema,
      _props$formData = props.formData,
      formData = _props$formData === void 0 ? {} : _props$formData,
      formContext = props.formContext;

  var _onRemove = function _onRemove() {
    var newFormData = (0, _utils.getDefaultFormState)(schema, {});
    props.onChange(newFormData);
  };

  var _onCropdata = function _onCropdata(imageCropdata) {
    props.onChange(_extends({}, formData, {
      imageCropdata: imageCropdata
    }));
  };

  var _onFocalpoint = function _onFocalpoint(imageFocalpoint) {
    props.onChange(_extends({}, formData, {
      imageFocalpoint: imageFocalpoint
    }));
  };

  var _onFilters = function _onFilters(imageFilters) {
    props.onChange(_extends({}, formData, {
      imageFilters: imageFilters
    }));
  };

  var _onAnnotations = function _onAnnotations(imageAnnotations) {
    props.onChange(_extends({}, formData, {
      imageAnnotations: imageAnnotations
    }));
  };

  var getUiSchema = function getUiSchema() {
    var uiOptions = (0, _utils.getUiOptions)(uiSchema);
    var fieldset = uiOptions.fieldset || [];

    if (!uiOptions.fieldset && schema.properties) {
      Object.keys(schema.properties).map(function (name) {
        var type = schema.properties[name] && schema.properties[name].type || undefined;

        if (type === "object") {
          fieldset.push(name);
        }

        if (type === "array") {
          fieldset.push(name);
        }
      });
    }

    var mediaId = formData && formData.mediaId;
    var media = formData && formData.media;
    var uiMediaProps = {
      "ui:mediaId": mediaId,
      "ui:media": media,
      "ui:uploadProgress": media && media.uploadProgress,
      "ui:mediaType": media && media.mediaType,
      "ui:resources": media && media.resources,
      "ui:imageUrl": media && media.imageUrl,
      "ui:imageCropdata": formData && formData.imageCropdata,
      "ui:imageFocalpoint": formData && formData.imageFocalpoint,
      "ui:imageFilters": formData && formData.imageFilters,
      "ui:imageAnnotations": formData && formData.imageAnnotations
    };
    var uiMedia, uiContent, uiCropdata, uiFocalpoint, uiFilters, uiAnnotations;

    if (fieldset && fieldset.includes('media')) {
      var uiSchemaMedia = uiSchema && uiSchema.media;
      uiMedia = _extends({
        "ui:title": "Preview",
        "ui:layout": "mediaPreview"
      }, uiMediaProps, uiSchemaMedia);
    }

    if (fieldset && fieldset.includes('content')) {
      var uiSchemaContent = uiSchema && uiSchema.content;
      uiContent = _extends({
        "ui:title": "Innhold",
        "ui:layout": "mediaContent"
      }, uiMediaProps, uiSchemaContent);
    }

    if (fieldset && fieldset.includes('imageCropdata')) {
      var uiSchemaCropdata = uiSchema && uiSchema.imageCropdata;
      uiCropdata = _extends({
        "ui:title": "Crop",
        "ui:layout": "imageCropper",
        "ui:onChange": function uiOnChange(cropdata) {
          return _onCropdata(cropdata);
        }
      }, uiMediaProps, uiSchemaCropdata);
    }

    if (fieldset && fieldset.includes('imageFocalpoint')) {
      var uiSchemaFocalpoint = uiSchema && uiSchema.imageFocalpoint;
      uiFocalpoint = _extends({
        "ui:title": "Focalpoint",
        "ui:layout": "imageFocalpoint",
        "ui:onChange": function uiOnChange(focalpoint) {
          return _onFocalpoint(focalpoint);
        }
      }, uiMediaProps, uiSchemaFocalpoint);
    }

    if (fieldset && fieldset.includes('imageFilters')) {
      var uiSchemaFilters = uiSchema && uiSchema.imageFilters;
      uiFilters = _extends({
        "ui:title": "Filters",
        "ui:layout": "imageFilters",
        "ui:onChange": function uiOnChange(filters) {
          return _onFilters(filters);
        }
      }, uiMediaProps, uiSchemaFilters);
    }

    if (fieldset && fieldset.includes('imageAnnotations')) {
      var uiSchemaAnnotations = uiSchema && uiSchema.imageAnnotations;
      uiAnnotations = _extends({
        "ui:title": "Annotations",
        "ui:layout": "imageAnnotations",
        "ui:onChange": function uiOnChange(annotations) {
          return _onAnnotations(annotations);
        }
      }, uiMediaProps, uiSchemaAnnotations);
    }

    var layout = uiOptions.layout || "media";
    return _extends({
      "ui:editable": true,
      "ui:removable": true
    }, uiSchema, uiMediaProps, {
      "ui:minHeight": uiOptions.minHeight || 256,
      "ui:layout": layout,
      "ui:fieldset": fieldset,
      "ui:buttons": (0, _utils.getMediaButtons)(props),
      "ui:nav": "tabs",
      "media": uiMedia,
      "content": uiContent,
      "imageCropdata": uiCropdata,
      "imageFocalpoint": uiFocalpoint,
      "imageFilters": uiFilters,
      "imageAnnotations": uiAnnotations,
      "onRemove": function onRemove() {
        return _onRemove();
      },
      "ui:preview": {
        "select": {
          "title": "title",
          "status": "status"
        },
        prepare: function prepare(_ref) {
          var formData = _ref.formData;
          var media = formData.media;
          return {
            title: media && media.title,
            status: media && media.status
          };
        }
      }
    });
  };

  var ObjectField = props.registry.fields.ObjectField;
  var newUiSchema = getUiSchema();
  return /*#__PURE__*/_react.default.createElement(ObjectField, _extends({}, props, {
    uiSchema: newUiSchema
  }));
};

var _default = MediaField;
exports.default = _default;
module.exports = exports.default;