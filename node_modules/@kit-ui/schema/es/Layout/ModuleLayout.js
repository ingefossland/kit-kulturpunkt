function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { //    ExpandedModule,
ModuleBase, ModuleFormat, ModuleHeader, ModuleBody, ModuleFooter, ModuleButtons, ListModule } from "@kit-ui/admin";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  var _header;

  return {
    module: {
      position: "relative",
      zIndex: 2,
      "& + *": {
        zIndex: 1
      },
      display: "flex",
      flexDirection: "column",
      minHeight: function minHeight(props) {
        return props.minHeight;
      }
    },
    header: (_header = {
      position: "absolute",
      zIndex: 2,
      top: 0,
      right: 0,
      bottom: "auto",
      left: 0,
      display: "flex"
    }, _header["zIndex"] = 2, _header.alignItems = "center", _header.justifyContent = "flex-start", _header.height = theme.spacing(6), _header.marginLeft = theme.spacing(1), _header.marginRight = theme.spacing(1), _header.color = "inherit", _header["& + *"] = {
      zIndex: 1,
      marginTop: theme.spacing(6)
    }, _header),
    body: {
      minHeight: function minHeight(props) {
        return props.minHeight;
      },
      marginTop: function marginTop(props) {
        return props.minHeight && 0;
      },
      paddingRight: theme.spacing(2),
      paddingBottom: theme.spacing(2),
      paddingLeft: theme.spacing(2),
      flexGrow: 1
    },
    footer: {
      borderTop: "1px solid",
      borderColor: theme.palette.divider,
      padding: theme.spacing(2)
    }
  };
});
/** ModuleLayout, use for documents or media objects */

var ExpandedModule = function ExpandedModule(_ref) {
  var children = _ref.children,
      buttons = _ref.buttons,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "buttons"]);

  var id = props.id;
  var classes = useStyles(props);
  return /*#__PURE__*/React.createElement(ModuleBase, {
    className: classes.module,
    id: id,
    expanded: true,
    elevation: 4
  }, /*#__PURE__*/React.createElement(ModuleFormat, props, /*#__PURE__*/React.createElement(ModuleHeader, _extends({}, props, {
    className: classes.header
  })), /*#__PURE__*/React.createElement(ModuleBody, {
    className: classes.body
  }, children)), /*#__PURE__*/React.createElement(ModuleFooter, {
    className: classes.footer
  }, /*#__PURE__*/React.createElement(ModuleButtons, {
    buttons: buttons
  })));
};

var ModuleLayout = function ModuleLayout(_ref2) {
  var editable = _ref2.editable,
      editing = _ref2.editing,
      buttons = _ref2.buttons,
      onSave = _ref2.onSave,
      children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["editable", "editing", "buttons", "onSave", "children"]);

  if (editable && editing) {
    if (!buttons || !buttons.length) {
      buttons = [{
        title: "Save",
        onClick: onSave
      }];
    }

    return /*#__PURE__*/React.createElement(ExpandedModule, _extends({}, props, {
      buttons: buttons
    }), children);
  }

  return /*#__PURE__*/React.createElement(ListModule, _extends({}, props, {
    editable: editable
  }));
};

ModuleLayout.defaultProps = {
  padding: 2,
  editable: true
};
ModuleLayout.propTypes = process.env.NODE_ENV !== "production" ? {
  editable: PropTypes.bool,
  editing: PropTypes.bool
} : {};
export default ModuleLayout;