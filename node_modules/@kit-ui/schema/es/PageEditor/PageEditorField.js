function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { getUiOptions } from "../utils";

var PageEditorField = function PageEditorField(props) {
  var idSchema = props.idSchema,
      schema = props.schema,
      uiSchema = props.uiSchema,
      formData = props.formData,
      formContext = props.formContext,
      registry = props.registry;
  var isLoading = formData.isLoading,
      isSaving = formData.isSaving,
      uniqueId = formData.uniqueId,
      status = formData.status,
      statusCode = formData.statusCode,
      statusMessage = formData.statusMessage,
      title = formData.title,
      createdAt = formData.createdAt,
      updatedAt = formData.updatedAt,
      deletedAt = formData.deletedAt;
  var currentId = formContext.currentId,
      onExpand = formContext.onExpand,
      onCollapse = formContext.onCollapse,
      onSelect = formContext.onSelect,
      onLocale = formContext.onLocale,
      onSubmit = formContext.onSubmit;

  var _useTranslation = useTranslation(['editor']),
      t = _useTranslation.t,
      i18n = _useTranslation.i18n;

  var getPrimaryAction = function getPrimaryAction() {
    if (isLoading) {
      return {
        label: t("Loading") + " ...",
        disabled: true
      };
    } else if (isSaving) {
      return {
        label: t("Saving") + " ...",
        disabled: true
      };
    }

    var primary = {
      role: "group",
      children: [{
        label: t("Save as draft"),
        onClick: function onClick() {
          return onSubmit('draft');
        }
      }, {
        label: t("Save and publish"),
        onClick: function onClick() {
          return onSubmit('publish');
        }
      }]
    };
    var secondary = {
      role: "group",
      children: [{
        label: t("Save and exit")
      }]
    };

    if (uniqueId) {
      secondary.children.push({
        label: t("Save as") + " ..."
      });
    }

    return {
      type: "save",
      label: t("Save"),
      onClick: function onClick() {
        return onSubmit();
      },
      children: [primary, secondary]
    };
  }; // primary + secondary actions


  var primaryAction = formContext.primaryAction || getPrimaryAction(); // toggle fieldset

  var uiOptions = getUiOptions(uiSchema);
  var fieldset = uiOptions.fieldset;
  var idPrefix = idSchema && idSchema.$id;
  var primaryId = fieldset && fieldset[0] && idPrefix + "_" + fieldset[0];
  var secondaryId = fieldset && fieldset[1] && idPrefix + "_" + fieldset[1];
  var expanded = secondaryId && currentId && currentId.startsWith(secondaryId);

  var _onToggle = function _onToggle() {
    if (!expanded) {
      secondaryId && onExpand && onExpand({
        id: secondaryId
      });
    } else {
      primaryId && onExpand && onExpand({
        id: ""
      });
    }
  };

  var defaultLocale = formContext.defaultLocale || formContext.languages && formContext.languages[0];

  var _useState = useState(defaultLocale),
      currentLocale = _useState[0],
      setCurrentLocale = _useState[1];

  var _onLocale = function _onLocale(locale) {
    onLocale && onLocale(locale);
    setCurrentLocale(locale);
  };

  var newUiSchema = _extends({}, uiSchema, {
    "ui:title": title,
    "ui:expanded": expanded,
    "ui:primaryAction": primaryAction,
    "ui:status": status,
    "ui:statusDate": updatedAt || createdAt || deletedAt,
    "ui:statusCode": statusCode,
    "ui:statusMessage": statusMessage,
    "ui:layout": "pageEditor",
    "ui:onSelect": function uiOnSelect(item) {
      return onSelect(item);
    },
    "ui:currentLocale": currentLocale,
    "ui:onLocale": function uiOnLocale(locale) {
      return _onLocale(locale);
    },
    "ui:onToggle": function uiOnToggle() {
      return _onToggle();
    }
  });

  var ObjectField = registry.fields.ObjectField;

  var newRegistry = _extends({}, registry, {
    formContext: _extends({}, formContext, {
      currentLocale: currentLocale
    })
  });

  return /*#__PURE__*/React.createElement(ObjectField, _extends({}, props, {
    registry: newRegistry,
    uiSchema: newUiSchema
  }));
};

export default PageEditorField;