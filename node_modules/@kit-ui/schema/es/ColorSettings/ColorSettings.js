import React, { forwardRef, useState, useEffect, useRef } from 'react';
import PropTypes from "prop-types";
import { Dropdown } from "@kit-ui/core";
import tinycolor from 'tinycolor2';
import IconButton from '@material-ui/core/IconButton';
import ColorPicker from "./ColorSettingsPicker";
import ColorIcon from "./ColorSettingsIcon";

var ColorSettings = function ColorSettings(_ref) {
  var variant = _ref.variant,
      backgroundColor = _ref.backgroundColor,
      colors = _ref.colors,
      value = _ref.value,
      onChange = _ref.onChange;

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onChange = function _onChange(_ref2) {
    var hex = _ref2.hex;
    onChange && onChange(hex);
  };

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  }; // color swatches


  if (!value && colors.length) {
    value = colors[0];
  } // color + contrast


  var primaryColor = tinycolor(value);
  var color = primaryColor.toHexString();
  var contrastColor = primaryColor.isLight() && "black" || "white"; // variant

  if (variant === "text") {
    backgroundColor = backgroundColor || contrastColor;
  } else {
    backgroundColor = color;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    ref: anchorRef,
    onClick: _onToggle
  }, /*#__PURE__*/React.createElement(ColorIcon, {
    variant: variant,
    backgroundColor: backgroundColor,
    color: color
  })), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    backgroundColor: backgroundColor,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(ColorPicker, {
    variant: variant,
    backgroundColor: backgroundColor,
    color: color,
    colors: colors,
    onChange: _onChange
  })));
};

ColorSettings.defaultProps = {
  variant: "default",
  value: "#666"
};
ColorSettings.propTypes = process.env.NODE_ENV !== "production" ? {
  value: PropTypes.string,
  colors: PropTypes.array
} : {};
export default ColorSettings;