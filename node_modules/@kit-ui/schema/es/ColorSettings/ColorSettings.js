function _readOnlyError(name) { throw new Error("\"" + name + "\" is read-only"); }

import React, { forwardRef, useState, useEffect, useRef } from 'react';
import PropTypes from "prop-types";
import { Dropdown } from "@kit-ui/core";
import ColorPicker from "./ColorPicker";
import tinycolor from 'tinycolor2';
import IconButton from '@material-ui/core/IconButton';
import ColorIcon from "@material-ui/icons/Lens";
import Button from '@material-ui/core/Button';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    icon: {
      //        backgroundColor: props => { return props.backgroundColor },
      color: function color(props) {
        return props.color;
      }
    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: '0.75em',
      fontWeight: "bold",
      lineHeight: '1',
      textAlign: "center"
    }
  };
});

var ColorSettings = function ColorSettings(props) {
  var value = props.value,
      options = props.options,
      onChange = props.onChange;
  var variant = options.variant,
      enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onChange = function _onChange(_ref) {
    var hex = _ref.hex;
    onChange && onChange(hex);
  };

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  }; // color swatches


  var colors = enumOptions.length && enumOptions.map(function (_ref2, index) {
    var value = _ref2.value;
    return value;
  });

  if (!value && colors.length) {
    value = (_readOnlyError("value"), colors[0]);
  } // color + contrast


  var primaryColor = tinycolor(value);
  var color = primaryColor.toHexString();
  var contrastColor = primaryColor.isLight() && "black" || "white";
  var backgroundColor;

  if (variant === "text") {
    backgroundColor = options.backgroundColor || contrastColor;
  } else {
    backgroundColor = color;
  }

  var classes = useStyles({
    backgroundColor: backgroundColor,
    color: color,
    contrastColor: contrastColor
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    ref: anchorRef,
    onClick: _onToggle
  }, /*#__PURE__*/React.createElement(ColorIcon, {
    className: classes.icon
  })), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    backgroundColor: backgroundColor,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(ColorPicker, {
    backgroundColor: backgroundColor,
    color: color,
    colors: colors,
    onChange: _onChange
  })));
};

ColorSettings.defaultProps = {
  value: "#666"
};
ColorSettings.propTypes = process.env.NODE_ENV !== "production" ? {
  value: PropTypes.string,
  options: PropTypes.array
} : {};
export default ColorSettings;