function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import { getArrayButtons, getUiToolbar, getUiOptions } from '../utils';

var NormalArrayFieldTemplate = function NormalArrayFieldTemplate(props) {
  var uiOptions = getUiOptions(props.uiSchema || {});
  var _props$registry$field = props.registry.fields,
      LayoutField = _props$registry$field.LayoutField,
      ArrayLayout = _props$registry$field.ArrayLayout,
      ArrayItemLayout = _props$registry$field.ArrayItemLayout;

  var uiSchema = _extends({}, props.uiSchema, {
    "ui:buttons": getArrayButtons(props),
    "ui:layout": uiOptions.layout || ArrayLayout
  });

  var renderItem = function renderItem(item, index) {
    var hasToolbar = item.hasToolbar,
        hasMoveUp = item.hasMoveUp,
        hasMoveDown = item.hasMoveDown,
        hasRemove = item.hasRemove;
    var onAddIndexClick = item.onAddIndexClick,
        onDropIndexClick = item.onDropIndexClick,
        onReorderClick = item.onReorderClick;
    var itemUiSchema = item.children.props && item.children.props.uiSchema || {};

    var uiSchema = _extends({}, itemUiSchema, {
      "ui:removable": hasRemove
    });

    var itemProps = _extends({}, item.children.props, {
      formContext: props.formContext,
      hasToolbar: hasToolbar,
      hasMoveUp: hasMoveUp,
      hasMoveDown: hasMoveDown,
      hasRemove: hasRemove,
      onAddIndexClick: onAddIndexClick,
      onDropIndexClick: onDropIndexClick,
      onReorderClick: onReorderClick
    });

    var uiOptions = getUiOptions(uiSchema || {});
    var uiToolbar = getUiToolbar(_extends({}, itemProps, {
      "uiSchema": uiSchema
    }));
    var arrayItem = React.cloneElement(item.children, _extends({}, itemProps, {
      uiSchema: _extends({}, uiSchema, {
        "ui:toolbar": uiToolbar,
        "ui:layout": uiOptions.layout || ArrayItemLayout
      })
    }));
    return arrayItem;
  };

  return /*#__PURE__*/React.createElement(LayoutField, _extends({}, props, {
    uiSchema: uiSchema
  }), props.items && props.items.map(function (item) {
    return renderItem(item);
  }));
};

export default NormalArrayFieldTemplate;