function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { getUiOptions, retrieveSchema, getDefaultFormState, toIdSchema } from './';
import _ from "lodash";
export function getUiFieldset(props) {
  var idSchema = props.idSchema,
      idPrefix = props.idPrefix,
      schema = props.schema,
      uiSchema = props.uiSchema,
      formData = props.formData,
      formContext = props.formContext;
  var rootSchema = props.registry.rootSchema;
  var currentId = formContext && formContext.currentId;
  var uiOptions = getUiOptions(uiSchema);
  var fieldset = uiOptions.fieldset;

  if (!fieldset) {
    return false;
  }

  var uiFieldset = [];

  var getFieldByName = function getFieldByName(name) {
    var fieldSchema = schema && schema.properties && schema.properties[name] && retrieveSchema(schema.properties[name], props.registry.definitions, formData && formData[name]);
    var fieldFormData = fieldSchema && formData && formData[name] && getDefaultFormState(fieldSchema, formData && formData[name]);
    var fieldUiSchema = uiSchema && uiSchema[name] || {};
    var fieldUiOptions = fieldUiSchema && getUiOptions(fieldUiSchema);
    var fieldIdPrefix = idSchema.$id + "_" + name;
    var fieldSelected = currentId && currentId.startsWith(fieldIdPrefix);

    if (fieldSchema) {
      var fieldIdSchema = toIdSchema(fieldSchema, fieldIdPrefix, rootSchema, fieldFormData, idPrefix);
      return _extends({}, props, {
        idPrefix: fieldIdPrefix,
        idSchema: fieldIdSchema,
        name: name,
        schema: fieldSchema,
        uiSchema: _extends({}, fieldUiSchema, {
          "ui:selected": fieldSelected
        }),
        uiOptions: fieldUiOptions,
        formData: fieldFormData,
        onChange: function onChange(value) {
          var _extends2;

          return props.onChange(_extends({}, formData, (_extends2 = {}, _extends2[name] = value, _extends2)));
        }
      });
    }

    if (fieldUiSchema && fieldUiOptions.fieldset) {
      var _fieldIdSchema = toIdSchema(schema, fieldIdPrefix, rootSchema, formData, idPrefix);

      return _extends({}, props, {
        idPrefix: fieldIdPrefix,
        idSchema: _fieldIdSchema,
        name: name,
        schema: schema,
        uiSchema: _extends({}, fieldUiSchema, {
          "ui:selected": fieldSelected
        }),
        uiOptions: fieldUiOptions,
        formData: formData
      });
    }
  };

  var selected;
  fieldset.map(function (name, index) {
    var field = getFieldByName(name);

    if (field) {
      uiFieldset.push(field);

      if (field.uiSchema["ui:selected"]) {
        selected = true;
      }
    }
  });

  if (uiFieldset[0] && !selected) {
    uiFieldset[0].uiSchema = _extends({}, uiFieldset[0].uiSchema, {
      "ui:selected": true
    });
  }

  return uiFieldset;
}
export default getUiFieldset;