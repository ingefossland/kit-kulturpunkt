function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { getUiOptions } from './';
export var getUploadButton = function getUploadButton(_ref) {
  var schema = _ref.schema,
      button = _ref.button,
      onUpload = _ref.onUpload;
  var itemSchema, multiple;

  if (schema.type === "array") {
    multiple = true;
    itemSchema = schema.items;
  } else {
    multiple = false;
    itemSchema = schema;
  }

  if (!itemSchema || !itemSchema.properties) {
    return {
      title: "failed"
    };
  }

  var mediaType;

  if (itemSchema.properties.media && itemSchema.properties.media.properties && itemSchema.properties.media.properties.mediaType && itemSchema.properties.media.properties.mediaType.default) {
    mediaType = itemSchema.properties.media.properties.mediaType.default;
  }

  var accept = button.accept || undefined;

  if (!accept && mediaType) {
    if (mediaType === "image") {
      accept = "image/*";
    }

    if (mediaType === "video") {
      accept = "video/*";
    }

    if (mediaType === "audio") {
      accept = "audio/*";
    }
  }

  if (!onUpload) {
    return _extends({}, button, {
      disabled: true
    });
  }

  return _extends({}, button, {
    type: "upload",
    accept: accept,
    multiple: multiple,
    onUpload: onUpload
  });
};
export var getDialogButton = function getDialogButton(_ref2) {
  var schema = _ref2.schema,
      button = _ref2.button,
      onDialog = _ref2.onDialog,
      type = _ref2.type,
      registry = _ref2.registry,
      props = _objectWithoutPropertiesLoose(_ref2, ["schema", "button", "onDialog", "type", "registry"]);

  var itemSchema;

  if (schema.type === "array") {
    itemSchema = schema.items;
  } else {
    itemSchema = schema;
  }

  if (!onDialog) {
    return _extends({}, button, {
      disabled: true
    });
  }

  return _extends({}, button, {
    onClick: function onClick(event) {
      return onDialog(event, button);
    }
  });
};
export var getButton = function getButton(_ref3) {
  var schema = _ref3.schema,
      button = _ref3.button,
      onAdd = _ref3.onAdd,
      onUpload = _ref3.onUpload,
      onDialog = _ref3.onDialog,
      onSave = _ref3.onSave,
      onRemove = _ref3.onRemove,
      onDelete = _ref3.onDelete,
      onRestore = _ref3.onRestore,
      props = _objectWithoutPropertiesLoose(_ref3, ["schema", "button", "onAdd", "onUpload", "onDialog", "onSave", "onRemove", "onDelete", "onRestore"]);

  if (typeof button === "string") {
    button = {
      type: button,
      title: button.charAt(0).toUpperCase() + button.slice(1)
    };
  }

  var _button = button,
      type = _button.type,
      item = _button.item,
      onClick = _button.onClick;

  if (onClick) {
    return button;
  }

  if (type === "upload") {
    button = getUploadButton(_extends({
      schema: schema,
      button: button,
      onUpload: onUpload
    }, props));
  } else if (type === "save") {
    button = _extends({}, button, {
      onClick: function onClick() {
        return onSave();
      }
    });
    /*
     } else if (type === "remove") {
        button = {
            ...button,
            onClick: () => onRemove()
        }
     */
  } else if (type === "delete") {
    button = _extends({}, button, {
      onClick: function onClick() {
        return onDelete();
      }
    });
  } else if (type === "restore") {
    button = _extends({}, button, {
      onClick: function onClick() {
        return onRestore();
      }
    });
  } else if (type && type.startsWith("dialog") || type && type.startsWith("sidebar")) {
    button = getDialogButton(_extends({
      schema: schema,
      button: button,
      onDialog: onDialog,
      type: type
    }, props));
  } else if (onAdd && item) {
    button = _extends({}, button, {
      onClick: function onClick() {
        return onAdd(item);
      }
    });
  } else if (onAdd) {
    button = _extends({}, button, {
      onClick: function onClick() {
        return onAdd();
      }
    });
  }

  return button;
};
export var getArrayButtons = function getArrayButtons(_ref4) {
  var _ref4$buttons = _ref4.buttons,
      buttons = _ref4$buttons === void 0 ? [] : _ref4$buttons,
      canAdd = _ref4.canAdd,
      onAddItem = _ref4.onAddItem,
      props = _objectWithoutPropertiesLoose(_ref4, ["buttons", "canAdd", "onAddItem"]);

  if (!canAdd) {
    return false;
  }

  var uiButtons = [];
  var onAdd = canAdd && onAddItem;

  if (buttons && buttons.length) {
    uiButtons = buttons.map(function (button) {
      return getButton(_extends({
        button: button,
        onAdd: onAdd
      }, props));
    });
  } else if (onAdd) {
    buttons = ["add"];
    uiButtons = buttons.map(function (button) {
      return getButton(_extends({
        button: button,
        onAdd: onAdd
      }, props));
    });
  }

  return uiButtons;
};
export var getObjectButtons = function getObjectButtons(_ref5) {
  var _ref5$buttons = _ref5.buttons,
      buttons = _ref5$buttons === void 0 ? [] : _ref5$buttons,
      onChange = _ref5.onChange,
      props = _objectWithoutPropertiesLoose(_ref5, ["buttons", "onChange"]);

  var uiButtons = [];
  var onAdd = onChange;

  if (buttons && buttons.length) {
    uiButtons = buttons.map(function (button) {
      return getButton(_extends({
        button: button,
        onAdd: onAdd
      }, props));
    });
  } else if (props.editable) {
    buttons = ["save"];
    uiButtons = buttons.map(function (button) {
      return getButton(_extends({
        button: button,
        onAdd: onAdd
      }, props));
    });
  }

  return uiButtons;
};
export var getUiButtons = function getUiButtons(_ref6) {
  var _ref6$schema = _ref6.schema,
      schema = _ref6$schema === void 0 ? {} : _ref6$schema,
      props = _objectWithoutPropertiesLoose(_ref6, ["schema"]);

  var id = props.id,
      uiSchema = props.uiSchema,
      formContext = props.formContext;
  var currentId = formContext && formContext.currentId;

  var _getUiOptions = getUiOptions(uiSchema),
      buttons = _getUiOptions.buttons,
      editable = _getUiOptions.editable,
      nav = _getUiOptions.nav; // dont show button if we're editing a child, unless there is navigation involved


  if (!nav && currentId && id && currentId !== id && currentId.includes(id)) {
    return false;
  }

  if (schema.type === "array") {
    return getArrayButtons(_extends({
      schema: schema,
      buttons: buttons
    }, props));
  }

  if (schema.type === "object") {
    return getObjectButtons(_extends({
      schema: schema,
      buttons: buttons,
      editable: editable
    }, props));
  }
};
export default getUiButtons;