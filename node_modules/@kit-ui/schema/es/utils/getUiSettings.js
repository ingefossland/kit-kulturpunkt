function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import { getUiOptions, getUiActions } from ".";
export var getUiSettings = function getUiSettings(props) {
  var id = props.id,
      schema = props.schema,
      uiSchema = props.uiSchema,
      formData = props.formData,
      registry = props.registry;
  var uiOptions = getUiOptions(uiSchema);
  var settings = uiOptions && uiOptions.settings;

  if (!settings) {
    return undefined;
  }

  var uiActions = getUiActions(props);
  var onPropertyChange = uiActions.onPropertyChange;
  var SettingsField = registry.fields.SettingsField;

  var SettingsTemplate = function SettingsTemplate(props) {
    return /*#__PURE__*/React.createElement(SettingsField, _extends({}, props, {
      registry: registry
    }));
  };

  var uiSettings = [];
  settings.map(function (name) {
    if (typeof name === "string" && schema.properties[name]) {
      var itemId = id + '_settings_' + name;
      var itemSchema = schema.properties[name] || {};
      var itemUiSchema = uiSchema[name] || {};
      var itemFormData = formData[name] || undefined;
      uiSettings.push({
        id: itemId,
        name: name,
        schema: itemSchema,
        uiSchema: itemUiSchema,
        formData: itemFormData,
        template: SettingsTemplate,
        onChange: function onChange(value) {
          return onPropertyChange(name, value);
        }
      });
    }
  });
  return uiSettings;
};
export default getUiSettings;