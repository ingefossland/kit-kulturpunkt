import { getUiOptions, getUiLayout, getUiActions, getArrayItemToolbar } from ".";

var getVisibilityOptions = function getVisibilityOptions(props) {
  var uiLayout = getUiLayout(props);
  var uiActions = getUiActions(props);
  var hideable = uiLayout.hideable,
      hidden = uiLayout.hidden,
      deletable = uiLayout.deletable,
      deleted = uiLayout.deleted,
      restorable = uiLayout.restorable,
      restored = uiLayout.restored,
      removable = uiLayout.removable;
  var onHide = uiActions.onHide,
      onUnhide = uiActions.onUnhide,
      onDelete = uiActions.onDelete,
      onRestore = uiActions.onRestore,
      onRemove = uiActions.onRemove; // hideable

  var options = [];

  if (hideable) {
    options.push({
      name: "hidden",
      icon: "visibility",
      title: "Visible",
      onClick: onUnhide
    });
    options.push({
      name: "hidden",
      icon: "visibility_off",
      title: "Hidden",
      onClick: onHide
    });
  } // deletable && restorable


  if (deletable && restorable) {
    if (deleted) {
      options.push({
        type: "button",
        variant: "outlined",
        name: "restore",
        title: "Restore",
        onClick: onRestore
      });
    } else {
      options.push({
        type: "button",
        variant: "outlined",
        name: "delete",
        title: "Delete",
        onClick: onDelete
      });
    } // deletable

  } else if (deletable && onDelete) {
    options.push({
      type: "button",
      variant: "outlined",
      name: "remove",
      title: "Delete",
      onClick: onDelete
    }); // removable
  } else if (removable) {
    if (props.hasRemove) {
      options.push({
        type: "button",
        variant: "outlined",
        name: "remove",
        title: "Remove",
        onClick: props.onDropIndexClick(props.index)
      });
    } else {
      options.push({
        type: "button",
        variant: "outlined",
        name: "remove",
        title: "Remove",
        onClick: onRemove
      });
    }
  } // set icon


  var icon;

  if (deleted && restorable) {
    icon = "restore";
  } else if (deleted) {
    icon = "delete";
  } else if (hidden) {
    icon = "visibility_off";
  } else {
    icon = "visibility";
  }

  return {
    name: "visibility",
    icon: icon,
    options: options
  };
};

var getVisibilityToolbar = function getVisibilityToolbar(props, toolbar) {
  if (toolbar === void 0) {
    toolbar = [];
  }

  var uiLayout = getUiLayout(props);
  var uiActions = getUiActions(props);
  var hideable = uiLayout.hideable,
      hidden = uiLayout.hidden,
      deletable = uiLayout.deletable,
      deleted = uiLayout.deleted,
      restorable = uiLayout.restorable,
      restored = uiLayout.restored,
      addable = uiLayout.addable,
      removable = uiLayout.removable;
  var onHide = uiActions.onHide,
      onUnhide = uiActions.onUnhide,
      onDelete = uiActions.onDelete,
      onRestore = uiActions.onRestore,
      onRemove = uiActions.onRemove; // restore

  if (deletable && deleted && restorable) {
    toolbar = [];
    toolbar.push({
      name: "restore",
      icon: "restore",
      onClick: onRestore
    });
    return toolbar; // hideable => visibility options
  } else if (hideable && (deletable || restorable || removable)) {
    var visibility = getVisibilityOptions(props, toolbar);
    toolbar.push(visibility); // hideable
  } else if (hideable && hidden) {
    toolbar.push({
      name: "hidden",
      icon: "visibility_off",
      onClick: onUnhide
    });
  } else if (hideable) {
    toolbar.push({
      name: "hidden",
      icon: "visibility",
      onClick: onHide
    }); // deletable
  } else if (deletable) {
    toolbar.push({
      name: "delete",
      icon: "delete",
      onClick: onDelete
    }); // removable
  } else if (removable) {
    if (props.hasRemove) {
      toolbar.push({
        name: "remove",
        icon: "remove_circle",
        onClick: props.onDropIndexClick(props.index)
      });
    } else {
      toolbar.push({
        name: "remove",
        icon: "remove_circle",
        onClick: onRemove
      });
    }
  }

  return toolbar;
};

var getEditableToolbar = function getEditableToolbar(props, toolbar) {
  if (toolbar === void 0) {
    toolbar = [];
  }

  var uiLayout = getUiLayout(props);
  var uiActions = getUiActions(props);
  var editable = uiLayout.editable,
      editing = uiLayout.editing;
  var onExpand = uiActions.onExpand,
      onCollapse = uiActions.onCollapse;

  if (editable && editing) {
    toolbar.unshift({
      label: "Save",
      onClick: onCollapse
    });
  } else if (editable) {
    toolbar.unshift({
      icon: "edit",
      onClick: onExpand
    });
  }

  return toolbar;
};

export var getUiToolbar = function getUiToolbar(props) {
  var uiSchema = props.uiSchema;
  var uiOptions = getUiOptions(uiSchema || {}); // toolbar created before, for example from arrayItem

  if (uiOptions.toolbar) {
    return uiOptions.toolbar;
  }

  var toolbar = uiOptions.toolbar || [];
  toolbar = getArrayItemToolbar(props, toolbar);
  toolbar = getEditableToolbar(props, toolbar);
  toolbar = getVisibilityToolbar(props, toolbar);
  return toolbar;
};
export default getUiToolbar;