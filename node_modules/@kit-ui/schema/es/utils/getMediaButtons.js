function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { getUiOptions } from './';
export var getMediaButtons = function getMediaButtons(props) {
  var formContext = props.formContext,
      idSchema = props.idSchema;

  var buttonProps = _extends({}, props, {
    id: idSchema && idSchema.$id
  });

  var uiOptions = getUiOptions(props.uiSchema);
  var dialog = uiOptions.dialog,
      upload = uiOptions.upload,
      buttons = uiOptions.buttons;
  var onDialog = formContext.onDialog,
      onUpload = formContext.onUpload;
  var uiButtons = []; // ui buttons

  if (buttons) {
    buttons.map(function (button) {
      if (typeof button === "string") {
        button = {
          type: button,
          title: button.charAt(0).toUpperCase() + button.slice(1)
        };
      }

      var _button = button,
          _button$type = _button.type,
          type = _button$type === void 0 ? "button" : _button$type,
          item = _button.item;

      if (type === "dialog" || type === "sidebar") {
        button.onClick = function () {
          return onDialog && onDialog(buttonProps);
        };
      } else if (type === "upload") {
        button.onClick = function () {
          return onUpload && onUpload(buttonProps);
        };
      }

      button = _extends({}, button, {
        type: "button",
        disabled: props.disabled || props.readonly
      });
      uiButtons.push(button);
    }); // dialog + upload
  } else if (dialog || upload) {
    if (dialog) {
      uiButtons.push({
        title: "Dialog",
        onClick: function onClick() {
          return onDialog && onDialog(buttonProps);
        },
        disabled: props.disabled || props.readonly
      });
    }

    if (upload) {
      uiButtons.push({
        title: "Upload",
        onClick: function onClick() {
          return onUpload && onUpload(buttonProps);
        },
        disabled: props.disabled || props.readonly
      });
    }
  }

  return uiButtons;
};
export default getMediaButtons;