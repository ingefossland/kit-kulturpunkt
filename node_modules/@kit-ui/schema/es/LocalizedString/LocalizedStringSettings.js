function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useState, useEffect, useRef } from 'react';
import PropTypes from "prop-types";
import { Dropdown } from "@kit-ui/core";
import { getUiOptions, getDefaultFormState } from "../utils";
import IconButton from "@material-ui/core/IconButton";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    button: {},
    icon: {
      width: 20,
      height: 20,
      //        borderRadius: "50%",
      border: "1px solid",
      borderColor: theme.palette.divider,
      display: "flex",
      justifyContent: "center",
      alignItems: "center" //        boxShadow: theme.shadows[1]

    },
    label: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: 11,
      textTransform: "uppercase",
      fontWeight: "bold",
      lineHeight: '1',
      textAlign: "center"
    }
  };
});

var LocalizedStringSettings = function LocalizedStringSettings(props) {
  var formContext = props.formContext;
  var languages = formContext.languages || ["en"];
  var defaultLocale = formContext.defaultLocale || languages[0];
  var currentLocale = formContext.currentLocale || defaultLocale;

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var classes = useStyles();
  var ObjectField = props.registry.fields.ObjectField;
  var uiSchema = {
    "ui:options": {
      "padding": 2,
      "spacing": 2
    }
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    className: classes.button,
    onClick: _onToggle,
    ref: anchorRef
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.icon
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.label
  }, currentLocale))), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(ObjectField, _extends({}, props, {
    uiSchema: uiSchema
  }))));
};

LocalizedStringSettings.defaultProps = {};
LocalizedStringSettings.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
export default LocalizedStringSettings;