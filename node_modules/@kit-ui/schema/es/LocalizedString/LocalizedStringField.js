function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { Component } from 'react';
import { getUiOptions, getDefaultFormState } from "../utils";
import LocalizedStringLayout from "./LocalizedStringLayout";
import LocalizedStringSettings from "./LocalizedStringSettings";
/** Localized string  */

var LocalizedStringField = function LocalizedStringField(props) {
  var schema = props.schema,
      uiSchema = props.uiSchema,
      formContext = props.formContext;
  var uiOptions = getUiOptions(uiSchema);
  var languages = formContext.languages || ["en"];
  var defaultLocale = formContext.defaultLocale || languages[0];
  var currentLocale = formContext.currentLocale || defaultLocale;

  var getUiSchema = function getUiSchema() {
    var localizedUiSchema = {
      "ui:fieldset": ["locale:" + currentLocale]
    };
    Object.keys(schema.properties).map(function (name) {
      var localeProps = name.split(':');
      var locale = localeProps[1];
      var title = uiOptions.title && uiOptions.title + ":" + locale;
      var help = uiOptions.help;
      localizedUiSchema[name] = {
        "ui:options": {
          "placeholder": uiOptions.placeholder,
          "widget": uiOptions.widget || "text",
          "title": title,
          "language": locale,
          "help": help,
          "endAdornment": /*#__PURE__*/React.createElement(LocalizedStringSettings, props)
        }
      };
    });
    return _extends({}, localizedUiSchema, {
      "ui:layout": LocalizedStringLayout,
      "ui:collapsible": true,
      "ui:expanded": false
    });
  };

  var ObjectField = props.registry.fields.ObjectField;
  var newUiSchema = getUiSchema();
  return /*#__PURE__*/React.createElement(ObjectField, _extends({}, props, {
    uiSchema: newUiSchema
  }));
};

export default LocalizedStringField;