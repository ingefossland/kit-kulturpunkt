function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useRef } from 'react';
import PropTypes from "prop-types";
import { Dropdown } from "@kit-ui/core";
import ButtonBase from '@material-ui/core/ButtonBase';
import ListOptions from "./ListOptions";
import { makeStyles } from '@material-ui/core/styles';
import { utils } from "@rjsf/core";
var getUiOptions = utils.getUiOptions;
var useStyles = makeStyles(function (theme) {
  return {
    button: {
      padding: theme.spacing(1.5),
      fontFamily: "Akkurat, sans-serif",
      fontSize: 12,
      fontWeight: "bold",
      lineHeight: 1
    }
  };
});

var ListSettings = function ListSettings(_ref) {
  var value = _ref.value,
      options = _ref.options,
      uiSchema = _ref.uiSchema,
      onChange = _ref.onChange;
  var uiOptions = getUiOptions(uiSchema);
  var enumOptions = options.enumOptions.map(function (option) {
    var icon = uiOptions.enumIcons && uiOptions.enumIcons[option.value];
    return _extends({}, option, {
      icon: icon
    });
  });

  if (!value) {
    value = enumOptions[0].value;
  }

  var label;
  enumOptions.map(function (option) {
    if (option.value === value) {
      label = option.label;
    }
  });

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onChange = function _onChange(value) {
    onChange && onChange(value);
    setExpanded(false);
  };

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var classes = useStyles();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.button,
    onClick: _onToggle,
    ref: anchorRef
  }, label || value), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(ListOptions, {
    options: uiOptions.enumOptions || enumOptions,
    onChange: _onChange
  })));
};

ListSettings.defaultProps = {};
ListSettings.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
export default ListSettings;