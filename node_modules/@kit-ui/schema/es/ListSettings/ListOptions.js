function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useState, useEffect, useRef } from 'react';
import PropTypes from "prop-types";
import Icon from "@material-ui/core/Icon";
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    button: {}
  };
});

var ListSettingsOptions = function ListSettingsOptions(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange;

  var _onSelect = function _onSelect(value) {
    onChange && onChange(value);
  };

  var ListOption = function ListOption(option) {
    var icon = option.icon,
        label = option.label,
        value = option.value;
    return /*#__PURE__*/React.createElement(ListItem, {
      button: true,
      onClick: function onClick() {
        return _onSelect(value);
      }
    }, icon && /*#__PURE__*/React.createElement(ListItemIcon, null, /*#__PURE__*/React.createElement(Icon, null, icon)), /*#__PURE__*/React.createElement(ListItemText, {
      primary: label || value
    }));
  };

  var classes = useStyles();
  return /*#__PURE__*/React.createElement(List, null, options && options.map(function (option, index) {
    return /*#__PURE__*/React.createElement(ListOption, _extends({}, option, {
      key: index
    }));
  }));
};

ListSettingsOptions.defaultProps = {};
ListSettingsOptions.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
export default ListSettingsOptions;