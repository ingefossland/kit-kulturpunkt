function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useEffect } from "react";
import model from "./RRulesField.model";
import { getRRuleFromFormData, getFormDataFromRRule } from "./utils";
import { utils } from "@rjsf/core";
var getUiOptions = utils.getUiOptions,
    getDefaultFormState = utils.getDefaultFormState;

var RRulesField = function RRulesField(props) {
  var schema = _extends({}, model.schema, props.schema);

  var uiSchema = _extends({}, model.uiSchema, props.uiSchema);

  var getFormData = function getFormData(formData) {
    if (props.schema.type === "string") {
      return getFormDataFromRRule(formData);
    } else {
      return getDefaultFormState(schema, formData);
    }
  };

  var _useState = useState(getFormData(props.formData)),
      formData = _useState[0],
      setFormData = _useState[1]; // onChange


  var _onChange = function _onChange(formData) {
    setFormData(formData);

    if (props.schema.type === "string") {
      props.onChange(getRRuleFromFormData(formData));
    } else {
      props.onChange(formData);
    }
  }; // formData


  var ObjectField = props.registry.fields.ObjectField;
  return /*#__PURE__*/React.createElement(ObjectField, _extends({}, props, {
    formData: formData,
    schema: schema,
    uiSchema: uiSchema,
    onChange: _onChange
  }));
};

RRulesField.defaultProps = {
  formData: {}
};
export default RRulesField;