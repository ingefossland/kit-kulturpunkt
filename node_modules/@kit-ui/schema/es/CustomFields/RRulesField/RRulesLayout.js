function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from "prop-types";
import FormLabel from "@material-ui/core/FormLabel";
import FormGroup from "@material-ui/core/FormGroup";
var useStyles = makeStyles(function (theme) {
  return {
    fieldset: {
      display: "flex",
      flexDirection: "column",
      border: "1px solid",
      borderColor: theme.palette.divider,
      padding: function padding(props) {
        return theme.spacing(props.padding);
      },
      margin: function margin(props) {
        return theme.spacing(props.spacing * -1 / 2);
      },
      "& > *": {
        margin: function margin(props) {
          return theme.spacing(props.spacing * 1 / 2);
        }
      }
    },
    header: {}
  };
});

var RRulesLayout = function RRulesLayout(_ref) {
  var title = _ref.title,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["title", "children"]);

  var classes = useStyles(props);

  if (!children) {
    return false;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: classes.fieldset
  }, title && /*#__PURE__*/React.createElement(FormLabel, {
    className: classes.header
  }, title), /*#__PURE__*/React.createElement(FormGroup, {
    row: true
  }, children));
};

RRulesLayout.propTypes = process.env.NODE_ENV !== "production" ? {
  expanded: PropTypes.bool,
  onToggle: PropTypes.func
} : {};
RRulesLayout.defaultProps = {
  position: "relative",
  padding: 2,
  collapsible: false,
  expanded: true
};
export default RRulesLayout;