function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getMeasureFromValue = function getMeasureFromValue(value) {
  var split = value && value.split("x") || [];
  var values = split && split.map(function (value, index) {
    return parseFloat(value);
  });
  var unitValue = split && split.length && split[split.length - 1];
  var unit = unitValue && unitValue.replace(/[0-9]/g, '');
  return {
    width: values && values[0],
    height: values && values[1],
    depth: values && values[2],
    unit: unit,
    value: value
  };
};

var getArrayItem = function getArrayItem(string) {
  var split = string && string.split(":");
  var name = split[0];
  var value = split[1];

  if (name && value) {
    return _extends({}, getMeasureFromValue(value), {
      name: name.trim()
    });
  } else {
    return getMeasureFromValue(string);
  }
};

export var getMeasureFromString = function getMeasureFromString(string) {
  if (string === void 0) {
    string = "";
  }

  var array = string && string.split(",") || [];
  return array.map(function (item) {
    return getArrayItem(item);
  });
};
export default getMeasureFromString;