import React, { forwardRef, useState, useEffect, useRef } from 'react';
import PropTypes from "prop-types";
import { Dropdown } from "@kit-ui/core";
import { makeStyles } from '@material-ui/core/styles';
import ButtonBase from '@material-ui/core/ButtonBase';
import SizeOptions from "./SizeOptions";
var useStyles = makeStyles(function (theme) {
  return {
    button: {
      padding: theme.spacing(1.5),
      fontFamily: "Akkurat, sans-serif",
      fontSize: 12,
      fontWeight: "bold",
      lineHeight: 1
    }
  };
});

var SizeSettings = function SizeSettings(_ref) {
  var value = _ref.value,
      options = _ref.options,
      onChange = _ref.onChange;
  var variant = options.variant,
      enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;

  if (!value) {
    value = enumOptions[0].value;
  }

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onChange = function _onChange(value) {
    onChange && onChange(value);
    setExpanded(false);
  };

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var maxRows = 4;
  var maxCols = 4;
  var classes = useStyles({
    cols: maxCols,
    rows: maxRows
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.button,
    onClick: _onToggle,
    ref: anchorRef
  }, value), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(SizeOptions, {
    options: enumOptions,
    onChange: _onChange
  })));
};

SizeSettings.defaultProps = {};
SizeSettings.propTypes = process.env.NODE_ENV !== "production" ? {} : {};
export default SizeSettings;