function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import { getUiOptions, getUiSettings, getDefaultFormState } from "../Schema/utils";

var FieldMedia = /*#__PURE__*/function (_Component) {
  _inheritsLoose(FieldMedia, _Component);

  function FieldMedia() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "onChange", function (formData) {
      var _this$props = _this.props,
          schema = _this$props.schema,
          defaultFormData = _this$props.defaultFormData;
      formData = getDefaultFormState(schema, _extends({}, defaultFormData, formData));

      var newFormData = _extends({}, formData);

      console.log('FieldMedia:onChange', newFormData);

      if (_this.props.onChange) {
        _this.props.onChange(newFormData);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onEditMedia", function () {
      var _this$props2 = _this.props,
          id = _this$props2.id,
          schema = _this$props2.schema,
          uiSchema = _this$props2.uiSchema,
          formData = _this$props2.formData,
          formContext = _this$props2.formContext,
          onChange = _this$props2.onChange;

      if (formContext.onEditMedia) {
        formContext.onEditMedia({
          id: id,
          type: "media",
          schema: schema,
          uiSchema: uiSchema,
          formData: formData,
          onChange: onChange
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onCropdata", function (imageCropdata) {
      var formData = _this.props.formData;

      _this.props.onChange(_extends({}, formData, {
        imageCropdata: imageCropdata
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onFocalpoint", function (imageFocalpoint) {
      var formData = _this.props.formData;

      _this.props.onChange(_extends({}, formData, {
        imageFocalpoint: imageFocalpoint
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onFilters", function (imageFilters) {
      var formData = _this.props.formData;

      _this.props.onChange(_extends({}, formData, {
        imageFilters: imageFilters
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "onAnnotations", function (imageAnnotations) {
      var formData = _this.props.formData;

      _this.props.onChange(_extends({}, formData, {
        imageAnnotations: imageAnnotations
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "getUiPreview", function () {
      return {
        "select": {
          "type": "type",

          /*
          "media": "media",
          "mediaId": "mediaId",
          "uploadProgress": "uploadProgress",
          "mediaId": "mediaId",
          "media": "media",
          "imageCropdata": "imageCropdata",
          "imageFocalpoint": "imageFocalpoint",
          "imageFilters": "imageFilters",
          "imageAnnotations": "imageAnnotations",
          "imageUrl": "imageUrl",
          */
          "title": "title",
          "status": "status"
        },
        prepare: function prepare(_ref) {
          var formData = _ref.formData;
          var title = formData.title,
              uniqueId = formData.uniqueId,
              imageUrl = formData.imageUrl,
              status = formData.status,
              mediaType = formData.mediaType,
              media = formData.media,
              mediaId = formData.mediaId,
              imageCropdata = formData.imageCropdata,
              imageFocalpoint = formData.imageFocalpoint,
              imageFilters = formData.imageFilters,
              imageAnnotations = formData.imageAnnotations;
          return {
            type: media && media.mediaType || mediaType,
            title: media && media.title || title,
            status: media && media.status || status
          };
          return {
            type: media && media.mediaType || mediaType,
            status: media && media.status || status,
            media: media,
            mediaId: mediaId || uniqueId,
            uploadProgress: media && media.uploadProgress,
            title: media && media.title || title,
            imageUrl: media && media.imageUrl || imageUrl,
            imageCropdata: imageCropdata,
            imageFocalpoint: imageFocalpoint,
            imageFilters: imageFilters,
            imageAnnotations: imageAnnotations
          };
        }
      };
    });

    _defineProperty(_assertThisInitialized(_this), "getUiSchema", function () {
      var _this$props3 = _this.props,
          formData = _this$props3.formData,
          schema = _this$props3.schema,
          uiSchema = _this$props3.uiSchema,
          defaultOptions = _this$props3.defaultOptions;
      var uiOptions = getUiOptions(uiSchema);
      var fieldset = uiOptions.fieldset || [];

      if (!uiOptions.fieldset && schema.properties) {
        Object.keys(schema.properties).map(function (name) {
          var type = schema.properties[name] && schema.properties[name].type || undefined;

          if (type === "object") {
            fieldset.push(name);
          }

          if (type === "array") {
            fieldset.push(name);
          }
        });
      }

      var mediaId = formData && formData.mediaId;
      var media = formData && formData.media;
      var uiMediaProps = {
        "ui:mediaId": mediaId,
        "ui:media": media,
        "ui:uploadProgress": media && media.uploadProgress,
        "ui:mediaType": media && media.mediaType,
        "ui:resources": media && media.resources,
        "ui:imageUrl": media && media.imageUrl,
        "ui:imageCropdata": formData && formData.imageCropdata,
        "ui:imageFocalpoint": formData && formData.imageFocalpoint,
        "ui:imageFilters": formData && formData.imageFilters,
        "ui:imageAnnotations": formData && formData.imageAnnotations
      };
      var uiMedia, uiContent, uiCropdata, uiFocalpoint, uiFilters, uiAnnotations;

      if (fieldset && fieldset.includes('media')) {
        var uiSchemaMedia = uiSchema && uiSchema.media;
        uiMedia = _extends({
          "ui:title": "Preview",
          "ui:layout": "mediaPreview"
        }, uiMediaProps, uiSchemaMedia);
      }

      if (fieldset && fieldset.includes('content')) {
        var uiSchemaContent = uiSchema && uiSchema.content;
        uiContent = _extends({
          "ui:title": "Innhold",
          "ui:layout": "mediaContent"
        }, uiMediaProps, uiSchemaContent);
      }

      if (fieldset && fieldset.includes('imageCropdata')) {
        var uiSchemaCropdata = uiSchema && uiSchema.imageCropdata;
        uiCropdata = _extends({
          "ui:title": "Crop",
          "ui:layout": "imageCropper",
          "ui:onChange": function uiOnChange(cropdata) {
            return _this.onCropdata(cropdata);
          }
        }, uiMediaProps, uiSchemaCropdata);
      }

      if (fieldset && fieldset.includes('imageFocalpoint')) {
        var uiSchemaFocalpoint = uiSchema && uiSchema.imageFocalpoint;
        uiFocalpoint = _extends({
          "ui:title": "Focalpoint",
          "ui:layout": "imageFocalpoint",
          "ui:onChange": function uiOnChange(focalpoint) {
            return _this.onFocalpoint(focalpoint);
          }
        }, uiMediaProps, uiSchemaFocalpoint);
      }

      if (fieldset && fieldset.includes('imageFilters')) {
        var uiSchemaFilters = uiSchema && uiSchema.imageFilters;
        uiFilters = _extends({
          "ui:title": "Filters",
          "ui:layout": "imageFilters",
          "ui:onChange": function uiOnChange(filters) {
            return _this.onFilters(filters);
          }
        }, uiMediaProps, uiSchemaFilters);
      }

      if (fieldset && fieldset.includes('imageAnnotations')) {
        var uiSchemaAnnotations = uiSchema && uiSchema.imageAnnotations;
        uiAnnotations = _extends({
          "ui:title": "Annotations",
          "ui:layout": "imageAnnotations",
          "ui:onChange": function uiOnChange(annotations) {
            return _this.onAnnotations(annotations);
          }
        }, uiMediaProps, uiSchemaAnnotations);
      }

      if (fieldset.length) {
        uiOptions.nav = fieldset.length > 1 && true;
        uiOptions.fieldset = fieldset;
      } // buttons


      var uiButtons = uiOptions.buttons || ["save"] || [];

      if (formData && formData.mediaId) {
        uiButtons = [].concat(uiButtons, [{
          label: "Edit media",
          onClick: _this.onEditMedia
        }]);
      } else {
        /*
         uiButtons.push({
            label: "Edit media",
            disabled: "true"
        })
         */
      }

      return _extends({}, uiSchema, {
        "ui:options": _extends({}, defaultOptions, uiOptions)
      }, uiMediaProps, {
        "media": uiMedia,
        "content": uiContent,
        "imageCropdata": uiCropdata,
        "imageFocalpoint": uiFocalpoint,
        "imageFilters": uiFilters,
        "imageAnnotations": uiAnnotations,
        "ui:preview": _this.getUiPreview(),
        "ui:buttons": uiButtons
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getField", function () {
      var uiSchema = _this.getUiSchema();

      var _this$props4 = _this.props,
          defaultFormData = _this$props4.defaultFormData,
          formData = _this$props4.formData,
          schema = _this$props4.schema;
      formData = getDefaultFormState(schema, _extends({}, defaultFormData, formData));
      return _extends({}, _this.props, {
        formData: formData,
        uiSchema: uiSchema
      });
    });

    return _this;
  }

  var _proto = FieldMedia.prototype;

  _proto.render = function render() {
    var _this$getField = this.getField(),
        schema = _this$getField.schema,
        uiSchema = _this$getField.uiSchema,
        formData = _this$getField.formData,
        registry = _this$getField.registry;

    var ObjectField = registry.fields.ObjectField;
    return /*#__PURE__*/React.createElement(ObjectField, _extends({}, this.props, {
      schema: schema,
      uiSchema: uiSchema,
      formData: formData,
      onChange: this.onChange
    }));
  };

  return FieldMedia;
}(Component);

_defineProperty(FieldMedia, "defaultProps", {
  defaultFormData: {
    "mediaId": undefined,
    "media": {
      "mediaType": undefined
    }
  },
  defaultOptions: {
    "layout": "media",
    "minHeight": 256,
    "editable": true,
    "deletable": true,
    "upload": true
  }
});

export default FieldMedia;