function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import { getDefaultFormState } from "../utils/";
/** SchemaDialog example */

var SchemaDialog = function SchemaDialog(_ref) {
  var _ref$schema = _ref.schema,
      schema = _ref$schema === void 0 ? {} : _ref$schema,
      _ref$uiSchema = _ref.uiSchema,
      uiSchema = _ref$uiSchema === void 0 ? {} : _ref$uiSchema,
      onChange = _ref.onChange,
      onClose = _ref.onClose,
      props = _objectWithoutPropertiesLoose(_ref, ["schema", "uiSchema", "onChange", "onClose"]);

  var _useState = useState(props.formData),
      formData = _useState[0],
      setFormData = _useState[1];

  useEffect(function () {
    setFormData(props.formData);
  }, [props.formData]);
  var itemSchema;

  if (schema.type && schema.type === "array") {
    itemSchema = schema.items;
  } else {
    itemSchema = schema;
  }

  var dialogType;

  if (itemSchema && itemSchema.properties && itemSchema.properties.mediaId) {
    dialogType = "media";
  }

  if (itemSchema && itemSchema.properties && itemSchema.properties.referenceId) {
    dialogType = "reference";
  }

  var _onChange = function _onChange(formData) {
    var newFormData = getDefaultFormState(schema, formData);
    setFormData(newFormData);
    onChange(newFormData);
  };

  var _onAdd = function _onAdd() {
    var item;

    if (dialogType === "media") {
      item = getDefaultFormState(itemSchema, {
        mediaId: 1,
        media: {
          imageUrl: "https://akamai.vgc.no/drfront/images/2020/10/28/w=1080;h=720;564623.jpg"
        }
      });
    } else if (itemSchema.type === "object") {
      item = getDefaultFormState(itemSchema, {
        title: "Dialog addded"
      });
    } else {
      item = "Dialog string";
    }

    var newFormData;

    if (schema.type === "array") {
      newFormData = [].concat(formData, item);
    } else {
      newFormData = item;
    }

    _onChange(newFormData);
  };

  return /*#__PURE__*/React.createElement("div", null, "Example dialog.", /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: _onAdd
  }, "Add dummy data"), /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: onClose
  }, "Close"), /*#__PURE__*/React.createElement("ul", null, /*#__PURE__*/React.createElement("li", null, "Dialog type: ", dialogType), /*#__PURE__*/React.createElement("li", null, "ItemSchema: ", JSON.stringify(itemSchema))));
};

SchemaDialog.propTypes = process.env.NODE_ENV !== "production" ? {
  /** onClose */
  onClose: PropTypes.func
} : {};
export default SchemaDialog;