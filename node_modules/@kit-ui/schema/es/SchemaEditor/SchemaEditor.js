function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect } from "react";
import PropTypes from "prop-types";
import SchemaBase from "../Schema/SchemaBase";
/** SchemaEditor adds support for toggling layouts, currentLocale, dialogs */

import SchemaDialog from "./SchemaDialog";

var SchemaEditor = function SchemaEditor(_ref) {
  var schema = _ref.schema,
      uiSchema = _ref.uiSchema,
      props = _objectWithoutPropertiesLoose(_ref, ["schema", "uiSchema"]);

  var _useState = useState(props.formData || {}),
      formData = _useState[0],
      setFormData = _useState[1];

  var _onSubmit = function _onSubmit(_ref2) {
    var formData = _ref2.formData;
    console.log('onSubmit', formData);
  };

  var _onChange = function _onChange(_ref3) {
    var formData = _ref3.formData;
    console.log('onChange', formData);
    setFormData(formData);
  };
  /*
   const [languages, setLanguages] = useState(["en"])
  const [currentLocale, setCurrentLocale] = useState(null)
   const _onLocale = (locale) => {
      console.log('onLocale', locale)
      setCurrentLocale(locale)
  }
   */


  var _useState2 = useState(null),
      currentId = _useState2[0],
      setCurrentId = _useState2[1];

  var _onToggle = function _onToggle(_ref4) {
    var id = _ref4.id,
        props = _objectWithoutPropertiesLoose(_ref4, ["id"]);

    console.log('onToggle', id);
    var parentId = id.split('_');
    parentId.pop();
    parentId = parentId.join('_');
    var expandId = undefined;

    if (id && currentId && currentId.startsWith(id)) {
      expandId = parentId;
    } else {
      expandId = id;
    }

    setCurrentId(expandId);
  };

  var _onExpand = function _onExpand(_ref5) {
    var id = _ref5.id,
        props = _objectWithoutPropertiesLoose(_ref5, ["id"]);

    console.log('onExpand', id);
    setCurrentId(id);
  };

  var _onCollapse = function _onCollapse(_ref6) {
    var id = _ref6.id,
        props = _objectWithoutPropertiesLoose(_ref6, ["id"]);

    console.log('onCollapse', id);

    _onToggle({
      id: id
    });
  };

  var _useState3 = useState({}),
      sidebar = _useState3[0],
      setSidebar = _useState3[1];

  var _useState4 = useState({}),
      overlay = _useState4[0],
      setOverlay = _useState4[1];

  var _useState5 = useState({}),
      dialog = _useState5[0],
      setDialog = _useState5[1];

  var _onDialog = function _onDialog(props) {
    console.log('onDialog', props);

    if (dialog && dialog.id) {
      setDialog({});
      setSidebar({});
      setOverlay({});
    } else {
      setDialog(_extends({}, props, {
        expanded: true
      }));

      if (currentId && currentId.startsWith("root_settings")) {
        setOverlay(_extends({}, props, {
          expanded: true
        }));
      } else {
        setSidebar(_extends({}, props, {
          expanded: true
        }));
      }
    }
  };

  var formContext = _extends({
    //        languages: languages,
    //        currentLocale: currentLocale,
    //        onLocale: _onLocale,

    /*
    
            dialog: {
                ...dialog,
                template: SchemaDialog,
                onClose: () => _onDialog({})
            },
    */
    sidebar: _extends({}, sidebar, {
      template: SchemaDialog,
      onClose: function onClose() {
        return _onDialog({});
      }
    }),
    overlay: _extends({}, overlay, {
      template: SchemaDialog,
      onClose: function onClose() {
        return _onDialog({});
      }
    }),
    onDialog: _onDialog,
    currentId: currentId,
    onToggle: _onToggle,
    onExpand: _onExpand,
    onCollapse: _onCollapse,
    onEdit: _onExpand,
    onSave: _onCollapse,
    onEditReference: _onDialog,
    onEditMedia: _onDialog,
    onSubmit: function onSubmit(status) {
      return _onSubmit && _onSubmit({
        formData: _extends({}, formData, {
          status: status || formData.status || undefined
        })
      });
    }
  }, props.formContext);

  return /*#__PURE__*/React.createElement(SchemaBase, {
    schema: schema,
    uiSchema: uiSchema,
    formData: formData,
    formContext: formContext,
    onChange: _onChange,
    onSubmit: _onSubmit
  });
};

SchemaEditor.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Schema */
  schema: PropTypes.node,

  /** uiSchema */
  uiSchema: PropTypes.node,

  /** formData */
  formData: PropTypes.node
} : {};
export default SchemaEditor;