function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export var getFiltersSchema = function getFiltersSchema(_ref) {
  var _ref$filters = _ref.filters,
      filters = _ref$filters === void 0 ? ["brightness", "contrast", "blur"] : _ref$filters;
  var properties = {};
  filters && filters.map(function (filter) {
    properties[filter] = {
      type: "number"
    };
  });
  return {
    "type": "object",
    "properties": properties
  };
};
export function getFiltersField(props) {
  var schema = getFiltersSchema({
    filters: props.filters
  });
  return _extends({}, props, {
    schema: schema,
    uiSchema: _extends({}, props.uiSchema, {
      "ui:field": "imageFilters"
    })
  });
}
export default getFiltersField;