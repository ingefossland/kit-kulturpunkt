function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import Typography from "@material-ui/core/Typography";
import ButtonBase from "@material-ui/core/ButtonBase";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    header: {
      margin: theme.spacing(2, 0),
      display: "flex"
    },
    title: {
      fontFamily: "Akkurat, sans-serif",
      fontWeight: "bold"
    },
    description: {
      fontFamily: "Akkurat, sans-serif"
    }
  };
});

var ArrayButton = function ArrayButton(_ref) {
  var title = _ref.title,
      button = _objectWithoutPropertiesLoose(_ref, ["title"]);

  var classes = useStyles();
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({
    className: classes.button
  }, button), title);
};

var ArrayLayout = function ArrayLayout(_ref2) {
  var _ref2$title = _ref2.title,
      title = _ref2$title === void 0 ? "Array" : _ref2$title,
      description = _ref2.description,
      _ref2$buttons = _ref2.buttons,
      buttons = _ref2$buttons === void 0 ? [] : _ref2$buttons,
      children = _ref2.children;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("header", {
    className: classes.header
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.title
  }, title), /*#__PURE__*/React.createElement(Typography, {
    className: classes.description
  }, description));
};

export default ArrayLayout;