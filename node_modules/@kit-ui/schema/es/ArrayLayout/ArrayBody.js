function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    sectionBody: {
      paddingLeft: function paddingLeft(props) {
        return theme.spacing(props.padding);
      },
      paddingRight: function paddingRight(props) {
        return theme.spacing(props.padding);
      },
      paddingBottom: function paddingBottom(props) {
        return theme.spacing(props.padding);
      },
      "& > * + *": {
        marginTop: function marginTop(props) {
          return theme.spacing(props.spacing);
        }
      }
    }
  };
});

var SectionBody = function SectionBody(_ref) {
  var className = _ref.className,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 0 : _ref$padding,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 0 : _ref$spacing,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "padding", "spacing", "children"]);

  var classes = useStyles({
    padding: padding,
    spacing: spacing
  });

  if (!children) {
    return "";
  }

  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.sectionBody
  }, children);
};

export default SectionBody;