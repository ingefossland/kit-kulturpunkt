function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import InputAdornment from '@material-ui/core/InputAdornment';
import Icon from '@material-ui/core/Icon';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      "& .MuiFormLabel-root": {
        fontFamily: "Akkurat, sans-serif"
      },
      "& .MuiInputBase-root": {
        fontFamily: "Akkurat, sans-serif",
        lineHeight: "1.25",
        borderTopLeftRadius: "0",
        borderTopRightRadius: "0"
      },
      "& .MuiFormHelperText-root": {
        fontFamily: "Akkurat, sans-serif"
      }
    },
    startAdornment: {
      marginTop: theme.spacing(-1.5),
      marginLeft: theme.spacing(0.5),
      marginRight: theme.spacing(1)
    },
    textPrefix: {
      fontSize: "14px",
      color: theme.palette.text.secondary
    },
    iconPrefix: {},
    iconPrefixLabel: {
      marginLeft: theme.spacing(4.5)
    }
  };
});

var AutocompleteBase = function AutocompleteBase(_ref) {
  var _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "filled" : _ref$variant,
      id = _ref.id,
      icon = _ref.icon,
      prefix = _ref.prefix,
      label = _ref.label,
      helperText = _ref.helperText,
      placeholder = _ref.placeholder,
      value = _ref.value,
      options = _ref.options,
      multiple = _ref.multiple,
      groupBy = _ref.groupBy,
      onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, ["variant", "id", "icon", "prefix", "label", "helperText", "placeholder", "value", "options", "multiple", "groupBy", "onChange"]);

  var classes = useStyles();
  var selected = value && options.filter(function (option) {
    return option.value == value;
  });

  if (!multiple && selected.length) {
    selected = selected[0];
  }

  var iconPrefix, textPrefix;

  if (icon) {
    iconPrefix = /*#__PURE__*/React.createElement(Icon, {
      className: classes.iconPrefix
    }, icon);
  }

  if (prefix) {
    textPrefix = /*#__PURE__*/React.createElement("b", {
      className: classes.textPrefix
    }, prefix);
  }

  var startAdornment;

  if (iconPrefix || textPrefix) {
    startAdornment = /*#__PURE__*/React.createElement("div", {
      className: classes.startAdornment,
      position: "start"
    }, iconPrefix, textPrefix);
  }

  return /*#__PURE__*/React.createElement(Autocomplete, _extends({}, props, {
    id: id,
    options: options,
    groupBy: groupBy,
    value: selected,
    getOptionSelected: function getOptionSelected(option, value) {
      return option.value === value;
    },
    getOptionLabel: function getOptionLabel(option) {
      return options && option.label || "";
    },
    onChange: onChange,
    renderInput: function renderInput(params) {
      return /*#__PURE__*/React.createElement(TextField, _extends({}, params, {
        className: classes.root,
        helperText: helperText,
        label: label,
        variant: variant,
        placeholder: placeholder,
        fullWidth: true,
        InputLabelProps: _extends({}, params.InputLabelProps, {
          className: iconPrefix && classes.iconPrefixLabel
        }),
        InputProps: _extends({}, params.InputProps, {
          startAdornment: startAdornment
        })
      }));
    }
  }));
};

export default AutocompleteBase;