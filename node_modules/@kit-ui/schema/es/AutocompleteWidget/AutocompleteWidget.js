function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from "react";
import PropTypes from "prop-types";
import Autocomplete from '@material-ui/lab/Autocomplete';
import TextField from '@material-ui/core/TextField';
import TextWidgetPrefix from "../TextWidget/TextWidgetPrefix";
import TextWidgetSuffix from "../TextWidget/TextWidgetSuffix";
import { utils } from "@rjsf/core";
var asNumber = utils.asNumber,
    guessType = utils.guessType;
var nums = new Set(["number", "integer"]);
/**
 * This is a silly limitation in the DOM where option change event values are
 * always retrieved as strings.
 */

var processValue = function processValue(schema, value) {
  // "enum" is a reserved word, so only "type" and "items" can be destructured
  var type = schema.type,
      items = schema.items;

  if (value === "") {
    return undefined;
  } else if (type === "array" && items && nums.has(items.type)) {
    return value.map(asNumber);
  } else if (type === "boolean") {
    return value === "true";
  } else if (type === "number") {
    return asNumber(value);
  } // If type is undefined, but an enum is present, try and infer the type from
  // the enum values


  if (schema.enum) {
    if (schema.enum.every(function (x) {
      return guessType(x) === "number";
    })) {
      return asNumber(value);
    } else if (schema.enum.every(function (x) {
      return guessType(x) === "boolean";
    })) {
      return value === "true";
    }
  }

  return value;
};

function AutocompleteWidget(props) {
  var schema = props.schema,
      id = props.id,
      options = props.options,
      value = props.value,
      required = props.required,
      disabled = props.disabled,
      readonly = props.readonly,
      multiple = props.multiple,
      autofocus = props.autofocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      placeholder = props.placeholder;
  var enumOptions = options.enumOptions,
      enumDisabled = options.enumDisabled;
  var emptyValue = multiple ? [] : "";
  var variant = options.variant || "filled";
  var label = options.title || props.title || props.label;
  var helperText = options.help || undefined;

  var _onChange = function _onChange(event, option, reason) {
    return onChange(processValue(schema, option.value));
  };

  var _onBlur = function _onBlur(_ref) {
    var value = _ref.target.value;
    return onBlur(id, processValue(schema, value));
  };

  var _onFocus = function _onFocus(_ref2) {
    var value = _ref2.target.value;
    return onFocus(id, processValue(schema, value));
  };
  /*
   const _onChange = (event, option) => {
       console.log('OPTION', option)
       onChange(processValue(schema, option && option.value ||Â emptyValue));
  }*/


  var autocompleteOptions = enumOptions.map(function (_ref3, i) {
    var value = _ref3.value,
        label = _ref3.label;
    var disabled = enumDisabled && enumDisabled.indexOf(value) != -1;
    return {
      label: label,
      value: value,
      disabled: disabled
    };
  });
  return /*#__PURE__*/React.createElement(Autocomplete, {
    id: id,
    options: autocompleteOptions //            groupBy={options.groupBy}
    //            value={value}
    //            defaultValue={emptyValue}
    ,
    defaultValue: typeof value === "undefined" ? emptyValue : value,
    getOptionSelected: function getOptionSelected(option) {
      return option.value === value;
    },
    getOptionLabel: function getOptionLabel(option) {
      return option && option.label;
    },
    onChange: _onChange,
    renderInput: function renderInput(params) {
      return /*#__PURE__*/React.createElement(TextField, _extends({}, params, {
        helperText: helperText,
        label: label,
        variant: variant,
        placeholder: placeholder,
        fullWidth: true,
        InputProps: _extends({}, params.InputProps, {
          startAdornment: /*#__PURE__*/React.createElement(TextWidgetPrefix, options)
        })
      }));
    }
  });
}

AutocompleteWidget.defaultProps = {
  autofocus: false
};

if (process.env.NODE_ENV !== "production") {
  AutocompleteWidget.propTypes = process.env.NODE_ENV !== "production" ? {
    schema: PropTypes.object.isRequired,
    id: PropTypes.string.isRequired,
    options: PropTypes.shape({
      enumOptions: PropTypes.array
    }).isRequired,
    value: PropTypes.any,
    required: PropTypes.bool,
    disabled: PropTypes.bool,
    readonly: PropTypes.bool,
    multiple: PropTypes.bool,
    autofocus: PropTypes.bool,
    onChange: PropTypes.func,
    onBlur: PropTypes.func,
    onFocus: PropTypes.func
  } : {};
}

export default AutocompleteWidget;