function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import TextWidgetPrefix from "../TextWidget/TextWidgetPrefix";
import TextWidgetSuffix from "../TextWidget/TextWidgetSuffix";
import TextField from "@material-ui/core/TextField";
import { utils } from "@rjsf/core";
var getDisplayLabel = utils.getDisplayLabel;

var TextareaWidget = function TextareaWidget(_ref) {
  var id = _ref.id,
      placeholder = _ref.placeholder,
      required = _ref.required,
      readonly = _ref.readonly,
      disabled = _ref.disabled,
      type = _ref.type,
      value = _ref.value,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      onFocus = _ref.onFocus,
      autofocus = _ref.autofocus,
      options = _ref.options,
      schema = _ref.schema,
      uiSchema = _ref.uiSchema,
      _ref$rawErrors = _ref.rawErrors,
      rawErrors = _ref$rawErrors === void 0 ? [] : _ref$rawErrors,
      formContext = _ref.formContext,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "placeholder", "required", "readonly", "disabled", "type", "value", "onChange", "onBlur", "onFocus", "autofocus", "options", "schema", "uiSchema", "rawErrors", "formContext"]);

  var _onChange = function _onChange(event) {
    return onChange(event.target.value === "" ? options.emptyValue : event.target.value);
  };

  var _onBlur = function _onBlur(event) {
    return onBlur(id, event.target.value);
  };

  var _onFocus = function _onFocus(event) {
    return onFocus(id, event.target.value);
  };

  var displayLabel = getDisplayLabel(schema, uiSchema
  /* TODO: , rootSchema */
  );
  var label = displayLabel ? options.title || schema.title : false;
  var variant = options.variant || "filled";
  var helperText = options.help || null;
  return /*#__PURE__*/React.createElement(TextField, {
    id: id,
    variant: variant,
    fullWidth: true,
    label: label,
    helperText: helperText,
    placeholder: placeholder,
    disabled: disabled || readonly,
    value: value,
    required: required,
    autoFocus: autofocus,
    multiline: true,
    inputProps: {
      rowsMin: options.rowsMin || 2,
      rowsMax: options.rowsMax
    },
    InputProps: {
      startAdornment: /*#__PURE__*/React.createElement(TextWidgetPrefix, options),
      endAdornment: /*#__PURE__*/React.createElement(TextWidgetSuffix, options)
    },
    rowsMax: options.rowsMax,
    error: rawErrors.length > 0,
    onChange: _onChange,
    onBlur: _onBlur,
    onFocus: _onFocus
  });
};

export default TextareaWidget;