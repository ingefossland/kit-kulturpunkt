function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import PropTypes from "prop-types"; //import NavSettings from "../NavSettings/NavSettings"
//import NavToolbar from "../NavToolbar/NavToolbar"

var NavSettings = function NavSettings() {
  return /*#__PURE__*/React.createElement("p", null, "settings");
};

var NavToolbar = function NavToolbar() {
  return /*#__PURE__*/React.createElement("p", null, "toolbar");
};

var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    settings: {
      display: "flex",
      alignItems: "center"
    },
    toolbar: {
      display: "flex",
      alignItems: "center"
    }
  };
});

var getToolbar = function getToolbar(_ref) {
  var editable = _ref.editable,
      onEdit = _ref.onEdit,
      removable = _ref.removable,
      onRemove = _ref.onRemove,
      deletable = _ref.deletable,
      onDelete = _ref.onDelete,
      restorable = _ref.restorable,
      onRestore = _ref.onRestore;
  var toolbar = [];

  if (editable || deletable || removable) {
    if (editable && onEdit) {
      toolbar.push({
        icon: "edit",
        onClick: onEdit
      });
    }

    if (removable && onRemove) {
      toolbar.push({
        icon: "remove_circle",
        onClick: onRemove
      });
    } else if (deletable && onDelete) {
      toolbar.push({
        icon: "delete",
        onClick: onDelete
      });
    } else if (restorable && onRestore) {
      toolbar.push({
        icon: "restore",
        onClick: onRestore
      });
    }
  }

  return toolbar;
};

var ModuleActionbar = function ModuleActionbar(_ref2) {
  var className = _ref2.className,
      settings = _ref2.settings,
      toolbar = _ref2.toolbar,
      children = _ref2.children,
      props = _objectWithoutPropertiesLoose(_ref2, ["className", "settings", "toolbar", "children"]);

  var classes = useStyles();

  if (children) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, children);
  }

  if (!toolbar) {
    toolbar = getToolbar(props);
  }

  if (settings || toolbar) {
    return /*#__PURE__*/React.createElement("div", {
      className: className || classes.root
    }, settings && /*#__PURE__*/React.createElement(NavSettings, {
      className: classes.settings,
      settings: settings
    }), toolbar && /*#__PURE__*/React.createElement(NavToolbar, {
      className: classes.toolbar,
      toolbar: toolbar
    }));
  }

  return false;
};

ModuleActionbar.propTypes = process.env.NODE_ENV !== "production" ? {
  settings: PropTypes.array,
  toolbar: PropTypes.array
} : {};
export default ModuleActionbar;