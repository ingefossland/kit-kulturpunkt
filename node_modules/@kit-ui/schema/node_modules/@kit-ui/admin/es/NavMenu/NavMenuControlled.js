function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import NavMenu from "./NavMenu";

var NavMenuControlled = function NavMenuControlled(_ref) {
  var _ref$menu = _ref.menu,
      menu = _ref$menu === void 0 ? [] : _ref$menu,
      onSelect = _ref.onSelect,
      onToggle = _ref.onToggle,
      props = _objectWithoutPropertiesLoose(_ref, ["menu", "onSelect", "onToggle"]);

  var _useState = useState(props.currentUrl || undefined),
      currentUrl = _useState[0],
      setCurrentUrl = _useState[1];

  var _useState2 = useState(props.menuByUrl || {}),
      menuByUrl = _useState2[0],
      setMenuByUrl = _useState2[1];

  var handleSelect = function handleSelect(item, event) {
    var url = item.url;
    url && setCurrentUrl(url);
    onSelect && onSelect(item, event);
  };

  var handleToggle = function handleToggle(item, event) {
    var _extends2;

    var itemByUrl = menuByUrl && item.url && menuByUrl[item.url];

    var uniqueItem = _extends({}, item, itemByUrl, {
      selected: false
    });

    var url = uniqueItem.url,
        expanded = uniqueItem.expanded;
    url && setMenuByUrl(_extends({}, menuByUrl, (_extends2 = {}, _extends2[url] = _extends({}, uniqueItem, {
      expanded: !expanded
    }), _extends2)));
    onToggle && onToggle(item, event);
  };

  return /*#__PURE__*/React.createElement(NavMenu, {
    menu: menu,
    menuByUrl: menuByUrl,
    currentUrl: currentUrl,
    onToggle: handleToggle,
    onSelect: handleSelect
  });
};

export default NavMenuControlled;