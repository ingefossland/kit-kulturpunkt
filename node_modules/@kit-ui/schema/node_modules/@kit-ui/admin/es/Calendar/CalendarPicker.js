function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import moment from 'moment';
import "moment/locale/nb";
import "moment/locale/nn";
import "moment/locale/sv";
import { getCalendar } from "../utils/";
import { makeStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
var useStyles = makeStyles(function (theme) {
  return {
    table: {
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start"
    },
    thead: {
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start"
    },
    tbody: {
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start"
    },
    tableRow: {
      display: "flex",
      alignItems: "flex-start"
    },
    tableCol: {
      width: theme.spacing(5),
      height: theme.spacing(5)
    },
    dateCol: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: theme.spacing(5),
      height: theme.spacing(5)
    },
    weekday: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: theme.spacing(5),
      height: theme.spacing(5),
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      lineHeight: 1
    },
    day: {
      width: theme.spacing(4.5),
      height: theme.spacing(4.5),
      margin: theme.spacing(.25),
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      lineHeight: 1,
      "&[data-today=true]": {
        border: "1px solid",
        borderColor: theme.palette.primary.main
      },
      "&[data-selected=true]": {
        backgroundColor: theme.palette.primary.main,
        color: theme.palette.primary.contrastText
      },
      "&[data-range=true]": {
        borderRadius: 0,
        width: theme.spacing(5)
      },
      "&[data-range-start=true]": {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0,
        width: theme.spacing(4.75),
        marginRight: 0
      },
      "&[data-range-end=true]": {
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        width: theme.spacing(4.75),
        marginLeft: 0
      }
    }
  };
});

var CalendarPickerWeekday = function CalendarPickerWeekday(_ref) {
  var date = _ref.date;
  var classes = useStyles();
  var weekday = moment(date).format('dd').substr(0, 1).toUpperCase();
  return /*#__PURE__*/React.createElement("th", {
    className: classes.tableCol
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.weekday
  }, weekday));
};

var CalendarPickerDate = function CalendarPickerDate(_ref2) {
  var today = _ref2.today,
      startDate = _ref2.startDate,
      endDate = _ref2.endDate,
      date = _ref2.date,
      onChange = _ref2.onChange;
  var classes = useStyles();
  var isRangeStart = startDate !== endDate && moment(date).isSame(startDate, 'day');
  var isRangeEnd = startDate !== endDate && moment(date).isSame(endDate, 'day');
  var isRange = moment(date).isAfter(startDate, 'day') && moment(date).isBefore(endDate, 'day');
  var isSelected = moment(date).isSameOrAfter(startDate, 'day') && moment(date).isSameOrBefore(endDate, 'day');
  var isToday = moment(date).isSame(today, 'day');
  /*
  if (!isMonth) {
      return ""
  }
  */

  return /*#__PURE__*/React.createElement("td", {
    className: classes.dateCol
  }, /*#__PURE__*/React.createElement(IconButton, {
    selected: isSelected,
    onClick: function onClick(event) {
      return onChange(date, event);
    },
    "data-selected": isSelected,
    "data-range": isRange,
    "data-range-start": isRangeStart,
    "data-range-end": isRangeEnd,
    "data-today": isToday,
    className: classes.day
  }, moment(date).format('D')));
};

var CalendarPicker = function CalendarPicker(_ref3) {
  var _ref3$format = _ref3.format,
      format = _ref3$format === void 0 ? "YYYY-MM-DD" : _ref3$format,
      today = _ref3.today,
      date = _ref3.date,
      startDate = _ref3.startDate,
      endDate = _ref3.endDate,
      onChange = _ref3.onChange;
  today = today && moment(today, format, true).isValid() && date || moment().format(format);
  date = date && moment(date, format, true).isValid() && date || today;
  startDate = startDate && moment(startDate, format, true).isValid() && startDate || date;
  endDate = endDate && moment(endDate, format, true).isValid() && endDate || startDate;

  var _getCalendar = getCalendar({
    date: startDate
  }),
      rows = _getCalendar.rows;

  var classes = useStyles();
  return /*#__PURE__*/React.createElement("table", {
    className: classes.table
  }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, rows[0].map(function (col) {
    return /*#__PURE__*/React.createElement(CalendarPickerWeekday, col);
  }))), /*#__PURE__*/React.createElement("tbody", null, rows.map(function (row, r) {
    return /*#__PURE__*/React.createElement("tr", {
      className: classes.tableRow,
      key: r
    }, row.map(function (col) {
      return /*#__PURE__*/React.createElement(CalendarPickerDate, _extends({}, col, {
        today: today,
        startDate: startDate,
        endDate: endDate,
        onChange: onChange
      }));
    }));
  })));
};

export default CalendarPicker;