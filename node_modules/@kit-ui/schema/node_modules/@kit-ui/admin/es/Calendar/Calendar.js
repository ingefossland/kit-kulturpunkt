function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import moment from 'moment';
import "moment/locale/nb";
import "moment/locale/nn";
import "moment/locale/sv";
import { makeStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import { getCalendar } from "../utils";
var useStyles = makeStyles(function (theme) {
  var _ref;

  return _ref = {
    table: {
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      "& > *": {
        flexBasis: 0,
        flexGrow: 1
      },
      "& > thead": {
        display: "block",
        width: "100%",
        "& th": {
          textAlign: "left",
          width: "100%"
        }
      },
      "& > tbody": {
        display: "block",
        width: "100%",
        "& td": {
          borderTop: "1px solid",
          borderColor: theme.palette.divider,
          textAlign: "left",
          width: "100%"
        }
      },
      "& tr": {
        display: "flex",
        alignItems: "flex-start",
        "& > *": {
          flexBasis: 0,
          flexGrow: 1
        }
      }
    },
    date: {
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-start",
      justifyContent: "flex-start"
    },
    weekday: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: '12px',
      lineHeight: 1
    }
  }, _ref["date"] = {
    //        width: theme.spacing(4.5),
    //        height: theme.spacing(4.5),
    margin: theme.spacing(.25),
    fontFamily: "Akkurat, sans-serif",
    fontSize: '12px',
    lineHeight: 1,
    "&[data-today=true]": {
      border: "1px solid",
      borderColor: theme.palette.primary.main
    },
    "&[data-selected=true]": {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText
    },
    "&[data-range=true]": {
      borderRadius: 0,
      width: theme.spacing(5)
    },
    "&[data-range-start=true]": {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0,
      width: theme.spacing(4.75),
      marginRight: 0
    },
    "&[data-range-end=true]": {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0,
      width: theme.spacing(4.75),
      marginLeft: 0
    }
  }, _ref;
});

var CalendarWeekday = function CalendarWeekday(_ref2) {
  var date = _ref2.date;
  var classes = useStyles();
  var weekday = moment(date).format('dddd');
  return /*#__PURE__*/React.createElement("div", {
    className: classes.weekday
  }, weekday);
};

var CalendarEvent = function CalendarEvent(_ref3) {
  var dtStart = _ref3.dtStart,
      title = _ref3.title;
  var classes = useStyles();
  var hour = moment(dtStart).format('HH:mm');
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("time", {
    className: classes.timeLabel
  }, hour), title);
};

var CalendarEvents = function CalendarEvents(_ref4) {
  var _ref4$events = _ref4.events,
      events = _ref4$events === void 0 ? [] : _ref4$events;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("div", null, events && events.map(function (event) {
    return /*#__PURE__*/React.createElement(CalendarEvent, event);
  }));
};

var CalendarDate = function CalendarDate(_ref5) {
  var today = _ref5.today,
      startDate = _ref5.startDate,
      endDate = _ref5.endDate,
      date = _ref5.date,
      _ref5$events = _ref5.events,
      events = _ref5$events === void 0 ? [] : _ref5$events,
      onChange = _ref5.onChange;
  var classes = useStyles();
  var isRangeStart = startDate !== endDate && moment(date).isSame(startDate, 'day');
  var isRangeEnd = startDate !== endDate && moment(date).isSame(endDate, 'day');
  var isRange = moment(date).isAfter(startDate, 'day') && moment(date).isBefore(endDate, 'day');
  var isSelected = moment(date).isSameOrAfter(startDate, 'day') && moment(date).isSameOrBefore(endDate, 'day');
  var isToday = moment(date).isSame(today, 'day');
  return /*#__PURE__*/React.createElement("div", {
    className: classes.date
  }, /*#__PURE__*/React.createElement(IconButton, {
    selected: isSelected,
    onClick: function onClick(event) {
      return onChange(date, event);
    },
    "data-selected": isSelected,
    "data-range": isRange,
    "data-range-start": isRangeStart,
    "data-range-end": isRangeEnd,
    "data-today": isToday,
    className: classes.day
  }, moment(date).format('D')), /*#__PURE__*/React.createElement(CalendarEvents, {
    events: events
  }));
};

var Calendar = function Calendar(_ref6) {
  var _ref6$format = _ref6.format,
      format = _ref6$format === void 0 ? "YYYY-MM-DD" : _ref6$format,
      today = _ref6.today,
      date = _ref6.date,
      startDate = _ref6.startDate,
      endDate = _ref6.endDate,
      items = _ref6.items,
      onChange = _ref6.onChange;
  today = today || moment().format(format);
  date = date || today;
  startDate = startDate || date;
  endDate = endDate || startDate;

  var _getCalendar = getCalendar({
    date: startDate,
    items: items
  }),
      rows = _getCalendar.rows;

  var classes = useStyles();
  return /*#__PURE__*/React.createElement("table", {
    className: classes.table
  }, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, rows[0].map(function (col) {
    return /*#__PURE__*/React.createElement("th", {
      className: classes.col
    }, /*#__PURE__*/React.createElement(CalendarWeekday, col));
  }))), /*#__PURE__*/React.createElement("tbody", null, rows.map(function (row, r) {
    return /*#__PURE__*/React.createElement("tr", {
      key: r
    }, row.map(function (col) {
      return /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(CalendarDate, _extends({}, col, {
        today: today,
        startDate: startDate,
        endDate: endDate,
        onChange: onChange
      })));
    }));
  })));
};

export default Calendar;