var _ref2;

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import { makeStyles, ThemeProvider } from '@material-ui/core/styles';
import PropTypes from "prop-types";
import Paper from '@material-ui/core/Paper';
import Color from 'color';
import { getWidgetGrid } from "./utils";
import theme from "./Widget.theme";
import clsx from 'clsx';

var getContrast = function getContrast(color) {
  var contrast;
  color = Color(color);

  if (color.isDark()) {
    contrast = 'white';
  } else {
    contrast = 'black';
  }

  return contrast;
};

var useStylesBase = makeStyles(function (theme) {
  return {
    root: {
      position: "relative",
      justifySelf: "stretch",
      alignSelf: "stretch"
    },
    leadingIcons: {
      display: "flex"
    },
    trailingIcons: {
      display: "flex"
    }
  };
});

var WidgetBase = function WidgetBase(_ref) {
  var id = _ref.id,
      name = _ref.name,
      size = _ref.size,
      classes = _ref.classes,
      className = _ref.className,
      status = _ref.status,
      _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$collapsible = _ref.collapsible,
      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,
      _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? false : _ref$expanded,
      toolbar = _ref.toolbar,
      settings = _ref.settings,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,
      onClick = _ref.onClick,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {
    backgroundColor: "white"
  } : _ref$style,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "name", "size", "classes", "className", "status", "selectable", "selected", "collapsible", "expanded", "toolbar", "settings", "elevation", "onClick", "style", "children"]);

  var classesBase = useStylesBase(style);

  if (classes) {
    classes.root = clsx(classes.root, classesBase.root);
  } else {
    classes = classesBase;
  }

  var _getWidgetGrid = getWidgetGrid(props.widgetSize || size),
      cols = _getWidgetGrid.cols,
      rows = _getWidgetGrid.rows;

  if (!elevation) {
    return /*#__PURE__*/React.createElement(ThemeProvider, {
      theme: theme
    }, /*#__PURE__*/React.createElement("article", {
      className: classes.root,
      "data-id": id,
      "data-name": name,
      "data-size": size,
      "data-cols": cols,
      "data-rows": rows,
      "data-status": status,
      "aria-expanded": expanded,
      "aria-selected": selected,
      onClick: onClick
    }, children));
  }

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(Paper, {
    component: "article",
    square: true,
    className: classes.root,
    "data-id": id,
    "data-name": name,
    "data-size": size,
    "data-cols": cols,
    "data-rows": rows,
    "data-status": status,
    "aria-expanded": expanded,
    "aria-selected": selected,
    onClick: onClick
  }, children));
};

WidgetBase.propTypes = process.env.NODE_ENV !== "production" ? (_ref2 = {
  id: PropTypes.string,
  elevation: PropTypes.number,
  draggable: PropTypes.bool,
  draggableHandle: PropTypes.bool,
  selectable: PropTypes.bool,
  selected: PropTypes.bool,
  onSelect: PropTypes.func,
  collapsible: PropTypes.bool,
  expanded: PropTypes.bool,
  onToggle: PropTypes.func,
  deletable: PropTypes.bool,
  restorable: PropTypes.bool,
  onDelete: PropTypes.func,
  onRestore: PropTypes.func,
  onErase: PropTypes.func
}, _ref2["draggable"] = PropTypes.bool, _ref2.hideable = PropTypes.bool, _ref2.hidden = PropTypes.bool, _ref2) : {};
WidgetBase.defaultProps = {
  id: "widget",
  name: undefined,
  expanded: false,
  selected: false,
  size: "1:1",
  style: {}
};
export default WidgetBase;