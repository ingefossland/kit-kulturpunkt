import React, { useRef, useState, useEffect } from 'react';
import { withResizeDetector } from 'react-resize-detector';
import { makeStyles } from '@material-ui/core/styles';
import IconButton from '@material-ui/core/IconButton';
import ArrowIcon from '@material-ui/icons/ArrowDownward';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "absolute",
      zIndex: 1,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    body: {
      position: "absolute",
      zIndex: 1,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      overflowY: "scroll"
    },
    footer: {
      position: "absolute",
      zIndex: 5,
      top: "auto",
      right: 0,
      bottom: 0,
      left: "auto",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end",
      justifyContent: "center",
      overflow: "hidden"
    },
    button: {
      zIndex: 5,
      transition: ".125s ease-out",
      transform: function transform(props) {
        return props.scrolled && "translateY(200%)";
      },
      margin: theme.spacing(1.5),
      backgroundColor: "white",
      boxShadow: theme.shadows[6],
      "&:hover": {
        backgroundColor: "white",
        boxShadow: theme.shadows[1]
      }
    }
  };
});

var ScrollButton = function ScrollButton(_ref) {
  var scrollTop = _ref.scrollTop,
      minScroll = _ref.minScroll,
      onClick = _ref.onClick;
  var scrolled = false;

  if (scrollTop > minScroll) {
    scrolled = true;
  }

  var classes = useStyles({
    scrolled: scrolled
  });
  return /*#__PURE__*/React.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/React.createElement(IconButton, {
    elevation: 2,
    className: classes.button,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(ArrowIcon, null)));
};

var WidgetScroller = function WidgetScroller(_ref2) {
  var className = _ref2.className,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? {} : _ref2$style,
      height = _ref2.height,
      _ref2$minScroll = _ref2.minScroll,
      minScroll = _ref2$minScroll === void 0 ? 100 : _ref2$minScroll,
      children = _ref2.children;

  var _useState = useState(false),
      overflow = _useState[0],
      setOverflow = _useState[1];

  var _useState2 = useState(0),
      scrollTop = _useState2[0],
      setScrollTop = _useState2[1];

  var parentRef = useRef();
  var bottomRef = useRef();

  var scrollTo = function scrollTo() {
    var bottom = bottomRef.current;
    bottom && bottom.scrollIntoView({
      behavior: 'smooth',
      block: 'center'
    });
    /*
    const scrollBottom = parentRef.current && parentRef.current.children[0].offsetHeight
    parentRef.current && parentRef.current.scrollTo({
        top: scrollBottom,
        behavior: 'smooth',
    })
    */
  };

  var handleScroll = function handleScroll(e) {
    setScrollTop(parentRef.current && parentRef.current.scrollTop);
  };

  useEffect(function () {
    var ph = parentRef.current && parentRef.current.offsetHeight;
    var ch = parentRef.current && parentRef.current.children[0].offsetHeight;
    parentRef.current.addEventListener("scroll", handleScroll);

    if (ph < ch) {
      setOverflow(true);
    }

    return function () {
      parentRef.current.removeEventListener("scroll", handleScroll);
    };
  }, [children, height]);
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("section", {
    className: className || classes.root,
    style: style
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.body,
    ref: parentRef
  }, children, /*#__PURE__*/React.createElement("div", {
    ref: bottomRef
  })), overflow && /*#__PURE__*/React.createElement(ScrollButton, {
    minScroll: minScroll,
    scrollTop: scrollTop,
    onClick: scrollTo
  }));
};

export default withResizeDetector(WidgetScroller);