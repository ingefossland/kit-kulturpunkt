import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Link from '@material-ui/core/Link';
import Breadcrumbs from '@material-ui/core/Breadcrumbs';
import PathIcon from '@material-ui/icons/NavigateNext';
import IconButton from '@material-ui/core/IconButton';
import BackIcon from '@material-ui/icons/ArrowBack';
var useStyles = makeStyles(function (theme) {
  var _back, _breadcrumbs, _prefix;

  return {
    root: {
      display: "flex",
      alignItems: "center",
      justifyContent: "flex-start",
      flexWrap: "nowrap",
      maxWidth: "100%"
    },
    back: (_back = {
      marginLeft: theme.spacing(1),
      "& + $breadcrumbs": {
        marginLeft: theme.spacing(1)
      }
    }, _back[theme.breakpoints.up('sm')] = {//            display: "none"
    }, _back),
    breadcrumbs: (_breadcrumbs = {
      marginLeft: theme.spacing(2),
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      fontWeight: "bold",
      lineHeight: "24px",
      color: theme.palette.primary.main,
      maxWidth: "100%",
      overflow: "hidden",
      textOverflow: "ellipsis",
      "& a:hover": {
        cursor: "pointer"
      },
      "& li[aria-hidden=true]": {
        marginLeft: theme.spacing(.5),
        marginRight: theme.spacing(.5)
      }
    }, _breadcrumbs[theme.breakpoints.down('sm')] = {
      "& li": {
        display: "none"
      },
      "& li:last-child": {
        display: "block",
        maxWidth: "100%",
        overflow: "hidden",
        textOverflow: "ellipsis"
      }
    }, _breadcrumbs),
    identifier: {
      /*        display: "flex",
              alignItems: "center",
              justifyContent: "flex-start",
              */
      whiteSpace: "nowrap",
      maxWidth: "100%",
      overflow: "hidden",
      textOverflow: "ellipsis",
      color: theme.palette.primary.main
    },
    prefix: (_prefix = {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      fontWeight: "bold",
      lineHeight: "24px",
      marginRight: theme.spacing(1)
    }, _prefix[theme.breakpoints.down('xs')] = {
      display: "none"
    }, _prefix),
    icon: {
      marginRight: theme.spacing(1)
    },
    parent: {
      display: "flex",
      color: theme.palette.text.primary
    },
    title: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      fontWeight: "normal",
      lineHeight: "24px",
      "&[data-title=true]": {
        fontWeight: "bold"
      }
    },
    subtitle: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      lineHeight: "24px",
      marginLeft: theme.spacing(1)
    },
    uniqueId: {
      fontFamily: "Akkurat Mono, monospace",
      fontSize: "16px",
      lineHeight: "24px",
      textTransform: "uppercase",
      marginLeft: theme.spacing(1),
      color: theme.palette.text.secondary
    }
  };
});

var ButtonBack = function ButtonBack(_ref) {
  var label = _ref.label,
      onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(IconButton, {
    className: classes.back,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(BackIcon, null));
};

var EditorPath = function EditorPath(_ref2) {
  var className = _ref2.className,
      status = _ref2.status,
      _ref2$parents = _ref2.parents,
      parents = _ref2$parents === void 0 ? [] : _ref2$parents,
      title = _ref2.title,
      subtitle = _ref2.subtitle,
      identifier = _ref2.identifier,
      _ref2$untitled = _ref2.untitled,
      untitled = _ref2$untitled === void 0 ? "Untitled" : _ref2$untitled,
      onSelect = _ref2.onSelect,
      onBack = _ref2.onBack;
  var classes = useStyles();

  var handleSelect = function handleSelect(item, event) {
    if (onSelect) {
      onSelect(item, event);
    }
  };

  var handleBack = function handleBack(event) {
    if (onBack) {
      onBack(event);
    }
  };

  if (parents && parents.length) {
    return /*#__PURE__*/React.createElement("div", {
      className: className
    }, /*#__PURE__*/React.createElement(ButtonBack, {
      className: classes.back,
      onClick: function onClick(event) {
        return handleBack(event);
      }
    }), /*#__PURE__*/React.createElement(Breadcrumbs, {
      className: classes.breadcrumbs,
      separator: /*#__PURE__*/React.createElement(PathIcon, null)
    }, parents && parents.map(function (parent, index) {
      return /*#__PURE__*/React.createElement(Link, {
        className: classes.parent,
        noWrap: true,
        onClick: function onClick(event) {
          return handleSelect(parent, event);
        },
        key: index
      }, parent.title);
    }), /*#__PURE__*/React.createElement(Typography, {
      className: classes.identifier,
      "data-status": status,
      noWrap: true
    }, /*#__PURE__*/React.createElement("b", {
      className: classes.title,
      "data-status": status,
      "data-title": title && true
    }, title || untitled), subtitle && /*#__PURE__*/React.createElement("i", {
      className: classes.subtitle
    }, subtitle), identifier && /*#__PURE__*/React.createElement("i", {
      className: classes.uniqueId
    }, identifier))));
  }

  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, /*#__PURE__*/React.createElement(ButtonBack, {
    onClick: function onClick(event) {
      return handleBack(event);
    }
  }), /*#__PURE__*/React.createElement(Breadcrumbs, {
    className: classes.breadcrumbs,
    separator: /*#__PURE__*/React.createElement(PathIcon, null)
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.identifier,
    "data-status": status,
    noWrap: true
  }, /*#__PURE__*/React.createElement("b", {
    className: classes.title,
    "data-status": status,
    "data-title": title && true
  }, title || untitled), subtitle && /*#__PURE__*/React.createElement("i", {
    className: classes.subtitle
  }, subtitle), identifier && /*#__PURE__*/React.createElement("i", {
    className: classes.uniqueId
  }, identifier))));
};

export default EditorPath;