import React from 'react';
import moment from 'moment';
import "moment/locale/nb";
import "moment/locale/nn";
import "moment/locale/sv";
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      fontFamily: "Akkurat, sans-serif",
      fontSize: "12px",
      margin: theme.spacing(1)
    },
    status: {
      display: "inline",
      fontWeight: "bold",
      "&[data-status=error]": {
        color: theme.palette.error.main
      }
    },
    message: {
      display: "inline",
      marginLeft: theme.spacing(1),
      "&[data-status=error]": {
        color: theme.palette.error.main
      }
    },
    datetime: {
      display: "inline",
      marginLeft: theme.spacing(1)
    }
  };
});
var statusLabels = {
  "new": "Ny",
  "draft": "Utkast",
  "publish": "Publisert",
  "error": "Feil"
};

var StatusLabel = function StatusLabel(_ref) {
  var className = _ref.className,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? "nb" : _ref$locale,
      status = _ref.status,
      children = _ref.children;
  var classes = useStyles();
  var statusLabel = children || statusLabels[status] || status;
  return /*#__PURE__*/React.createElement("span", {
    className: className || classes.status,
    "data-status": status
  }, statusLabel);
};

var StatusDate = function StatusDate(_ref2) {
  var className = _ref2.className,
      _ref2$locale = _ref2.locale,
      locale = _ref2$locale === void 0 ? "nb" : _ref2$locale,
      _ref2$format = _ref2.format,
      format = _ref2$format === void 0 ? "relative" : _ref2$format,
      datetime = _ref2.datetime,
      children = _ref2.children;
  var classes = useStyles();
  datetime = children || datetime;

  if (!datetime) {
    return false;
  } // format value


  moment.locale(locale);
  var date;

  if (format === "relative") {
    date = moment.utc(datetime).local().fromNow();
  } else if (format) {
    date = moment.utc(datetime).local().format(format);
  }

  return /*#__PURE__*/React.createElement("time", {
    datetime: datetime,
    className: className || classes.datetime
  }, date);
};

var StatusMessage = function StatusMessage(_ref3) {
  var className = _ref3.className,
      status = _ref3.status,
      code = _ref3.code,
      children = _ref3.children;
  var classes = useStyles();

  if (!children) {
    return false;
  }

  return /*#__PURE__*/React.createElement("span", {
    "data-status": status,
    "data-code": code,
    className: className || classes.message
  }, children);
};

var EditorStatus = function EditorStatus(_ref4) {
  var className = _ref4.className,
      status = _ref4.status,
      statusLabel = _ref4.statusLabel,
      statusDate = _ref4.statusDate,
      statusCode = _ref4.statusCode,
      statusMessage = _ref4.statusMessage;
  var classes = useStyles();
  return /*#__PURE__*/React.createElement(Typography, {
    className: className || classes.root,
    noWrap: true
  }, /*#__PURE__*/React.createElement(StatusLabel, {
    className: classes.status,
    status: status
  }, statusLabel), /*#__PURE__*/React.createElement(StatusMessage, {
    className: classes.message,
    status: status,
    code: statusCode
  }, statusMessage), !statusMessage && /*#__PURE__*/React.createElement(StatusDate, {
    className: classes.datetime
  }, statusDate));
};

export default EditorStatus;