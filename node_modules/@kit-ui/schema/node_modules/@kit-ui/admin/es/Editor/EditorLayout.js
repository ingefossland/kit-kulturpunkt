function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useEffect } from 'react';
import PropTypes from "prop-types";
import EditorBase from "./EditorBase";
import EditorHeader from "./EditorHeader";
import EditorBody from "./EditorBody";
import EditorContent from "./EditorContent";
import EditorSidebar from "./EditorSidebar";
import EditorPreview from "./EditorPreview";
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    app: {
      position: "absolute",
      backgroundColor: theme.palette.background.default,
      zIndex: 1,
      top: 0,
      right: 0,
      left: 0,
      bottom: 0,
      overflow: "hidden",
      display: "flex",
      flexDirection: "column"
    },
    header: {
      position: "relative",
      height: theme.spacing(8),
      overflow: "hidden",
      marginTop: theme.spacing(-8),
      transition: ".125s ease-out",
      "&[aria-expanded=true]": {
        marginTop: 0
      }
    }
  };
});
/** AppLayout is a wrapper for all apps using AppHeader */

var EditorLayout = function EditorLayout(_ref) {
  var _ref$app = _ref.app,
      app = _ref$app === void 0 ? {} : _ref$app,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme,
      _ref$header = _ref.header,
      header = _ref$header === void 0 ? {} : _ref$header,
      _ref$sidebar = _ref.sidebar,
      sidebar = _ref$sidebar === void 0 ? {} : _ref$sidebar,
      _ref$search = _ref.search,
      search = _ref$search === void 0 ? undefined : _ref$search,
      _ref$subview = _ref.subview,
      subview = _ref$subview === void 0 ? undefined : _ref$subview,
      menu = _ref.menu,
      _ref$menuByUrl = _ref.menuByUrl,
      menuByUrl = _ref$menuByUrl === void 0 ? {} : _ref$menuByUrl,
      preview = _ref.preview,
      children = _ref.children;

  if (!theme && app.theme) {
    theme = app.theme;
  }

  header = _extends({
    title: app && app.title,
    subtitle: app && app.subtitle
  }, header, {
    subview: subview,
    menu: menu,
    search: search
  });
  sidebar = _extends({}, sidebar, {
    primaryAction: app.primaryAction,
    menu: app.menu,
    menuByUrl: menuByUrl
  });
  var classes = useStyles({
    header: header
  });
  return /*#__PURE__*/React.createElement(EditorBase, null, /*#__PURE__*/React.createElement(EditorHeader, null), /*#__PURE__*/React.createElement(EditorBody, null, /*#__PURE__*/React.createElement(EditorSidebar, sidebar), /*#__PURE__*/React.createElement(EditorContent, null, children), preview && /*#__PURE__*/React.createElement(EditorPreview, null, preview && preview.children)));
};

EditorLayout.defaultProps = {
  app: {},
  header: {
    expanded: true
  }
};
EditorLayout.propTypes = process.env.NODE_ENV !== "production" ? {
  /** App properties */
  app: PropTypes.shape({
    uniqueId: PropTypes.string,
    title: PropTypes.string
  }),

  /** Header properties */
  header: PropTypes.shape({
    expanded: PropTypes.bool
  }),

  /** Search properties */
  search: PropTypes.shape({
    expanded: PropTypes.bool
  }),

  /** Subview properties */
  subview: PropTypes.shape({
    expanded: PropTypes.bool
  })
} : {};
export default EditorLayout;