function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import ButtonBase from '@material-ui/core/ButtonBase';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';
import SearchIcon from '@material-ui/icons/Search';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  var _root;

  return {
    root: (_root = {
      display: "flex",
      position: "relative",
      backgroundColor: "white"
    }, _root["backgroundColor"] = "#ccc", _root.color = "black", _root.width = "100%", _root.height = "64px", _root.overflow = "hidden", _root),
    searchInput: {
      backgroundColor: "transparent",
      flexBasis: "100%",
      height: "100%",
      paddingLeft: theme.spacing(8),
      paddingRight: theme.spacing(8),
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      lineHeight: "1",
      color: "inherit",
      border: "none",
      outline: "none",
      "&:focus + *": {
        opacity: 1
      }
    },
    buttonToggle: {
      position: "absolute",
      zIndex: "2",
      top: "0",
      left: "0",
      margin: theme.spacing(1),
      "&[disabled]": {
        color: theme.palette.text.secondary
      }
    },
    buttonReset: {
      position: "absolute",
      zIndex: "2",
      top: "0",
      right: "0",
      margin: theme.spacing(1)
    }
  };
});

var ButtonReset = function ButtonReset(_ref) {
  var className = _ref.className,
      onClick = _ref.onClick;
  return /*#__PURE__*/React.createElement(IconButton, {
    className: className,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(CloseIcon, null));
};

var ButtonToggle = function ButtonToggle(_ref2) {
  var className = _ref2.className,
      disabled = _ref2.disabled,
      onClick = _ref2.onClick;
  return /*#__PURE__*/React.createElement(IconButton, {
    disableRipple: true,
    className: className,
    disabled: disabled,
    onClick: onClick
  }, /*#__PURE__*/React.createElement(SearchIcon, null));
};

var AppSearchBase = function AppSearchBase(_ref3) {
  var className = _ref3.className,
      expanded = _ref3.expanded,
      variant = _ref3.variant,
      _ref3$placeholder = _ref3.placeholder,
      placeholder = _ref3$placeholder === void 0 ? "Search" : _ref3$placeholder,
      value = _ref3.value,
      onFocus = _ref3.onFocus,
      onChange = _ref3.onChange,
      onToggle = _ref3.onToggle,
      onReset = _ref3.onReset,
      props = _objectWithoutPropertiesLoose(_ref3, ["className", "expanded", "variant", "placeholder", "value", "onFocus", "onChange", "onToggle", "onReset"]);

  var inputRef = useRef(null);
  var classes = useStyles();
  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.root,
    "data-variant": variant,
    "aria-expanded": expanded
  }, /*#__PURE__*/React.createElement(ButtonToggle, {
    className: classes.buttonToggle,
    onClick: onToggle,
    disabled: !onToggle && true || false
  }), /*#__PURE__*/React.createElement("input", {
    ref: inputRef,
    className: classes.searchInput,
    type: "text",
    value: value,
    placeholder: placeholder,
    onChange: onChange
  }), /*#__PURE__*/React.createElement(ButtonReset, {
    className: classes.buttonReset,
    onClick: onReset
  }));
};

AppSearchBase.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Expanded */
  expanded: PropTypes.bool,

  /** Placeholder */
  placeholder: PropTypes.string,

  /** Query */
  q: PropTypes.string,

  /** onChange */
  onChange: PropTypes.func,

  /** onToggle */
  onToggle: PropTypes.func,

  /** onReset */
  onReset: PropTypes.func
} : {};
export default AppSearchBase;