function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState, useEffect, useRef } from 'react';
import PropTypes from 'prop-types';
import AppSearchDefault from "./AppSearchDefault";
import AppSearchGrowing from "./AppSearchGrowing";
var variants = {
  "default": AppSearchDefault,
  "growing": AppSearchGrowing
};

var AppSearch = function AppSearch(_ref) {
  var className = _ref.className,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? "default" : _ref$variant,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "variant"]);

  var Template = variants && variants[variant];
  return /*#__PURE__*/React.createElement(Template, _extends({
    className: className,
    variant: variant
  }, props));
};

AppSearch.defaultProps = {
  expanded: true,
  placeholder: "Search"
};
AppSearch.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Expanded */
  expanded: PropTypes.bool,

  /** Placeholder */
  placeholder: PropTypes.string,

  /** Query */
  q: PropTypes.string,

  /** onChange */
  onChange: PropTypes.func,

  /** onToggle */
  onToggle: PropTypes.func,

  /** onReset */
  onReset: PropTypes.func
} : {};
export default AppSearch;