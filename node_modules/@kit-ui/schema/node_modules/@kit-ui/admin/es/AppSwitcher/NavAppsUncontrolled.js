function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useState, useEffect } from 'react';
import PropTypes from "prop-types";
import ButtonApps from "./NavAppsButton";
import AppsDropdown from "./NavAppsDropdown";
import AppsByUser from "./NavAppsByUser";
import AppsByOwner from "./NavAppsByOwner";
import AppsOwnersList from "./AppsOwnersList";
var AppsButtonRef = React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(ButtonApps, _extends({}, props, {
    forwardedRef: ref
  }));
});

var NavAppsUncontrolled = function NavAppsUncontrolled(_ref) {
  var className = _ref.className,
      uniqueId = _ref.uniqueId,
      _ref$user = _ref.user,
      user = _ref$user === void 0 ? {} : _ref$user,
      owner = _ref.owner,
      apps = _ref.apps,
      owners = _ref.owners,
      onSelect = _ref.onSelect,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "uniqueId", "user", "owner", "apps", "owners", "onSelect"]);

  return /*#__PURE__*/React.createElement("nav", {
    className: className
  }, /*#__PURE__*/React.createElement(AppsButtonRef, {
    onClick: handleToggle,
    expanded: expanded,
    ref: anchorRef
  }), /*#__PURE__*/React.createElement(AppsDropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    arrowRef: anchorRef,
    onCollapse: handleCollapse
  }, apps && /*#__PURE__*/React.createElement(AppsByUser, {
    apps: apps,
    onSelect: selectApp
  }), currentOwner && /*#__PURE__*/React.createElement(AppsByOwner, _extends({}, currentOwner, {
    onCollapse: unselectOwner,
    onSelect: selectApp
  })), !currentOwner && owners && /*#__PURE__*/React.createElement(AppsOwnersList, {
    owners: owners,
    onSelect: selectOwner
  })));
};

NavApps.propTypes = {
  apps: PropTypes.array,
  owners: PropTypes.array,
  ownerId: PropTypes.string,
  onSelect: PropTypes.func
};
export default NavAppsUncontrolled;