function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from "prop-types";
import { makeStyles } from '@material-ui/core/styles';
import NavAction from "../NavAction/NavAction";
import NavCalendar from "../NavCalendar/NavCalendar";
import NavMenu from "../NavMenu/NavMenu";
var useStyles = makeStyles(function (theme) {
  return {
    sidebar: {
      position: "relative"
    },
    action: {
      position: "relative",
      zIndex: 2,
      margin: theme.spacing(3)
    }
  };
});

var AppSidebar = function AppSidebar(_ref) {
  var className = _ref.className,
      _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? false : _ref$expanded,
      _ref$width = _ref.width,
      width = _ref$width === void 0 ? 224 : _ref$width,
      calendar = _ref.calendar,
      menu = _ref.menu,
      _ref$menuByUrl = _ref.menuByUrl,
      menuByUrl = _ref$menuByUrl === void 0 ? {} : _ref$menuByUrl,
      primaryAction = _ref.primaryAction,
      onSelect = _ref.onSelect,
      children = _ref.children;
  var classes = useStyles({
    width: width
  });
  return /*#__PURE__*/React.createElement("aside", {
    className: className || classes.sidebar,
    "aria-expanded": expanded
  }, primaryAction && /*#__PURE__*/React.createElement(NavAction, {
    className: classes.action,
    primaryAction: primaryAction,
    onSelect: onSelect
  }), calendar && /*#__PURE__*/React.createElement(NavCalendar, _extends({}, calendar, {
    onSelect: onSelect
  })), menu && /*#__PURE__*/React.createElement(NavMenu, {
    menu: menu,
    menuByUrl: menuByUrl,
    onSelect: onSelect
  }), children);
};

AppSidebar.propTypes = process.env.NODE_ENV !== "production" ? {
  className: PropTypes.string,
  expanded: PropTypes.bool,
  calendar: PropTypes.shape({
    date: PropTypes.string
  }),
  menu: PropTypes.array
} : {};
AppSidebar.defaultProps = {
  calendar: undefined
};
export default AppSidebar;