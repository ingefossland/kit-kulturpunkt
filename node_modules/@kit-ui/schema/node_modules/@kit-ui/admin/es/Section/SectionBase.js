function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    section: {
      position: function position(props) {
        return props.position;
      },
      zIndex: function zIndex(props) {
        return props.zIndex;
      },
      top: function top(props) {
        return props.top;
      },
      right: function right(props) {
        return props.right;
      },
      bottom: function bottom(props) {
        return props.bottom;
      },
      left: function left(props) {
        return props.left;
      },
      width: "100%",
      backgroundColor: theme.palette.background.default,
      display: "flex",
      flexDirection: "column",
      "& + $section": {
        borderTop: "1px solid",
        borderColor: theme.palette.divider
      }
    }
  };
});

var SectionBase = function SectionBase(_ref) {
  var className = _ref.className,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "relative" : _ref$position,
      _ref$collapsible = _ref.collapsible,
      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,
      _ref$editable = _ref.editable,
      editable = _ref$editable === void 0 ? false : _ref$editable,
      expanded = _ref.expanded,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "position", "collapsible", "editable", "expanded", "children"]);

  var elevation = collapsible && expanded && 4 || editable && expanded && 4 || 1;

  if (position === "absolute") {
    props.top = 0;
    props.right = 0;
    props.bottom = 0;
    props.left = 0;
  }

  var zIndex = elevation || 1;
  var classes = useStyles(_extends({
    position: position,
    zIndex: zIndex
  }, props));

  if (!elevation) {
    return /*#__PURE__*/React.createElement("section", {
      className: className || classes.section,
      "aria-expanded": expanded
    }, children);
  }

  return /*#__PURE__*/React.createElement(Paper, {
    component: "section",
    className: className || classes.section,
    elevation: elevation,
    square: true,
    "data-elevation": elevation,
    "aria-expanded": expanded
  }, children);
};

SectionBase.defaultProps = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
export default SectionBase;