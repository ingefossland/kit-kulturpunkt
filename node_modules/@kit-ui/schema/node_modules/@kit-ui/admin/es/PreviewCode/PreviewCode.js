function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { renderToStaticMarkup } from 'react-dom/server';
import reactElementToJSXString from 'react-element-to-jsx-string';
import pretty from 'pretty';
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import PreviewCodeRender from "./PreviewCodeRender";
import { ThemeProvider } from '@material-ui/core/styles';
import themeDark from "./PreviewCode.themeDark";
import themeLight from "./PreviewCode.themeLight";
var themes = {
  "light": themeLight,
  "dark": themeDark
};

function isJSON(something) {
  try {
    JSON.parse(JSON.stringify(something));
    return true;
  } catch (e) {
    return false;
  }
}

function isClassComponent(component) {
  return typeof component === 'function' && !!component.prototype.isReactComponent ? true : false;
}

function isFunctionComponent(component) {
  return typeof component === 'function' && String(component).includes('return React.createElement') ? true : false;
}

function isReactComponent(component) {
  return isClassComponent(component) || isFunctionComponent(component) ? true : false;
}

function isElement(element) {
  return React.isValidElement(element);
}

function isDOMTypeElement(element) {
  return isElement(element) && typeof element.type === 'string';
}

function isCompositeTypeElement(element) {
  return isElement(element) && typeof element.type === 'function';
}

var preTag = function preTag(_ref) {
  var className = _ref.className,
      theme = _ref.theme,
      language = _ref.language,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "theme", "language", "children"]);

  return /*#__PURE__*/React.createElement("pre", {
    className: className,
    "data-theme": theme,
    "data-language": language
  }, children);
};

var PreviewCode = function PreviewCode(_ref2) {
  var _ref2$theme = _ref2.theme,
      theme = _ref2$theme === void 0 ? "dark" : _ref2$theme,
      language = _ref2.language,
      data = _ref2.data,
      children = _ref2.children;
  var value = data || children;

  if (isJSON(value)) {
    language = "json";
    value = JSON.stringify(value, 0, 2);
  } else if (typeof value === "function") {
    language = "javascript";
    value = value.toString();
  } else if (isCompositeTypeElement(value)) {
    language = "jsx";
    value = reactElementToJSXString(value);
  } else if (isDOMTypeElement(value)) {
    value = pretty(renderToStaticMarkup(value));
  }

  if (!value || typeof value !== "string") {
    return false;
  }

  value = value.trim();
  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: themes[theme] || themeLight
  }, /*#__PURE__*/React.createElement(SyntaxHighlighter, {
    "data-theme": theme,
    "data-language": language,
    language: language,
    style: false,
    wrapLines: true,
    useInlineStyles: false,
    PreTag: function PreTag(props) {
      return PreviewCodeRender(_extends({}, props, {
        theme: theme,
        language: language
      }));
    }
  }, value));
};

PreviewCode.propTypes = process.env.NODE_ENV !== "production" ? {
  language: PropTypes.string,
  theme: PropTypes.string,
  data: PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func])
} : {};
export default PreviewCode;