function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import PropTypes from "prop-types";
import NavLogin from "./NavLogin";
import ButtonUser from "./ButtonUser";
import UserDropdown from "./UserDropdown";
import UserInfo from "./UserInfo";
import UserAppInfo from "./UserAppInfo";
var UserButtonRef = React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(ButtonUser, _extends({}, props, {
    forwardedRef: ref
  }));
});

var NavUser = function NavUser(_ref) {
  var className = _ref.className,
      app = _ref.app,
      _ref$user = _ref.user,
      user = _ref$user === void 0 ? undefined : _ref$user,
      onLogin = _ref.onLogin,
      onLogout = _ref.onLogout,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "app", "user", "onLogin", "onLogout"]);

  var _React$useState = React.useState(false),
      expanded = _React$useState[0],
      setExpanded = _React$useState[1];

  var anchorRef = React.useRef(null);

  var handleToggle = function handleToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var handleCollapse = function handleCollapse() {
    setExpanded(false);
  };

  var handleLogout = function handleLogout() {
    setExpanded(false);
    onLogout && onLogout();
  };

  if (!user || !user.uniqueId) {
    return /*#__PURE__*/React.createElement(NavLogin, {
      onLogin: onLogin
    });
  }

  return /*#__PURE__*/React.createElement("nav", {
    className: className
  }, /*#__PURE__*/React.createElement(UserButtonRef, _extends({}, user, {
    onClick: handleToggle,
    expanded: expanded,
    ref: anchorRef
  })), /*#__PURE__*/React.createElement(UserDropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    arrowRef: anchorRef,
    onCollapse: handleCollapse
  }, /*#__PURE__*/React.createElement(UserInfo, user), /*#__PURE__*/React.createElement(UserAppInfo, _extends({}, app, {
    onLogout: handleLogout
  }))));
};

NavUser.propTypes = process.env.NODE_ENV !== "production" ? {
  /** App object */
  app: PropTypes.node,

  /** User object */
  user: PropTypes.node,

  /** Login handler */
  onLogin: PropTypes.func,

  /** Logout handler */
  onLogout: PropTypes.func
} : {};
export default NavUser;