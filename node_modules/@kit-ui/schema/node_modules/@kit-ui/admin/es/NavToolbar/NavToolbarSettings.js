function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useRef, useState } from 'react';
import { Dropdown } from "@kit-ui/core";
import IconButton from "@material-ui/core/IconButton";
import Icon from "@material-ui/core/Icon";
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Button from '@material-ui/core/Button';

var NavToolbarSettings = function NavToolbarSettings(_ref) {
  var _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      value = _ref.value,
      button = _objectWithoutPropertiesLoose(_ref, ["options", "value"]);

  var _useState = useState(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = useRef(null);

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var ListOption = function ListOption(option) {
    var icon = option.icon,
        title = option.title,
        label = option.label,
        value = option.value,
        onClick = option.onClick;
    return /*#__PURE__*/React.createElement(ListItem, {
      button: true,
      onClick: onClick
    }, icon && /*#__PURE__*/React.createElement(ListItemIcon, null, /*#__PURE__*/React.createElement(Icon, null, icon)), /*#__PURE__*/React.createElement(ListItemText, {
      primary: title || value
    }));
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
    variant: "outlined",
    onClick: _onToggle,
    ref: anchorRef
  }, value), /*#__PURE__*/React.createElement(Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/React.createElement(List, null, options && options.map(function (option, index) {
    return /*#__PURE__*/React.createElement(ListOption, _extends({}, option, {
      key: index
    }));
  }))));
};

export default NavToolbarSettings;