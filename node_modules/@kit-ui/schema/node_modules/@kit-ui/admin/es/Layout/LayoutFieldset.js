function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import LayoutHeader from "./LayoutHeader";
import LayoutGrid from "./LayoutGrid";
import LayoutFooter from "./LayoutFooter";
var useStyles = makeStyles(function (theme) {
  return {
    fieldset: {
      width: "100%",
      padding: function padding(props) {
        return theme.spacing(props.padding);
      }
    }
  };
});

var LayoutFieldset = function LayoutFieldset(_ref) {
  var name = _ref.name,
      _ref$grid = _ref.grid,
      grid = _ref$grid === void 0 ? false : _ref$grid,
      _ref$spacing = _ref.spacing,
      spacing = _ref$spacing === void 0 ? 1 : _ref$spacing,
      _ref$padding = _ref.padding,
      padding = _ref$padding === void 0 ? 0 : _ref$padding,
      toolbar = _ref.toolbar,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["name", "grid", "spacing", "padding", "toolbar", "children"]);

  var classes = useStyles({
    padding: padding,
    spacing: spacing
  });
  return /*#__PURE__*/React.createElement("section", {
    className: classes.fieldset,
    "data-layout": "fieldset",
    "data-name": name
  }, /*#__PURE__*/React.createElement(LayoutHeader, props), /*#__PURE__*/React.createElement(LayoutGrid, {
    grid: grid,
    padding: padding,
    spacing: spacing
  }, children), /*#__PURE__*/React.createElement(LayoutFooter, props));
};

export default LayoutFieldset;