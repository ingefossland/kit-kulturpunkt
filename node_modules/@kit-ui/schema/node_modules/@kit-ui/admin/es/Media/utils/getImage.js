function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { getUiOptions } from "../../Schema/utils";
import { getImageCropdataSchema, getImageFocalpointSchema, getImageFiltersSchema, getImageAdjustSchema, getImageAnnotationsSchema } from "./";
export var getImageSchemaProps = function getImageSchemaProps(props) {
  var schema = props.schema,
      uiSchema = props.uiSchema;
  var uiOptions = getUiOptions(uiSchema);
  var imageCropdata = schema.cropdata || schema.imageCropdata || uiOptions.imageCropdata || undefined;
  var imageFocalpoint = schema.focalpoint || schema.imageFocalpoint || uiOptions.imageFocalpoint || undefined;
  var imageFilters = schema.filters || schema.imageFilters || uiOptions.imageFilters || undefined;
  var imageAnnotations = schema.annotations || schema.imageAnnotations || uiOptions.imageAnnotations || undefined;
  var imageProps = {};

  if (imageCropdata) {
    imageProps.imageCropdata = getImageCropdataSchema();
  }

  if (imageFocalpoint) {
    imageProps.imageFocalpoint = getImageFocalpointSchema();
  }

  if (imageFilters) {
    imageProps.imageFilters = getImageFiltersSchema({
      schema: {
        type: "imageFilters",
        options: imageFilters
      }
    });
  }

  if (imageAnnotations) {
    imageProps.imageAnnotations = getImageAnnotationsSchema({
      schema: {
        type: "imageAnnotations",
        options: imageAnnotations
      }
    });
  }

  return imageProps;
};
export var getImageSchema = function getImageSchema(props) {
  var schema = props.schema;
  var defaultSchema = {
    "type": "object",
    "properties": {
      "uploadProgress": {
        "type": "number",
        "readonly": true,
        "default": 100
      },
      "mediaId": {
        "type": "string",
        "readonly": true
      },
      "media": {
        "type": "object",
        "properties": {
          "mediaType": {
            "type": "string",
            "default": "image",
            "readonly": true
          },
          "uniqueId": {
            "type": "string",
            "readonly": true
          }
        }
      }
    }
  };
  var imageProps = getImageSchemaProps(props);
  return _extends({}, defaultSchema, {
    properties: _extends({}, defaultSchema.properties, schema.properties, imageProps)
  });
};
export function getImageField(props) {
  var schema = getImageSchema(props);
  return _extends({}, props, {
    schema: schema,
    uiSchema: _extends({}, props.uiSchema, {
      "ui:field": "media"
    })
  });
}