var _this = this;

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useEffect } from 'react';
import PropTypes from "prop-types";
import Cropper from 'react-cropper';
import 'cropperjs/dist/cropper.css';
import { makeStyles } from '@material-ui/core/styles';
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  };
});

var ImageCropperBase = function ImageCropperBase(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      imageCropdata = _ref.imageCropdata,
      options = _ref.options,
      aspectRatio = _ref.aspectRatio,
      onChange = _ref.onChange;
  var classes = useStyles();
  var cropperRef = useRef(null);

  if (!imageUrl) {
    return /*#__PURE__*/React.createElement("p", null, "No imageUrl for cropper");
  }

  var onReady = function onReady() {
    var image = cropperRef.current.getImageData();
    var imageWidth = image && image.naturalWidth;
    var imageHeight = image && image.naturalHeight;
    var x = imageCropdata && imageCropdata.x * imageWidth / 100 || 0;
    var y = imageCropdata && imageCropdata.y * imageHeight / 100 || 0;
    var width = imageCropdata && imageCropdata.width * imageWidth / 100 || imageWidth;
    var height = imageCropdata && imageCropdata.height * imageHeight / 100 || imageHeight;
    cropperRef.current.setData(_extends({}, imageCropdata, {
      x: x,
      y: y,
      width: width,
      height: height
    })); //        cropperRef.current.setData(imageCropdata);
  };

  var onCrop = function onCrop() {
    var data = cropperRef.current.getData();
    var image = cropperRef.current.getImageData();
    var imageWidth = image && image.naturalWidth;
    var imageHeight = image && image.naturalHeight;
    var x = data.x / imageWidth * 100;
    var y = data.y / imageHeight * 100;
    var width = data.width / imageWidth * 100;
    var height = data.height / imageHeight * 100;

    var newFormData = _extends({}, data, {
      x: x,
      y: y,
      width: width,
      height: height
    });

    onChange && onChange(newFormData);
  };

  options = _extends({}, options, {
    aspectRatio: aspectRatio
  });
  return /*#__PURE__*/React.createElement(Cropper, _extends({
    className: className || classes.root,
    ref: cropperRef,
    src: imageUrl
  }, options, {
    ready: onReady.bind(_this),
    crop: onCrop.bind(_this)
  }));
};

ImageCropperBase.propTypes = process.env.NODE_ENV !== "production" ? {
  imageUrl: PropTypes.string
} : {};
ImageCropperBase.defaultProps = {
  imageUrl: undefined,
  options: {
    viewMode: 0,
    dragMode: "crop",
    initialAspectRatio: undefined,
    aspectRatio: undefined,
    responsive: true,
    restore: true,
    checkCrossOrigin: false,
    checkOrientation: true,
    modal: true,
    guides: true,
    center: true,
    highlight: true,
    background: true,
    autoCrop: true,
    autoCropArea: 1,
    movable: true,
    rotatable: true,
    scalable: true,
    zoomable: true,
    zoomOnTouch: true,
    zoomOnWheel: true,
    wheelZoomRatio: 0.1,
    cropBoxMovable: true,
    cropBoxResizable: true,
    toggleDragModeOnDblclick: true
  },
  imageCropdata: {
    "x": undefined,
    "y": undefined,
    "width": undefined,
    "height": undefined,
    "rotate": undefined
  }
};
export default ImageCropperBase;