function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useState } from 'react';
import ButtonBase from '@material-ui/core/ButtonBase';
import CropIcon from '@material-ui/icons/Crop';
import { makeStyles } from '@material-ui/core/styles';
import ImageCropperBase from "./ImageCropperBase";
var useStyles = makeStyles(function (theme) {
  return {
    root: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    cropper: {
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      marginBottom: theme.spacing(6),
      "& .cropper-container": {
        backgroundImage: "none"
      },
      "& .cropper-modal": {
        backgroundColor: "inherit"
      }
    },
    footer: {
      position: "absolute",
      top: "auto",
      right: 0,
      left: 0,
      bottom: 0,
      height: theme.spacing(6),
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    button: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "12px",
      fontWeight: "bold",
      textTransform: "none",
      textAlign: "center",
      minWidth: theme.spacing(5),
      color: "inherit",
      "&[aria-selected=true]": {
        color: theme.palette.primary.main
      }
    },
    icon: {
      fontSize: "16px"
    }
  };
});

var ImageCropper = function ImageCropper(_ref) {
  var className = _ref.className,
      imageUrl = _ref.imageUrl,
      _ref$imageCropdata = _ref.imageCropdata,
      imageCropdata = _ref$imageCropdata === void 0 ? {} : _ref$imageCropdata,
      formats = _ref.formats,
      onChange = _ref.onChange,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "imageUrl", "imageCropdata", "formats", "onChange"]);

  var classes = useStyles();

  var handleChange = function handleChange(imageCropdata) {
    onChange && onChange(imageCropdata);
  };

  var _useState = useState(null),
      formatSelected = _useState[0],
      setFormatSelected = _useState[1];

  var _useState2 = useState(null),
      aspectRatio = _useState2[0],
      setAspectRatio = _useState2[1];

  var resetFormat = function resetFormat() {
    setFormatSelected(null);
    setAspectRatio(null);
  };

  var handleFormat = function handleFormat(format) {
    var ratio = format.split(':');
    setFormatSelected(format);
    setAspectRatio(ratio[0] / ratio[1]);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: className || classes.root
  }, /*#__PURE__*/React.createElement(ImageCropperBase, {
    className: classes.cropper,
    imageUrl: imageUrl,
    imageCropdata: imageCropdata,
    aspectRatio: aspectRatio,
    onChange: handleChange
  }), /*#__PURE__*/React.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/React.createElement(ButtonBase, {
    className: classes.button,
    "aria-selected": !formatSelected,
    onClick: function onClick() {
      return resetFormat(undefined);
    }
  }, /*#__PURE__*/React.createElement(CropIcon, {
    className: classes.icon
  })), formats && formats.map(function (format, index) {
    return /*#__PURE__*/React.createElement(ButtonBase, {
      "aria-selected": formatSelected === format,
      className: classes.button,
      size: "small",
      onClick: function onClick() {
        return handleFormat(format);
      }
    }, format);
  })));
};

ImageCropper.defaultProps = {
  imageUrl: undefined,

  /* ImageCropdata defined as percentages */
  imageCropdata: {
    "x": 0,
    "y": 0,
    "width": undefined,
    "height": undefined,
    "rotate": 0
  },
  formats: ["16:9", "4:3", "3:2", "1:1", "2:3"]
};
export default ImageCropper;