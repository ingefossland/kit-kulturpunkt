"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@kit-ui/core");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _lodash = _interopRequireDefault(require("lodash"));

var _GridSettingsList = _interopRequireDefault(require("./GridSettingsList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var getOptions = function getOptions(_ref) {
  var _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options;
  var _cols = 0,
      _rows = 0,
      _options = [],
      _byValue = {};
  options.map(function (item, index) {
    if (typeof item === "string") {
      item = {
        label: item,
        value: item
      };
    }

    var size = item.value;
    var grid = size.split(':');
    var cols = grid[0] * 1;
    var rows = grid[1] * 1;

    if (cols > _cols) {
      _cols = cols;
    }

    if (rows > _rows) {
      _rows = rows;
    }

    item = _extends({}, item, {
      order: cols * rows,
      size: size,
      cols: cols,
      rows: rows
    });

    _options.push(item);

    _byValue[item.value] = item;
  });
  _options = _lodash.default.orderBy(_options, 'order', 'desc');
  return {
    byValue: _byValue,
    options: _options,
    cols: _cols,
    rows: _rows
  };
};

var GridSettings = function GridSettings(_ref2) {
  var _ref2$type = _ref2.type,
      type = _ref2$type === void 0 ? "grid" : _ref2$type,
      name = _ref2.name,
      label = _ref2.label,
      value = _ref2.value,
      onChange = _ref2.onChange,
      props = _objectWithoutPropertiesLoose(_ref2, ["type", "name", "label", "value", "onChange"]);

  var _useState = (0, _react.useState)(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = (0, _react.useRef)(null);

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var _getOptions = getOptions(props),
      options = _getOptions.options,
      byValue = _getOptions.byValue,
      cols = _getOptions.cols,
      rows = _getOptions.rows;

  var current = byValue[value] || options[0];

  var onSelect = function onSelect(item) {
    if (onChange) {
      onChange(name, item.value);
    }

    setExpanded(false);
  };

  var onCollapse = function onCollapse() {
    setExpanded(false);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "outlined",
    onClick: _onToggle,
    ref: anchorRef
  }, current.label), /*#__PURE__*/_react.default.createElement(_core.Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/_react.default.createElement(_GridSettingsList.default, {
    value: current && current.value,
    cols: cols,
    rows: rows,
    options: options,
    onSelect: onSelect
  })));
};

var _default = GridSettings;
exports.default = _default;
module.exports = exports.default;