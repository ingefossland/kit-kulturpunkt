"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _utils = require("../Schema/utils");

var _Grid = _interopRequireDefault(require("@material-ui/core/Grid"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      padding: function padding(props) {
        return theme.spacing(props.padding);
      }
    }
  };
});

var LayoutGridItem = function LayoutGridItem(_ref) {
  var uiSchema = _ref.uiSchema,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["uiSchema", "children"]);

  var uiOptions = uiSchema && (0, _utils.getUiOptions)(uiSchema);
  var gridCols = props.gridCols || uiOptions && uiOptions.gridCols;

  if (gridCols && typeof gridCols === 'number' && gridCols !== 0) {
    return /*#__PURE__*/_react.default.createElement(_Grid.default, {
      item: true,
      xs: gridCols
    }, children);
  }

  if (gridCols && typeof gridCols === "object") {
    return /*#__PURE__*/_react.default.createElement(_Grid.default, _extends({
      item: true
    }, gridCols), children);
  }

  return /*#__PURE__*/_react.default.createElement(_Grid.default, {
    item: true,
    xs: 12
  }, children);
};

var LayoutGrid = function LayoutGrid(_ref2) {
  var className = _ref2.className,
      _ref2$spacing = _ref2.spacing,
      spacing = _ref2$spacing === void 0 ? 1 : _ref2$spacing,
      _ref2$padding = _ref2.padding,
      padding = _ref2$padding === void 0 ? 0 : _ref2$padding,
      alignItems = _ref2.alignItems,
      alignContent = _ref2.alignContent,
      justify = _ref2.justify,
      children = _ref2.children;
  var classes = useStyles({
    padding: padding
  });

  if (!children.length) {//        children = [children];
  }

  var items = _react.default.Children.toArray(children);

  return /*#__PURE__*/_react.default.createElement(_Grid.default, {
    className: className || classes.root,
    container: true,
    alignItems: alignItems,
    alignContent: alignContent,
    justify: justify,
    spacing: spacing,
    "data-layout": "grid"
  }, items.map(function (child, index) {
    return /*#__PURE__*/_react.default.createElement(LayoutGridItem, _extends({}, child.props, {
      key: index
    }), child);
  }));
};

var _default = LayoutGrid;
exports.default = _default;
module.exports = exports.default;