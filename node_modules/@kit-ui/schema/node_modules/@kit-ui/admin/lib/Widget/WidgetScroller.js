"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactResizeDetector = require("react-resize-detector");

var _styles = require("@material-ui/core/styles");

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _ArrowDownward = _interopRequireDefault(require("@material-ui/icons/ArrowDownward"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      position: "absolute",
      zIndex: 1,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    body: {
      position: "absolute",
      zIndex: 1,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      overflowY: "scroll"
    },
    footer: {
      position: "absolute",
      zIndex: 5,
      top: "auto",
      right: 0,
      bottom: 0,
      left: "auto",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end",
      justifyContent: "center",
      overflow: "hidden"
    },
    button: {
      zIndex: 5,
      transition: ".125s ease-out",
      transform: function transform(props) {
        return props.scrolled && "translateY(200%)";
      },
      margin: theme.spacing(1.5),
      backgroundColor: "white",
      boxShadow: theme.shadows[6],
      "&:hover": {
        backgroundColor: "white",
        boxShadow: theme.shadows[1]
      }
    }
  };
});

var ScrollButton = function ScrollButton(_ref) {
  var scrollTop = _ref.scrollTop,
      minScroll = _ref.minScroll,
      onClick = _ref.onClick;
  var scrolled = false;

  if (scrollTop > minScroll) {
    scrolled = true;
  }

  var classes = useStyles({
    scrolled: scrolled
  });
  return /*#__PURE__*/_react.default.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    elevation: 2,
    className: classes.button,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_ArrowDownward.default, null)));
};

var WidgetScroller = function WidgetScroller(_ref2) {
  var className = _ref2.className,
      _ref2$style = _ref2.style,
      style = _ref2$style === void 0 ? {} : _ref2$style,
      height = _ref2.height,
      _ref2$minScroll = _ref2.minScroll,
      minScroll = _ref2$minScroll === void 0 ? 100 : _ref2$minScroll,
      children = _ref2.children;

  var _useState = (0, _react.useState)(false),
      overflow = _useState[0],
      setOverflow = _useState[1];

  var _useState2 = (0, _react.useState)(0),
      scrollTop = _useState2[0],
      setScrollTop = _useState2[1];

  var parentRef = (0, _react.useRef)();
  var bottomRef = (0, _react.useRef)();

  var scrollTo = function scrollTo() {
    var bottom = bottomRef.current;
    bottom && bottom.scrollIntoView({
      behavior: 'smooth',
      block: 'center'
    });
    /*
    const scrollBottom = parentRef.current && parentRef.current.children[0].offsetHeight
    parentRef.current && parentRef.current.scrollTo({
        top: scrollBottom,
        behavior: 'smooth',
    })
    */
  };

  var handleScroll = function handleScroll(e) {
    setScrollTop(parentRef.current && parentRef.current.scrollTop);
  };

  (0, _react.useEffect)(function () {
    var ph = parentRef.current && parentRef.current.offsetHeight;
    var ch = parentRef.current && parentRef.current.children[0].offsetHeight;
    parentRef.current.addEventListener("scroll", handleScroll);

    if (ph < ch) {
      setOverflow(true);
    }

    return function () {
      parentRef.current.removeEventListener("scroll", handleScroll);
    };
  }, [children, height]);
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement("section", {
    className: className || classes.root,
    style: style
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.body,
    ref: parentRef
  }, children, /*#__PURE__*/_react.default.createElement("div", {
    ref: bottomRef
  })), overflow && /*#__PURE__*/_react.default.createElement(ScrollButton, {
    minScroll: minScroll,
    scrollTop: scrollTop,
    onClick: scrollTo
  }));
};

var _default = (0, _reactResizeDetector.withResizeDetector)(WidgetScroller);

exports.default = _default;
module.exports = exports.default;