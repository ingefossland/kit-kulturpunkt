"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = require("../");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EditableWidget = /*#__PURE__*/function (_Component) {
  _inheritsLoose(EditableWidget, _Component);

  function EditableWidget() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Component.call.apply(_Component, [this].concat(args)) || this;

    _defineProperty(_assertThisInitialized(_this), "state", {
      editing: false
    });

    _defineProperty(_assertThisInitialized(_this), "onAdd", function (props) {
      console.log('editableWidget:add', props);

      if (_this.props.onAdd) {
        _this.props.onAdd(props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onRemove", function (props) {
      console.log('editableWidget:remove', props);

      if (_this.props.onRemove) {
        _this.props.onRemove(props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onEdit", function (props) {
      console.log('editableWidget:edit', props);

      _this.setState({
        editing: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onSave", function (props) {
      console.log('editableWidget:save', props);

      _this.setState({
        editing: false
      });

      if (_this.props.onSave) {
        _this.props.onSave(props);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getUiSchema", function () {
      var _this$props = _this.props,
          uiSchema = _this$props.uiSchema,
          expanded = _this$props.expanded,
          editable = _this$props.editable,
          removable = _this$props.removable,
          addable = _this$props.addable,
          style = _this$props.style;
      return _extends({}, uiSchema, {
        "ui:style": style,
        "ui:options": {
          "expanded": expanded,
          "editable": editable,
          "addable": addable,
          "removable": removable
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getFormData", function () {
      var _this$props2 = _this.props,
          formData = _this$props2.formData,
          widgetType = _this$props2.widgetType,
          widgetSize = _this$props2.widgetSize,
          title = _this$props2.title,
          description = _this$props2.description,
          icon = _this$props2.icon,
          imageUrl = _this$props2.imageUrl;
      var image;

      if (imageUrl) {
        image = {
          mediaId: true,
          media: {
            imageUrl: imageUrl
          }
        };
      }

      return _extends({
        widgetType: widgetType,
        widgetSize: widgetSize,
        title: title,
        description: description,
        icon: icon,
        image: image
      }, formData);
    });

    _defineProperty(_assertThisInitialized(_this), "getLayouts", function () {
      var editing = _this.state.editing;
      var _this$props3 = _this.props,
          widgetTemplate = _this$props3.widgetTemplate,
          widgetEditor = _this$props3.widgetEditor;
      var layouts = {
        "widget": _.LayoutWidget,
        "widget-header": _.LayoutWidgetHeader,
        "widget-body": function widgetBody() {
          return _this.props.children;
        }
      };

      if (editing && widgetEditor) {
        layouts['widget-header'] = function () {
          return false;
        };

        layouts['widget-body'] = widgetEditor;
      } else if (editing) {
        layouts['widget-body'] = _.LayoutWidgetEdit;
      } else if (widgetTemplate) {
        layouts['widget-header'] = function () {
          return false;
        };

        layouts['widget-body'] = widgetTemplate;
      }

      return layouts;
    });

    return _this;
  }

  var _proto = EditableWidget.prototype;

  _proto.render = function render() {
    var formData = this.getFormData();
    var uiSchema = this.getUiSchema();
    var layouts = this.getLayouts();
    return /*#__PURE__*/_react.default.createElement(_.Schema, _extends({}, this.props, {
      formData: formData,
      uiSchema: uiSchema,
      layouts: layouts,
      onAdd: this.onAdd,
      onRemove: this.onRemove,
      onEdit: this.onEdit,
      onSave: this.onSave
    }));
  };

  return EditableWidget;
}(_react.Component);

_defineProperty(EditableWidget, "defaultProps", {
  addable: false,
  removable: false,
  expanded: false,
  editable: false,
  formData: {},
  schema: {
    type: "object",
    properties: {
      widgetType: {
        type: "string"
      },
      widgetSize: {
        type: "string",
        pattern: "grid",
        enum: ["1:1", "2:1", "3:1", "4:1", "1:2", "2:2", "3:2", "4:2", "1:3", "2:3", "3:3", "4:3", "1:4", "2:4", "3:4", "4:4"]
      },
      title: {
        type: "string"
      },
      description: {
        type: "string",
        format: "email"
      },
      icon: {
        type: "string"
      },
      image: {
        type: "image"
      }
    }
  },
  uiSchema: {
    "ui:layout": "widget",
    "ui:title": {
      "select": "title"
    },
    "ui:description": {
      "select": "description"
    },
    "ui:fieldset": ["header", "body"],
    "header": {
      "ui:layout": "widget-header",
      "ui:fieldset": ["title", "description"],
      "ui:title": {
        "select": "title"
      }
    },
    "body": {
      "ui:layout": "widget-body",
      "ui:fieldset": ["title", "description"]
    },
    "ui:settings": ["widgetSize"]
  }
});

var _default = EditableWidget;
exports.default = _default;
module.exports = exports.default;