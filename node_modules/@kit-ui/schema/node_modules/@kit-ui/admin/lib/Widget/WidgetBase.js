"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _color = _interopRequireDefault(require("color"));

var _utils = require("./utils");

var _Widget = _interopRequireDefault(require("./Widget.theme"));

var _clsx = _interopRequireDefault(require("clsx"));

var _ref2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var getContrast = function getContrast(color) {
  var contrast;
  color = (0, _color.default)(color);

  if (color.isDark()) {
    contrast = 'white';
  } else {
    contrast = 'black';
  }

  return contrast;
};

var useStylesBase = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      position: "relative",
      justifySelf: "stretch",
      alignSelf: "stretch"
    },
    leadingIcons: {
      display: "flex"
    },
    trailingIcons: {
      display: "flex"
    }
  };
});

var WidgetBase = function WidgetBase(_ref) {
  var id = _ref.id,
      name = _ref.name,
      size = _ref.size,
      classes = _ref.classes,
      className = _ref.className,
      status = _ref.status,
      _ref$selectable = _ref.selectable,
      selectable = _ref$selectable === void 0 ? false : _ref$selectable,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      _ref$collapsible = _ref.collapsible,
      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,
      _ref$expanded = _ref.expanded,
      expanded = _ref$expanded === void 0 ? false : _ref$expanded,
      toolbar = _ref.toolbar,
      settings = _ref.settings,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === void 0 ? 1 : _ref$elevation,
      onClick = _ref.onClick,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {
    backgroundColor: "white"
  } : _ref$style,
      children = _ref.children,
      props = _objectWithoutPropertiesLoose(_ref, ["id", "name", "size", "classes", "className", "status", "selectable", "selected", "collapsible", "expanded", "toolbar", "settings", "elevation", "onClick", "style", "children"]);

  var classesBase = useStylesBase(style);

  if (classes) {
    classes.root = (0, _clsx.default)(classes.root, classesBase.root);
  } else {
    classes = classesBase;
  }

  var _getWidgetGrid = (0, _utils.getWidgetGrid)(props.widgetSize || size),
      cols = _getWidgetGrid.cols,
      rows = _getWidgetGrid.rows;

  if (!elevation) {
    return /*#__PURE__*/_react.default.createElement(_styles.ThemeProvider, {
      theme: _Widget.default
    }, /*#__PURE__*/_react.default.createElement("article", {
      className: classes.root,
      "data-id": id,
      "data-name": name,
      "data-size": size,
      "data-cols": cols,
      "data-rows": rows,
      "data-status": status,
      "aria-expanded": expanded,
      "aria-selected": selected,
      onClick: onClick
    }, children));
  }

  return /*#__PURE__*/_react.default.createElement(_styles.ThemeProvider, {
    theme: _Widget.default
  }, /*#__PURE__*/_react.default.createElement(_Paper.default, {
    component: "article",
    square: true,
    className: classes.root,
    "data-id": id,
    "data-name": name,
    "data-size": size,
    "data-cols": cols,
    "data-rows": rows,
    "data-status": status,
    "aria-expanded": expanded,
    "aria-selected": selected,
    onClick: onClick
  }, children));
};

WidgetBase.propTypes = process.env.NODE_ENV !== "production" ? (_ref2 = {
  id: _propTypes.default.string,
  elevation: _propTypes.default.number,
  draggable: _propTypes.default.bool,
  draggableHandle: _propTypes.default.bool,
  selectable: _propTypes.default.bool,
  selected: _propTypes.default.bool,
  onSelect: _propTypes.default.func,
  collapsible: _propTypes.default.bool,
  expanded: _propTypes.default.bool,
  onToggle: _propTypes.default.func,
  deletable: _propTypes.default.bool,
  restorable: _propTypes.default.bool,
  onDelete: _propTypes.default.func,
  onRestore: _propTypes.default.func,
  onErase: _propTypes.default.func
}, _ref2["draggable"] = _propTypes.default.bool, _ref2.hideable = _propTypes.default.bool, _ref2.hidden = _propTypes.default.bool, _ref2) : {};
WidgetBase.defaultProps = {
  id: "widget",
  name: undefined,
  expanded: false,
  selected: false,
  size: "1:1",
  style: {}
};
var _default = WidgetBase;
exports.default = _default;
module.exports = exports.default;