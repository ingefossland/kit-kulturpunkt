"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

var _Close = _interopRequireDefault(require("@material-ui/icons/Close"));

var _Search = _interopRequireDefault(require("@material-ui/icons/Search"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    root: {
      display: "flex",
      zIndex: 2,
      position: "relative",
      backgroundColor: "transparent",
      color: "black",
      height: "36px",
      overflow: "hidden",
      fontFamily: "Akkurat, sans-serif",
      margin: "12px"
    },
    searchInput: {
      backgroundColor: "white",
      flexBasis: "100%",
      padding: "9px 42px",
      border: "1px solid",
      borderColor: "#ccc",
      borderRadius: "18px",
      fontFamily: "inherit",
      fontSize: "14px",
      lineHeight: "18px",
      color: "inherit",
      outline: "none",
      "&:focus + *:first-child": {
        opacity: 1
      }
    },
    searchIcon: {
      position: "absolute",
      pointerEvents: "none",
      zIndex: 2,
      top: "0",
      left: "0",
      fontSize: "20px",
      lineHeight: "24px",
      width: '20px',
      height: '20px',
      padding: "0",
      margin: "8px 13px",
      opacity: ".5"
    },
    resetButton: {
      position: "absolute",
      zIndex: 3,
      top: theme.spacing(1),
      right: theme.spacing(1)
    },
    resetIcon: {
      width: '20px',
      height: '20px'
    }
  };
});

var SearchReset = function SearchReset(_ref) {
  var onClick = _ref.onClick;
  var classes = useStyles();
  return /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.resetButton,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_Close.default, {
    className: classes.resetIcon
  }));
};

var WidgetSearch = function WidgetSearch(_ref2) {
  var className = _ref2.className,
      _ref2$placeholder = _ref2.placeholder,
      placeholder = _ref2$placeholder === void 0 ? "Search" : _ref2$placeholder,
      q = _ref2.q,
      onChange = _ref2.onChange,
      onReset = _ref2.onReset;

  var _useState = (0, _react.useState)(q),
      value = _useState[0],
      setValue = _useState[1];

  (0, _react.useEffect)(function () {
    setValue(q);
  }, [q]);
  var classes = useStyles();

  var handleChange = function handleChange(event) {
    setValue(event.target.value);

    if (onChange) {
      onChange(event.target.value, event);
    }
  };

  var handleReset = function handleReset(event) {
    setValue("");

    if (onReset) {
      onReset(event);
    } else if (onChange) {
      onChange("", event);
    }
  };

  return /*#__PURE__*/_react.default.createElement("nav", {
    className: className || classes.root
  }, /*#__PURE__*/_react.default.createElement("input", {
    className: classes.searchInput,
    type: "text",
    value: value,
    placeholder: placeholder,
    onChange: handleChange
  }), /*#__PURE__*/_react.default.createElement(_Search.default, {
    className: classes.searchIcon
  }), value && /*#__PURE__*/_react.default.createElement(SearchReset, {
    className: classes.buttonReset,
    onClick: handleReset
  }));
};

WidgetSearch.propTypes = process.env.NODE_ENV !== "production" ? {
  placeholder: _propTypes.default.string,
  q: _propTypes.default.string,
  onChange: _propTypes.default.func,
  onReset: _propTypes.default.func
} : {};
var _default = WidgetSearch;
exports.default = _default;
module.exports = exports.default;