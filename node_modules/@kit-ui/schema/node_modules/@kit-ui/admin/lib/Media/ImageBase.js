"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactResizeDetector = require("react-resize-detector");

var _styles = require("@material-ui/core/styles");

var _getImageStyles = require("./utils/getImageStyles");

var _SvgFilters = _interopRequireDefault(require("../SvgFilters/SvgFilters"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    imageBase: {
      width: "100%",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      overflow: "hidden"
    },
    cropbox: {
      position: "absolute",
      overflow: function overflow(props) {
        return props.overflow;
      },
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      margin: "auto"
    },
    image: {
      position: "absolute",
      opacity: 1,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "block",
      width: "auto",
      height: "auto",
      maxWidth: "100%",
      maxHeight: "100%",
      margin: "auto"
    }
  };
});

var ImageBase = function ImageBase(_ref) {
  var className = _ref.className,
      style = _ref.style,
      imageUrl = _ref.imageUrl,
      imageCropdata = _ref.imageCropdata,
      imageFocalpoint = _ref.imageFocalpoint,
      imageFilters = _ref.imageFilters,
      _ref$objectFit = _ref.objectFit,
      objectFit = _ref$objectFit === void 0 ? "contain" : _ref$objectFit,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "absolute" : _ref$position,
      _ref$overflow = _ref.overflow,
      overflow = _ref$overflow === void 0 ? "hidden" : _ref$overflow,
      children = _ref.children,
      width = _ref.width,
      height = _ref.height,
      onLoad = _ref.onLoad,
      onClick = _ref.onClick;
  var parentRef = (0, _react.useRef)(null);
  var cropboxRef = (0, _react.useRef)(null);
  var imageRef = (0, _react.useRef)(null);
  var classes = useStyles({
    overflow: overflow
  });

  var _useState = (0, _react.useState)(false),
      imageLoaded = _useState[0],
      setImageLoaded = _useState[1];

  var imageWidth = imageRef && imageRef.current && imageRef.current.offsetWidth;
  var imageHeight = imageRef && imageRef.current && imageRef.current.offsetHeight;
  var parentWidth = parentRef && parentRef.current && parentRef.current.offsetWidth;
  var parentHeight = parentRef && parentRef.current && parentRef.current.offsetHeight;
  var cropboxWidth = cropboxRef && cropboxRef.current && cropboxRef.current.offsetWidth;
  var cropboxHeight = cropboxRef && cropboxRef.current && cropboxRef.current.offsetHeight;

  var handleLoad = function handleLoad() {
    setImageLoaded(true);
    onLoad && onLoad({
      parentRef: parentRef,
      parentWidth: parentWidth,
      parentHeight: parentHeight,
      cropboxRef: cropboxRef,
      cropboxWidth: cropboxWidth,
      cropboxHeight: cropboxHeight,
      imageRef: imageRef,
      imageWidth: imageWidth,
      imageHeight: imageHeight
    });
  }; // get styles


  var _useState2 = (0, _react.useState)(null),
      cropboxStyle = _useState2[0],
      setCropboxStyle = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      imageStyle = _useState3[0],
      setImageStyle = _useState3[1];

  (0, _react.useEffect)(function () {
    if (!imageRef.current || !parentRef.current) {
      return;
    }

    var cropStyles = (0, _getImageStyles.getImageStyles)({
      imageCropdata: imageCropdata,
      imageFocalpoint: imageFocalpoint,
      imageFilters: imageFilters,
      objectFit: objectFit,
      parentRef: parentRef,
      imageRef: imageRef
    });
    setCropboxStyle(cropStyles.cropbox);
    setImageStyle(cropStyles.image);
  }, [width, height, imageCropdata, imageFilters, imageLoaded]); // return cropped image with styles

  return /*#__PURE__*/_react.default.createElement("div", {
    className: className || classes.imageBase,
    ref: parentRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.cropbox,
    ref: cropboxRef,
    style: cropboxStyle,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement(_SvgFilters.default, {
    cropboxRef: cropboxRef,
    imageRef: imageRef,
    imageFilters: imageFilters
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: imageUrl,
    className: classes.image,
    ref: imageRef,
    style: imageStyle,
    onLoad: handleLoad
  })), children));
};

ImageBase.defaultProps = {
  imageCropdata: {
    x: 0,
    y: 0,
    width: 100,
    height: 100
  }
};

var _default = (0, _reactResizeDetector.withResizeDetector)(ImageBase);

exports.default = _default;
module.exports = exports.default;