"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDraggable = _interopRequireWildcard(require("react-draggable"));

var _stream = require("stream");

var _styles = require("@material-ui/core/styles");

var _getImagePoint = require("./utils/getImagePoint");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _marker;

  return {
    root: {
      position: "absolute",
      zIndex: function zIndex(props) {
        return props.zIndex;
      },
      top: function top(props) {
        return props.top + "%" || "50%";
      },
      left: function left(props) {
        return props.left + "%" || "50%";
      }
    },
    draghandle: {
      position: "absolute",
      //        top: 0,
      //        left: 0,
      display: "block",
      backgroundColor: "blue",
      width: theme.spacing(4) + "px",
      height: theme.spacing(4) + "px",
      transform: "translate(-50%, -50%)",
      borderRadius: "50%",
      opacity: 0.5,
      "&:hover": {
        cursor: function cursor(props) {
          return props.cursor || "move";
        }
      }
    },
    marker: (_marker = {
      width: function width(props) {
        return theme.spacing(props.size);
      },
      height: function height(props) {
        return theme.spacing(props.size);
      },
      top: "0",
      left: "0",
      position: "absolute",
      display: "block",
      transform: "translate(-50%, -50%)",
      backgroundColor: "white",
      borderRadius: "50%",
      opacity: 0.5
    }, _marker["display"] = "flex", _marker.alignItems = "center", _marker.justifyContent = "center", _marker.pointerEvents = "none", _marker),
    label: {
      fontFamily: "Akkurat Mono, monspace",
      fontSize: "14px",
      color: "black"
    }
  };
});

var ImageAnnotationsMarker = function ImageAnnotationsMarker(_ref) {
  var index = _ref.index,
      _ref$top = _ref.top,
      top = _ref$top === void 0 ? 50 : _ref$top,
      _ref$left = _ref.left,
      left = _ref$left === void 0 ? 50 : _ref$left,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 8 : _ref$size,
      onStart = _ref.onStart,
      onDrag = _ref.onDrag,
      onStop = _ref.onStop;

  var _useState = (0, _react.useState)({
    top: top,
    left: left
  }),
      coords = _useState[0],
      setCoords = _useState[1];

  var _useState2 = (0, _react.useState)("grab"),
      cursor = _useState2[0],
      setCursor = _useState2[1];

  var handleStart = function handleStart(event) {
    setCursor('grabbing');
    onStart && onStart(event);
  };

  var handleDrag = function handleDrag(event) {
    var marker = (0, _getImagePoint.getImagePointEvent)(event);
    onDrag && onDrag(event);
    setCoords(marker);
  };

  var handleStop = function handleStop(event) {
    setCursor('grab');
    onStop && onStop(event);
  };

  var classes = useStyles(_extends({
    size: size,
    zIndex: index,
    cursor: cursor
  }, coords));
  return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, {
    bounds: "parent",
    handle: ".draghandle",
    onStart: handleStart,
    onDrag: handleDrag,
    onStop: handleStop
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.draghandle + " draghandle"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.marker
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.label
  }, index + 1))));
};

var _default = ImageAnnotationsMarker;
exports.default = _default;
module.exports = exports.default;