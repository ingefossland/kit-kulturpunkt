"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@material-ui/core/styles");

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _AudioControls = _interopRequireDefault(require("./AudioControls"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    player: {
      backgroundColor: "white",
      display: "flex",
      width: "100%",
      margin: "auto",
      maxWidth: function maxWidth(props) {
        return props.maxWidth || "100%";
      },
      maxHeight: function maxHeight(props) {
        return props.maxHeight || "100%";
      },
      "[data-position=absolute] &": {
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    },
    controls: {
      flexGrow: 1,
      display: "flex",
      flexDirection: "column",
      justifyContent: "space-between",
      minHeight: function minHeight(props) {
        return props.maxHeight || props.minHeight;
      },
      margin: theme.spacing(1),
      "[data-position=absolute] &": {
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    },
    artwork: {
      width: function width(props) {
        return props.artworkSize;
      },
      position: "relative",
      margin: theme.spacing(1),
      "[data-position=absolute] &": {
        position: "absolute",
        top: "50%",
        transform: "translateY(-50%)",
        right: 0,
        bottom: "auto",
        left: 0,
        maxWidth: theme.spacing(32),
        width: "50%",
        margin: "auto"
      }
    },
    image: {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      display: "block",
      width: "100%",
      height: "100%"
    },
    audio: {
      display: "none"
    }
  };
});

var AudioPlayer = function AudioPlayer(_ref) {
  var className = _ref.className,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? "relative" : _ref$position,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? undefined : _ref$size,
      _ref$format = _ref.format,
      format = _ref$format === void 0 ? undefined : _ref$format,
      _ref$minHeight = _ref.minHeight,
      minHeight = _ref$minHeight === void 0 ? undefined : _ref$minHeight,
      _ref$maxWidth = _ref.maxWidth,
      maxWidth = _ref$maxWidth === void 0 ? undefined : _ref$maxWidth,
      _ref$maxHeight = _ref.maxHeight,
      maxHeight = _ref$maxHeight === void 0 ? undefined : _ref$maxHeight,
      title = _ref.title,
      _ref$untitled = _ref.untitled,
      untitled = _ref$untitled === void 0 ? "Untitled" : _ref$untitled,
      description = _ref.description,
      _ref$imageUrl = _ref.imageUrl,
      imageUrl = _ref$imageUrl === void 0 ? undefined : _ref$imageUrl,
      _ref$audioSources = _ref.audioSources,
      audioSources = _ref$audioSources === void 0 ? [] : _ref$audioSources,
      _ref$resources = _ref.resources,
      resources = _ref$resources === void 0 ? {} : _ref$resources,
      props = _objectWithoutPropertiesLoose(_ref, ["className", "position", "size", "format", "minHeight", "maxWidth", "maxHeight", "title", "untitled", "description", "imageUrl", "audioSources", "resources"]);

  if (format || maxHeight) {
    position = "absolute";
  }

  if (size === "large") {
    minHeight = 32 * 8;
  } else if (size === "medium") {
    minHeight = 24 * 8;
  } else if (size === "small") {
    minHeight = 12 * 8;
  }

  var artworkSize;

  if (maxHeight) {
    artworkSize = maxHeight - 96;
  } else if (minHeight) {
    artworkSize = minHeight;
  }

  var classes = useStyles({
    position: position,
    format: format,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    minHeight: minHeight,
    artworkSize: artworkSize
  });
  var playerRef = (0, _react.useRef)(null);
  var imageRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      imageWidth = _useState[0],
      setImageWidth = _useState[1];

  var _useState2 = (0, _react.useState)(null),
      imageHeight = _useState2[0],
      setImageHeight = _useState2[1];

  (0, _react.useEffect)(function () {
    if (!imageRef.current) {
      return;
    }

    imageRef.current.addEventListener('load', function (event) {
      console.log('imageEvent', event);
      var imageWidth = event.target.naturalWidth;
      var imageHeight = event.target.naturalHeight;
      setImageWidth(imageWidth);
      setImageHeight(imageHeight);
    });
  }, [imageRef.current]);

  var _useState3 = (0, _react.useState)(null),
      buffered = _useState3[0],
      setBuffered = _useState3[1];

  var _useState4 = (0, _react.useState)(0),
      currentTime = _useState4[0],
      setCurrentTime = _useState4[1];

  var _useState5 = (0, _react.useState)(0),
      duration = _useState5[0],
      setDuration = _useState5[1];

  var _useState6 = (0, _react.useState)(null),
      seeking = _useState6[0],
      setSeeking = _useState6[1];

  var _useState7 = (0, _react.useState)(true),
      paused = _useState7[0],
      setPaused = _useState7[1];

  var _useState8 = (0, _react.useState)(true),
      volume = _useState8[0],
      setVolume = _useState8[1];

  var _useState9 = (0, _react.useState)(true),
      muted = _useState9[0],
      setMuted = _useState9[1];

  (0, _react.useEffect)(function () {
    if (!playerRef.current) {
      return;
    }

    playerRef.current.addEventListener('loadedmetadata', function (event) {
      var duration = event.target.duration;
      console.log('event', event);
      setBuffered(event.target.buffered);
      setDuration(event.target.duration);
      setCurrentTime(event.target.currentTime);
      setPaused(event.target.paused);
      setMuted(event.target.muted);
      setVolume(event.target.volume);
      props.onMetadata && props.onMetadata({
        duration: duration
      });
    });
    playerRef.current.addEventListener('timeupdate', function (event) {
      setDuration(event.target.duration);
      setCurrentTime(event.target.currentTime);
    });
    playerRef.current.addEventListener('seeking', function (event) {
      setCurrentTime(event.target.currentTime);
      setSeeking(true);
    });
    playerRef.current.addEventListener('seeked', function (event) {
      setCurrentTime(event.target.currentTime);
      setSeeking(false);
    });
    playerRef.current.addEventListener('volumechange', function (event) {
      setVolume(event.target.volume);
    });
    playerRef.current.addEventListener('play', function (event) {
      setPaused(event.target.paused);
    });
    playerRef.current.addEventListener('pause', function (event) {
      setPaused(event.target.paused);
    });
  }, [playerRef.current]);

  var handlePlayPause = function handlePlayPause() {
    var paused = playerRef.current.paused;

    if (paused) {
      playerRef.current.play();
    } else {
      playerRef.current.pause();
    }

    setPaused(!paused);
  };

  var handleSeek = function handleSeek(value) {
    playerRef.current.currentTime = value;
  };

  var handleVolume = function handleVolume(value) {
    playerRef.current.volume = value;
  };

  var handleMute = function handleMute() {
    var mute = playerRef.current.mute;
    playerRef.current.mute = !mute;
    setMuted(!mute);
  };

  if (!audioSources.length && resources) {
    Object.values(resources).map(function (source) {
      var mimeType = source.mimeType,
          url = source.url;

      if (mimeType.startsWith('audio') && url) {
        audioSources.push({
          src: url,
          type: mimeType
        });
      }
    });
  }

  if (!audioSources.length) {
    return /*#__PURE__*/_react.default.createElement("p", null, "No audio sources");
  }

  if (!title && untitled) {
    title = untitled;
  }

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.player,
    "data-layout": "audioPlayer"
  }, /*#__PURE__*/_react.default.createElement(_AudioControls.default, {
    className: classes.controls,
    title: title,
    description: description,
    paused: paused,
    onPlayPause: handlePlayPause,
    duration: duration,
    currentTime: currentTime,
    onSeek: handleSeek
  }), imageUrl && /*#__PURE__*/_react.default.createElement(_Paper.default, {
    component: "figure",
    square: true,
    elevation: 2,
    className: classes.artwork
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: imageUrl,
    ref: imageRef,
    className: classes.image
  })), /*#__PURE__*/_react.default.createElement("audio", {
    ref: playerRef,
    className: classes.audio
  }, audioSources.map(function (_ref2) {
    var src = _ref2.src,
        type = _ref2.type;
    return /*#__PURE__*/_react.default.createElement("source", {
      src: src,
      type: type
    });
  }), "Your browser does not support the audio tag."));
};

AudioPlayer.propTypes = process.env.NODE_ENV !== "production" ? {
  className: _propTypes.default.string,
  untitled: _propTypes.default.string,
  title: _propTypes.default.string,
  description: _propTypes.default.string,

  /** Audio sources */
  audioSources: _propTypes.default.array,

  /** Resources object */
  resources: _propTypes.default.node,

  /** Artwork image */
  imageUrl: _propTypes.default.string
} : {};
var _default = AudioPlayer;
exports.default = _default;
module.exports = exports.default;