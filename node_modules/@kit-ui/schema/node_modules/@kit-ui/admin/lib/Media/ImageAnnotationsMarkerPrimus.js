"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactDraggable = _interopRequireWildcard(require("react-draggable"));

var _stream = require("stream");

var _color = _interopRequireDefault(require("color"));

var _styles = require("@material-ui/core/styles");

var _DragHandle = _interopRequireDefault(require("@material-ui/icons/DragHandle"));

var _RemoveCircle = _interopRequireDefault(require("@material-ui/icons/RemoveCircle"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _ButtonBase = _interopRequireDefault(require("@material-ui/core/ButtonBase"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  var _size, _ref;

  return _ref = {
    root: {
      position: "absolute",
      //        top: props => { return props.top + "%" || "50%"},
      //        left: props => { return props.left + "%" || "50%"},
      zIndex: function zIndex(props) {
        return props.zIndex;
      }
    },
    shape: {
      position: "absolute",
      top: "100%",
      left: "100%",
      width: theme.spacing(2),
      height: theme.spacing(2),
      backgroundColor: function backgroundColor(props) {
        return props.color;
      }
    },
    size: (_size = {
      display: "block",
      position: "absolute",
      //        top: props => { return props.shape === "circle" && theme.spacing(props.size/2 * -1) },
      //        right: props => { return props.shape === "circle" && theme.spacing(props.size/2 * -1) },
      //        bottom: props => { return props.shape === "circle" && theme.spacing(props.size/2 * -1) },
      //        left: props => { return props.shape === "circle" && theme.spacing(props.size/2 * -1) },
      top: 0,
      left: 0,
      width: function width(props) {
        return props.shape === "circle" && theme.spacing(props.size) || theme.spacing(props.width);
      },
      height: function height(props) {
        return props.shape === "circle" && theme.spacing(props.size) || theme.spacing(props.height);
      }
    }, _size["position"] = "absolute", _size["display"] = "block", _size.transform = "translate(-50%, -50%)", _size["display"] = "flex", _size.justifyContent = "center", _size.alignItems = "center", _size["& $colors"] = {
      display: "none"
    }, _size["&:hover $colors"] = {
      display: "flex"
    }, _size["& $removeButton"] = {
      display: "none"
    }, _size["&:hover $removeButton"] = {
      display: "flex"
    }, _size["& $handleButton"] = {
      display: "none"
    }, _size["&:hover $handleButton"] = {
      display: "flex"
    }, _size["&:hover $shape"] = {
      backgroundColor: function backgroundColor(props) {
        return props.hoverColor;
      },
      //            borderColor: "transparent",
      borderStyle: "dotted"
    }, _size["&:hover $labelButton"] = {}, _size)
  }, _ref["shape"] = {
    display: "block",
    position: "absolute",
    top: function top(props) {
      return props.shape === "circle" && 0 || theme.spacing(.5);
    },
    right: function right(props) {
      return props.shape === "circle" && 0 || theme.spacing(.5);
    },
    bottom: function bottom(props) {
      return props.shape === "circle" && 0 || theme.spacing(.5);
    },
    left: function left(props) {
      return props.shape === "circle" && 0 || theme.spacing(.5);
    },
    border: "2px solid",
    color: function color(props) {
      return props.contrastColor;
    },
    borderColor: function borderColor(props) {
      return props.color;
    },
    borderRadius: function borderRadius(props) {
      return props.shape === "circle" && "50%" || "0";
    },
    "&:hover": {
      cursor: function cursor(props) {
        return props.cursor || "move";
      }
    }
  }, _ref.labelButton = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    fontFamily: "Akkurat Mono, monspace",
    fontSize: "14px",
    width: function width(props) {
      return props.shape === "circle" && theme.spacing(3.5) || theme.spacing(4);
    },
    height: function height(props) {
      return props.shape === "circle" && theme.spacing(3.5) || theme.spacing(4);
    },
    backgroundColor: function backgroundColor(props) {
      return props.color;
    },
    border: "1px solid",
    borderColor: function borderColor(props) {
      return props.color;
    },
    color: function color(props) {
      return props.contrastColor;
    },
    borderRadius: function borderRadius(props) {
      return props.shape === "rectangle" && "50%" || "0";
    }
  }, _ref.removeButton = {
    position: "absolute",
    top: theme.spacing(-2),
    right: theme.spacing(-2)
  }, _ref.removeShape = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: function backgroundColor(props) {
      return props.color;
    },
    width: "18px",
    height: "18px",
    borderRadius: "9px"
  }, _ref.removeIcon = {
    display: "block",
    backgroundColor: function backgroundColor(props) {
      return props.contrastColor || theme.palette.text.primary;
    },
    width: "9px",
    height: "2px"
  }, _ref.colors = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, _ref.colorButton = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, _ref.colorIcon = {
    display: "block",
    backgroundColor: function backgroundColor(props) {
      return props.color;
    },
    width: theme.spacing(1.5),
    height: theme.spacing(1.5),
    borderRadius: theme.spacing(1),
    margin: theme.spacing(1)
  }, _ref.handleButton = {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "absolute",
    top: function top(props) {
      return props.top && "0" || "auto";
    },
    right: function right(props) {
      return props.right && "0" || "auto";
    },
    bottom: function bottom(props) {
      return props.bottom && "0" || "auto";
    },
    left: function left(props) {
      return props.left && "0" || "auto";
    },
    margin: theme.spacing(-1)
  }, _ref.handleIcon = {
    display: "block",
    backgroundColor: function backgroundColor(props) {
      return props.color;
    },
    width: theme.spacing(1),
    height: theme.spacing(1),
    margin: theme.spacing(1)
  }, _ref;
});

var ButtonHandle = function ButtonHandle(_ref2) {
  var color = _ref2.color,
      top = _ref2.top,
      right = _ref2.right,
      bottom = _ref2.bottom,
      left = _ref2.left,
      onResize = _ref2.onResize;
  var classes = useStyles({
    color: color,
    top: top,
    left: left,
    bottom: bottom,
    right: right
  });

  var handleResize = function handleResize(_ref3) {
    var x = _ref3.x,
        y = _ref3.y;

    if (left) {
      x = x * -1;
    }

    if (top) {
      y = y * -1;
    }

    onResize && onResize({
      x: x,
      y: y
    });
  };

  var handleStart = function handleStart(event, data) {
    console.log('onStart', data);
  };

  var handleDrag = function handleDrag(event, data) {
    console.log('onDrag', data);
  };

  var handleStop = function handleStop(event, data) {
    console.log('onStop', data);
    handleResize(data);
  };

  return /*#__PURE__*/_react.default.createElement(_reactDraggable.default, {
    position: {
      x: 0,
      y: 0
    },
    onStart: handleStart,
    onDrag: handleDrag,
    onStop: handleStop
  }, /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.handleButton
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: classes.handleIcon
  })));
};

var ButtonLabel = function ButtonLabel(_ref4) {
  var index = _ref4.index,
      color = _ref4.color,
      contrastColor = _ref4.contrastColor,
      shape = _ref4.shape,
      onClick = _ref4.onClick;
  var classes = useStyles({
    color: color,
    contrastColor: contrastColor,
    shape: shape
  });
  return /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.labelButton,
    onClick: onClick
  }, index + 1);
};

var ButtonRemove = function ButtonRemove(_ref5) {
  var className = _ref5.className,
      color = _ref5.color,
      contrastColor = _ref5.contrastColor,
      onClick = _ref5.onClick;
  var classes = useStyles({
    color: color,
    contrastColor: contrastColor
  });
  return /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    className: className || classes.removeButton,
    onClick: onClick
  }, /*#__PURE__*/_react.default.createElement("b", {
    className: classes.removeShape
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: classes.removeIcon
  })));
};

var ButtonColor = function ButtonColor(_ref6) {
  var color = _ref6.color,
      onClick = _ref6.onClick;
  var classes = useStyles({
    color: color
  });
  return /*#__PURE__*/_react.default.createElement(_ButtonBase.default, {
    className: classes.colorButton,
    onClick: color && onClick
  }, /*#__PURE__*/_react.default.createElement("i", {
    className: classes.colorIcon
  }));
};

var MarkerPrimus = function MarkerPrimus(_ref7) {
  var index = _ref7.index,
      position = _ref7.position,
      onStart = _ref7.onStart,
      onDrag = _ref7.onDrag,
      onStop = _ref7.onStop,
      props = _objectWithoutPropertiesLoose(_ref7, ["index", "position", "onStart", "onDrag", "onStop"]);

  var colors = ["white", "#bbb", "#777", "#333", "black", "red", "green", "blue", "#FF8080", "#80FF80", "#8080FF", "yellow", "#0ff", "#f0f", "#ffff08", "#08ffff", "#ff08ff"];

  var _useState = (0, _react.useState)("grab"),
      cursor = _useState[0],
      setCursor = _useState[1];

  var _useState2 = (0, _react.useState)(props.shape || "circle"),
      shape = _useState2[0],
      setShape = _useState2[1];

  var _useState3 = (0, _react.useState)(props.size || 12),
      size = _useState3[0],
      setSize = _useState3[1];

  var _useState4 = (0, _react.useState)(props.width || props.size || 12),
      width = _useState4[0],
      setWidth = _useState4[1];

  var _useState5 = (0, _react.useState)(props.height || props.size || 12),
      height = _useState5[0],
      setHeight = _useState5[1];

  var _useState6 = (0, _react.useState)(props.color || color[0]),
      color = _useState6[0],
      setColor = _useState6[1];

  var _useState7 = (0, _react.useState)(color[0]),
      contrastColor = _useState7[0],
      setContrastColor = _useState7[1];

  var _useState8 = (0, _react.useState)(color[0]),
      borderColor = _useState8[0],
      setBorderColor = _useState8[1];

  var _useState9 = (0, _react.useState)(color[0]),
      nextColor = _useState9[0],
      setNextColor = _useState9[1];

  var _useState10 = (0, _react.useState)(color[0]),
      prevColor = _useState10[0],
      setPrevColor = _useState10[1];

  var _useState11 = (0, _react.useState)(color[0]),
      hoverColor = _useState11[0],
      setHoverColor = _useState11[1];

  (0, _react.useEffect)(function () {
    //        setCoords({top: top, left: left})
    setContrastColor((0, _color.default)(color).isDark() && "white" || "black");
    setBorderColor((0, _color.default)(color).isDark() && "rgba(255,255,255,.5)" || "rgba(0,0,0,.5)");
    setHoverColor((0, _color.default)(color).alpha(0.25).rgb().string());
    setNextColor(colors[colors.indexOf(color) + 1] || colors[0]);
    setPrevColor(colors[colors.indexOf(color) - 1] || colors[colors.length - 1]);
  }, [color, index]);

  var toggleColor = function toggleColor(color) {
    setColor(color);
  };

  var toggleShape = function toggleShape() {
    if (shape === "circle") {
      setShape('rectangle');
      setWidth(size);
      setHeight(size);
    } else {
      setShape('circle');
      setSize((width + height) / 2);
    }
  };

  var handleStart = function handleStart(event, data) {
    setCursor('grabbing');
    onStart && onStart(event, data);
  };

  var handleDrag = function handleDrag(event, data) {
    onDrag && onDrag(event, data);
  };

  var handleStop = function handleStop(event, data) {
    setCursor('grab');
    onStop && onStop(event, data);
  };

  var handleResize = function handleResize(_ref8) {
    var x = _ref8.x,
        y = _ref8.y;
    var newWidth = width + x / 8;
    var newHeight = height + y / 8;
    setWidth(newWidth);
    setHeight(newHeight);
    setSize((newWidth + newHeight) / 2);
  };

  var classes = useStyles({
    size: size,
    width: width,
    height: height,
    zIndex: index,
    color: color,
    contrastColor: contrastColor,
    hoverColor: hoverColor,
    cursor: cursor,
    shape: shape
  });
  return /*#__PURE__*/_react.default.createElement(_reactDraggable.default, {
    bounds: "parent",
    handle: ".draghandle",
    position: position,
    onStart: handleStart,
    onDrag: handleDrag,
    onStop: handleStop
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.size
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.shape + " draghandle"
  }), /*#__PURE__*/_react.default.createElement(ButtonHandle, {
    top: true,
    left: true,
    color: color,
    onResize: handleResize
  }), /*#__PURE__*/_react.default.createElement(ButtonHandle, {
    bottom: true,
    left: true,
    color: color,
    onResize: handleResize
  }), /*#__PURE__*/_react.default.createElement(ButtonHandle, {
    bottom: true,
    right: true,
    color: color,
    onResize: handleResize
  }), /*#__PURE__*/_react.default.createElement(ButtonRemove, {
    className: classes.removeButton,
    color: color,
    contrastColor: contrastColor
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.colors
  }, /*#__PURE__*/_react.default.createElement(ButtonColor, {
    color: prevColor,
    onClick: function onClick() {
      return toggleColor(prevColor);
    }
  }), /*#__PURE__*/_react.default.createElement(ButtonLabel, {
    shape: shape,
    color: color,
    contrastColor: contrastColor,
    index: index,
    onClick: toggleShape
  }), /*#__PURE__*/_react.default.createElement(ButtonColor, {
    color: nextColor,
    onClick: function onClick() {
      return toggleColor(nextColor);
    }
  })))));
};

MarkerPrimus.defaultProps = {
  color: "white"
};
var _default = MarkerPrimus;
exports.default = _default;
module.exports = exports.default;