"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _ModuleBase = _interopRequireDefault(require("./ModuleBase"));

var _ModulePrefix = _interopRequireDefault(require("./ModulePrefix"));

var _ModuleMedia = _interopRequireDefault(require("./ModuleMedia"));

var _ModuleTitle = _interopRequireDefault(require("./ModuleTitle"));

var _ModuleLabel = _interopRequireDefault(require("./ModuleLabel"));

var _ModuleMetadata = _interopRequireDefault(require("./ModuleMetadata"));

var _ModuleDescription = _interopRequireDefault(require("./ModuleDescription"));

var _ModuleStatus = _interopRequireDefault(require("./ModuleStatus"));

var _ModuleByline = _interopRequireDefault(require("./ModuleByline"));

var _NavToolbar = _interopRequireDefault(require("../NavToolbar/NavToolbar"));

var _NavSettings = _interopRequireDefault(require("../NavSettings/NavSettings"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    module: {
      position: "relative",
      display: "flex",
      minHeight: theme.spacing(8),
      justifyContent: "flex-start",
      alignItems: "center",
      userSelect: "none",
      "&[aria-selected=true]": {
        backgroundColor: theme.palette.action.selected
      },
      "&[role=button]": {
        cursor: "pointer",
        "& *": {
          pointerEvents: "none"
        },
        "&[aria-selected=true]": {}
      },
      "&[data-elevated=true]": {
        paddingLeft: theme.spacing(1),
        paddingRight: theme.spacing(1)
      },
      "& + $module": {
        borderTop: "1px solid",
        borderColor: theme.palette.divider
      },
      "&.sortable-helper": {
        borderTopColor: "transparent",
        boxShadow: theme.shadows[12],
        zIndex: 2000,
        "& $settings": {
          display: "none"
        },
        "& $toolbar": {
          display: "none"
        }
      },
      "&[data-status=erased]": {
        "& figure": {
          opacity: "0.5"
        },
        "& $content": {
          opacity: "0.5"
        }
      },
      "&[data-status=trash]": {
        "& figure": {
          opacity: "0.5"
        },
        "& $content": {
          opacity: "0.5"
        }
      }
    },
    item: {
      display: "flex",
      width: "100%",
      justifyContent: "flex-start",
      alignItems: "center",
      userSelect: "none"
    },
    primaryAction: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    },
    settings: {
      zIndex: 3,
      display: "flex",
      flexWrap: "none"
    },
    toolbar: {
      zIndex: 3,
      display: "flex",
      flexWrap: "none",
      "& button": {
        opacity: .5,
        "&:hover": {
          opacity: 1
        }
      }
    },
    body: {},
    media: {
      display: "flex"
    },
    content: {
      flexGrow: 1,
      maxWidth: "100%",
      flexDirection: "column",
      overflow: "hidden",
      alignItems: "flex-start",
      justifyContent: "flex-start",
      margin: theme.spacing(1)
    },
    header: {
      width: "100%",
      maxWidth: "100%",
      overflow: "hidden",
      display: "flex",
      alignItems: "baseline",
      justifyContent: "flex-start",
      "& * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    footer: {
      width: "100%",
      maxWidth: "100%",
      overflow: "hidden",
      display: "flex",
      alignItems: "baseline",
      justifyContent: "flex-start",
      "& * + *": {
        marginLeft: theme.spacing(.5)
      }
    },
    uploadProgress: {
      position: "absolute",
      zIndex: 2,
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    },
    progress: {
      position: "absolute",
      backgroundColor: theme.palette.primary.main,
      //        opacity: 0.25,
      height: theme.spacing(.25),
      top: "auto",
      right: "auto",
      bottom: 0,
      left: 0,
      width: function width(props) {
        return props.uploadProgress + "%";
      }
    }
  };
});
/** ListModule for listing documents */

var ListModule = function ListModule(_ref) {
  var uploadProgress = _ref.uploadProgress,
      imageUrl = _ref.imageUrl,
      untitled = _ref.untitled,
      typeLabel = _ref.typeLabel,
      type = _ref.type,
      title = _ref.title,
      description = _ref.description,
      metadata = _ref.metadata,
      status = _ref.status,
      statusLabel = _ref.statusLabel,
      author = _ref.author,
      datetime = _ref.datetime,
      selected = _ref.selected,
      onClick = _ref.onClick,
      props = _objectWithoutPropertiesLoose(_ref, ["uploadProgress", "imageUrl", "untitled", "typeLabel", "type", "title", "description", "metadata", "status", "statusLabel", "author", "datetime", "selected", "onClick"]);

  var classes = useStyles({
    uploadProgress: uploadProgress
  });
  return /*#__PURE__*/_react.default.createElement(_ModuleBase.default, _extends({}, props, {
    className: classes.module,
    role: onClick && "button",
    status: status,
    selected: selected,
    onClick: onClick
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.item
  }, /*#__PURE__*/_react.default.createElement(_ModulePrefix.default, _extends({
    className: classes.primaryAction,
    selected: selected
  }, props)), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.media
  }, /*#__PURE__*/_react.default.createElement(_ModuleMedia.default, {
    backgroundColor: "transparent",
    imageUrl: imageUrl,
    width: "48px",
    height: "48px"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.content
  }, /*#__PURE__*/_react.default.createElement("header", {
    className: classes.header
  }, /*#__PURE__*/_react.default.createElement(_ModuleTitle.default, {
    status: status,
    untitled: untitled,
    title: title,
    onClick: !onClick && props.onEdit
  }), /*#__PURE__*/_react.default.createElement(_ModuleStatus.default, {
    statusLabel: statusLabel,
    status: statusLabel || status
  }), /*#__PURE__*/_react.default.createElement(_ModuleByline.default, {
    author: author,
    datetime: datetime
  })), /*#__PURE__*/_react.default.createElement("footer", {
    className: classes.footer
  }, /*#__PURE__*/_react.default.createElement(_ModuleLabel.default, {
    label: typeLabel || type
  }), /*#__PURE__*/_react.default.createElement(_ModuleMetadata.default, {
    metadata: metadata
  }), /*#__PURE__*/_react.default.createElement(_ModuleDescription.default, {
    description: description
  }))), uploadProgress && /*#__PURE__*/_react.default.createElement("div", {
    className: classes.uploadProgress
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: classes.progress
  })), /*#__PURE__*/_react.default.createElement(_NavSettings.default, _extends({}, props, {
    className: classes.settings
  })), /*#__PURE__*/_react.default.createElement(_NavToolbar.default, _extends({}, props, {
    className: classes.toolbar
  }))));
};

ListModule.propTypes = process.env.NODE_ENV !== "production" ? {
  selectable: _propTypes.default.bool,
  selected: _propTypes.default.bool,
  onSelect: _propTypes.default.func,
  editable: _propTypes.default.bool,
  onEdit: _propTypes.default.func,
  deletable: _propTypes.default.bool,
  onDelete: _propTypes.default.func,
  restorable: _propTypes.default.bool,
  onRestore: _propTypes.default.func,
  imageUrl: _propTypes.default.string,
  title: _propTypes.default.string,
  description: _propTypes.default.string,
  type: _propTypes.default.string,
  typeLabel: _propTypes.default.string,
  metadata: _propTypes.default.array,
  status: _propTypes.default.string,
  statusLabel: _propTypes.default.string,
  author: _propTypes.default.string,
  datetime: _propTypes.default.string,

  /** Whole object is clickable, will override any other onClick events */
  onClick: _propTypes.default.func
} : {};
ListModule.defaultProps = {
  //    size: "small",
  editable: false,
  selectable: false,
  selected: false,
  deletable: false,
  restorable: false
};
var _default = ListModule;
exports.default = _default;
module.exports = exports.default;