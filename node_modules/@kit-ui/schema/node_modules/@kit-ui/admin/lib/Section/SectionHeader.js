"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ButtonCollapsible = _interopRequireDefault(require("./ButtonCollapsible"));

var _NavToolbar = _interopRequireDefault(require("../NavToolbar/NavToolbar"));

var _NavSettings = _interopRequireDefault(require("../NavSettings/NavSettings"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _styles = require("@material-ui/core/styles");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var useStyles = (0, _styles.makeStyles)(function (theme) {
  return {
    header: {
      display: "flex",
      alignItems: "center",
      minHeight: theme.spacing(7),
      paddingLeft: theme.spacing(1),
      paddingRight: theme.spacing(1),
      userSelect: "none",
      "&[aria-expanded=true]": {
        minHeight: theme.spacing(8)
      }
    },
    content: {
      flexGrow: 1,
      maxWidth: "100%",
      marginLeft: theme.spacing(1),
      marginRight: theme.spacing(1),
      "&[data-editable=true]:hover": {
        cursor: "pointer"
      },
      "&[data-collapsible=true]:hover": {
        cursor: "pointer"
      }
    },
    title: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "18px",
      fontWeight: "normal",
      letterSpacing: 0
    },
    description: {
      fontFamily: "Akkurat, sans-serif",
      fontSize: "16px",
      fontWeight: "normal",
      letterSpacing: 0,
      opacity: ".6",
      marginLeft: theme.spacing(1)
    },
    settings: {
      zIndex: 3,
      display: "flex",
      alignItems: "center",
      flexWrap: "none"
    },
    toolbar: {
      zIndex: 3,
      display: "flex",
      alignItems: "center",
      flexWrap: "none",
      "& button": {
        opacity: .5,
        "&:hover": {
          opacity: 1
        }
      }
    }
  };
});

var SectionHeader = function SectionHeader(_ref) {
  var title = _ref.title,
      _ref$untitled = _ref.untitled,
      untitled = _ref$untitled === void 0 ? "Untitled" : _ref$untitled,
      description = _ref.description,
      startAdornment = _ref.startAdornment,
      collapsible = _ref.collapsible,
      editable = _ref.editable,
      expanded = _ref.expanded,
      onToggle = _ref.onToggle,
      props = _objectWithoutPropertiesLoose(_ref, ["title", "untitled", "description", "startAdornment", "collapsible", "editable", "expanded", "onToggle"]);

  var classes = useStyles();

  if (!title && untitled) {
    title = untitled;
  }

  var hasToggle = collapsible || editable;
  var hideToolbar = editable && expanded;
  return /*#__PURE__*/_react.default.createElement("header", {
    className: classes.header,
    "aria-expanded": expanded
  }, !expanded && startAdornment && /*#__PURE__*/_react.default.createElement("div", {
    className: classes.startAdornment
  }, startAdornment), collapsible && /*#__PURE__*/_react.default.createElement(_ButtonCollapsible.default, {
    expanded: expanded,
    onClick: onToggle
  }), /*#__PURE__*/_react.default.createElement(_Typography.default, {
    noWrap: true,
    className: classes.content,
    "data-collapsible": collapsible,
    onClick: hasToggle ? onToggle : undefined
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: classes.title,
    noWrap: true
  }, title), description && /*#__PURE__*/_react.default.createElement("span", {
    className: classes.description,
    variant: "h3",
    noWrap: true
  }, description)), /*#__PURE__*/_react.default.createElement(_NavSettings.default, _extends({}, props, {
    className: classes.settings
  })), !hideToolbar && /*#__PURE__*/_react.default.createElement(_NavToolbar.default, _extends({}, props, {
    className: classes.toolbar,
    editable: editable
  })));
};

var _default = SectionHeader;
exports.default = _default;
module.exports = exports.default;