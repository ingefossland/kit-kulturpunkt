"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _core = require("@kit-ui/core");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _Icon = _interopRequireDefault(require("@material-ui/core/Icon"));

var _List = _interopRequireDefault(require("@material-ui/core/List"));

var _ListItem = _interopRequireDefault(require("@material-ui/core/ListItem"));

var _ListItemIcon = _interopRequireDefault(require("@material-ui/core/ListItemIcon"));

var _ListItemText = _interopRequireDefault(require("@material-ui/core/ListItemText"));

var _iso = _interopRequireDefault(require("iso-639-1"));

var _LocaleIcon = _interopRequireDefault(require("./LocaleIcon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var NavLocale = function NavLocale(_ref) {
  var _ref$options = _ref.options,
      options = _ref$options === void 0 ? [] : _ref$options,
      value = _ref.value,
      onChange = _ref.onChange;

  var _useState = (0, _react.useState)(false),
      expanded = _useState[0],
      setExpanded = _useState[1];

  var anchorRef = (0, _react.useRef)(null);

  var _onToggle = function _onToggle(event) {
    setExpanded(function (prevExpanded) {
      return !prevExpanded;
    });
  };

  var _onCollapse = function _onCollapse(event) {
    setExpanded(false);
  };

  var _onChange = function _onChange(value) {
    onChange && onChange(value);
    setExpanded(false);
  };

  var ListOption = function ListOption(option) {
    var title = option.title,
        value = option.value,
        onClick = option.onClick;
    return /*#__PURE__*/_react.default.createElement(_ListItem.default, {
      button: true,
      onClick: onClick
    }, /*#__PURE__*/_react.default.createElement(_ListItemIcon.default, null, /*#__PURE__*/_react.default.createElement(_Icon.default, null, /*#__PURE__*/_react.default.createElement(_LocaleIcon.default, {
      value: value
    }))), /*#__PURE__*/_react.default.createElement(_ListItemText.default, {
      primary: title || value
    }));
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_IconButton.default, {
    onClick: _onToggle,
    ref: anchorRef
  }, /*#__PURE__*/_react.default.createElement(_LocaleIcon.default, {
    value: value
  })), /*#__PURE__*/_react.default.createElement(_core.Dropdown, {
    expanded: expanded,
    anchorEl: anchorRef.current,
    onClickAway: _onCollapse
  }, /*#__PURE__*/_react.default.createElement(_List.default, null, options && options.map(function (option, index) {
    if (typeof option === "string") {
      option = {
        title: _iso.default.getNativeName(option) || option,
        value: option
      };
    }

    var value = option.value;
    return /*#__PURE__*/_react.default.createElement(ListOption, _extends({}, option, {
      key: index,
      onClick: function onClick() {
        return _onChange(value);
      }
    }));
  }))));
};

var _default = NavLocale;
exports.default = _default;
module.exports = exports.default;