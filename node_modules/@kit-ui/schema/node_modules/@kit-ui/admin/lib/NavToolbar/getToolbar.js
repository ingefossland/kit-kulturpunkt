"use strict";

exports.__esModule = true;
exports.default = exports.getToolbar = void 0;

var getVisibilityOptions = function getVisibilityOptions(props) {
  var hideable = props.hideable,
      hidden = props.hidden,
      deletable = props.deletable,
      deleted = props.deleted,
      restorable = props.restorable,
      restored = props.restored,
      removable = props.removable;
  var onHide = props.onHide,
      onUnhide = props.onUnhide,
      onDelete = props.onDelete,
      onRestore = props.onRestore,
      onRemove = props.onRemove; // hideable

  var options = [];

  if (hideable) {
    options.push({
      name: "hidden",
      icon: "visibility",
      title: "Visible",
      onClick: onUnhide
    });
    options.push({
      name: "hidden",
      icon: "visibility_off",
      title: "Hidden",
      onClick: onHide
    });
  } // deletable && restorable


  if (deletable && restorable) {
    if (deleted) {
      options.push({
        type: "button",
        variant: "outlined",
        name: "restore",
        title: "Restore",
        onClick: onRestore
      });
    } else {
      options.push({
        type: "button",
        variant: "outlined",
        name: "delete",
        title: "Delete",
        onClick: onDelete
      });
    } // deletable

  } else if (deletable && onDelete) {
    options.push({
      type: "button",
      variant: "outlined",
      name: "delete",
      title: "Delete",
      onClick: onDelete
    }); // removable
  } else if (removable) {
    options.push({
      type: "button",
      variant: "outlined",
      name: "remove",
      title: "Remove",
      onClick: onRemove
    });
  } // set icon


  var icon;

  if (deleted && restorable) {
    icon = "restore";
  } else if (deleted) {
    icon = "delete";
  } else if (hidden) {
    icon = "visibility_off";
  } else {
    icon = "visibility";
  }

  return {
    name: "visibility",
    icon: icon,
    options: options
  };
};

var getVisibilityToolbar = function getVisibilityToolbar(props, toolbar) {
  var hideable = props.hideable,
      hidden = props.hidden,
      deletable = props.deletable,
      deleted = props.deleted,
      restorable = props.restorable,
      restored = props.restored,
      erasable = props.erasable,
      erased = props.erased,
      addable = props.addable,
      removable = props.removable;
  var onHide = props.onHide,
      onUnhide = props.onUnhide,
      onDelete = props.onDelete,
      onRestore = props.onRestore,
      onErase = props.onErase,
      onRemove = props.onRemove; // deleted

  if (deleted) {
    toolbar = [];

    if (restorable) {
      toolbar.push({
        name: "restore",
        icon: "restore",
        onClick: onRestore
      });
    }

    if (erasable) {
      toolbar.push({
        name: "erase",
        icon: "delete_forever",
        onClick: onErase
      });
    }

    if (!toolbar.length) {
      toolbar.push({
        name: "deleted",
        icon: "delete",
        disabled: true
      });
    }

    return toolbar; // hideable => visibility options
  } else if (hideable && (deletable || restorable)) {
    var visibility = getVisibilityOptions(props);
    toolbar.push(visibility); // hideable
  } else if (hideable && hidden) {
    toolbar.push({
      name: "hidden",
      icon: "visibility_off",
      onClick: onUnhide
    });
  } else if (hideable) {
    toolbar.push({
      name: "hidden",
      icon: "visibility",
      onClick: onHide
    }); // deletable
  } else if (deletable) {
    toolbar.push({
      name: "remove",
      icon: "delete",
      onClick: onDelete
    }); // removable
  } else if (removable) {
    toolbar.push({
      name: "remove",
      icon: "remove_circle",
      onClick: onRemove
    });
  }

  return toolbar;
};

var getEditableToolbar = function getEditableToolbar(props, toolbar) {
  var editable = props.editable,
      editing = props.editing;
  var onEdit = props.onEdit,
      onSave = props.onSave;

  if (editable && editing) {
    toolbar.unshift({
      label: "Save",
      onClick: onSave
    });
  } else if (editable) {
    toolbar.unshift({
      icon: "edit",
      onClick: onEdit
    });
  }

  return toolbar;
};

var getToolbar = function getToolbar(props) {
  var toolbar = [];
  toolbar = getEditableToolbar(props, toolbar);
  toolbar = getVisibilityToolbar(props, toolbar);
  return toolbar;
};

exports.getToolbar = getToolbar;
var _default = getToolbar;
exports.default = _default;