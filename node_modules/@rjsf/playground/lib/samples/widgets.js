"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _default = {
  schema: {
    title: "Widgets",
    type: "object",
    properties: {
      stringFormats: {
        type: "object",
        title: "String formats",
        properties: {
          email: {
            type: "string",
            format: "email"
          },
          uri: {
            type: "string",
            format: "uri"
          }
        }
      },
      "boolean": {
        type: "object",
        title: "Boolean field",
        properties: {
          "default": {
            type: "boolean",
            title: "checkbox (default)",
            description: "This is the checkbox-description"
          },
          radio: {
            type: "boolean",
            title: "radio buttons",
            description: "This is the radio-description"
          },
          select: {
            type: "boolean",
            title: "select box",
            description: "This is the select-description"
          }
        }
      },
      string: {
        type: "object",
        title: "String field",
        properties: {
          "default": {
            type: "string",
            title: "text input (default)"
          },
          textarea: {
            type: "string",
            title: "textarea"
          },
          color: {
            type: "string",
            title: "color picker",
            "default": "#151ce6"
          }
        }
      },
      secret: {
        type: "string",
        "default": "I'm a hidden string."
      },
      disabled: {
        type: "string",
        title: "A disabled field",
        "default": "I am disabled."
      },
      readonly: {
        type: "string",
        title: "A readonly field",
        "default": "I am read-only."
      },
      readonly2: {
        type: "string",
        title: "Another readonly field",
        "default": "I am also read-only.",
        readOnly: true
      },
      widgetOptions: {
        title: "Custom widget with options",
        type: "string",
        "default": "I am yellow"
      },
      selectWidgetOptions: {
        title: "Custom select widget with options",
        type: "string",
        "enum": ["foo", "bar"],
        enumNames: ["Foo", "Bar"]
      }
    }
  },
  uiSchema: {
    "boolean": {
      radio: {
        "ui:widget": "radio"
      },
      select: {
        "ui:widget": "select"
      }
    },
    string: {
      textarea: {
        "ui:widget": "textarea",
        "ui:options": {
          rows: 5
        }
      },
      color: {
        "ui:widget": "color"
      }
    },
    secret: {
      "ui:widget": "hidden"
    },
    disabled: {
      "ui:disabled": true
    },
    readonly: {
      "ui:readonly": true
    },
    widgetOptions: {
      "ui:widget": function uiWidget(_ref) {
        var value = _ref.value,
            _onChange = _ref.onChange,
            options = _ref.options;
        var backgroundColor = options.backgroundColor;
        return _react["default"].createElement("input", {
          className: "form-control",
          onChange: function onChange(event) {
            return _onChange(event.target.value);
          },
          style: {
            backgroundColor: backgroundColor
          },
          value: value
        });
      },
      "ui:options": {
        backgroundColor: "yellow"
      }
    },
    selectWidgetOptions: {
      "ui:widget": function uiWidget(_ref2) {
        var value = _ref2.value,
            _onChange2 = _ref2.onChange,
            options = _ref2.options;
        var enumOptions = options.enumOptions,
            backgroundColor = options.backgroundColor;
        return _react["default"].createElement("select", {
          className: "form-control",
          style: {
            backgroundColor: backgroundColor
          },
          value: value,
          onChange: function onChange(event) {
            return _onChange2(event.target.value);
          }
        }, enumOptions.map(function (_ref3, i) {
          var label = _ref3.label,
              value = _ref3.value;
          return _react["default"].createElement("option", {
            key: i,
            value: value
          }, label);
        }));
      },
      "ui:options": {
        backgroundColor: "pink"
      }
    }
  },
  formData: {
    stringFormats: {
      email: "chuck@norris.net",
      uri: "http://chucknorris.com/"
    },
    "boolean": {
      "default": true,
      radio: true,
      select: true
    },
    string: {
      "default": "Hello...",
      textarea: "... World"
    },
    secret: "I'm a hidden string."
  }
};
exports["default"] = _default;